# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::Channel::TestCase::Behavior
  CHANNEL_IDENTIFIER = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

module ActionCable::Connection::TestCase::Behavior
  DEFAULT_PATH = ::T.let(nil, ::T.untyped)
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class ActionCable::SubscriptionAdapter::PostgreSQL
  include ::ActionCable::SubscriptionAdapter::ChannelPrefix
  def initialize(*arg); end

  def with_broadcast_connection(&block); end

  def with_subscriptions_connection(&block); end
end

class ActionCable::SubscriptionAdapter::PostgreSQL::Listener
  def initialize(adapter, event_loop); end

  def invoke_callback(*arg); end

  def listen(); end

  def shutdown(); end
end

class ActionCable::SubscriptionAdapter::PostgreSQL::Listener
end

class ActionCable::SubscriptionAdapter::PostgreSQL
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::AllowBrowser::BrowserBlocker
  SETS = ::T.let(nil, ::T.untyped)
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Live::SSE
  PERMITTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::Redirecting
  ILLEGAL_HEADER_VALUE_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Renderer
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  CSRF_TOKEN = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::Streaming::Body
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class ActionController::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions::ResponseAssertions
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssumeSSL
  def call(env); end

  def initialize(app); end
end

class ActionDispatch::AssumeSSL
end

module ActionDispatch::Constants
  CONTENT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_SECURITY_POLICY = ::T.let(nil, ::T.untyped)
  CONTENT_SECURITY_POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
  FEATURE_POLICY = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  SERVER_TIMING = ::T.let(nil, ::T.untyped)
  STRICT_TRANSPORT_SECURITY = ::T.let(nil, ::T.untyped)
  VARY = ::T.let(nil, ::T.untyped)
  X_CASCADE = ::T.let(nil, ::T.untyped)
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_DIRECTIVES = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SAME_SITE_PROTECTION = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
  USE_COOKIES_WITH_METADATA = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::DebugView
  def debug_hash(object); end

  def debug_headers(headers); end

  def debug_params(params); end

  def error_highlight_available?(); end

  def initialize(assigns); end

  def params_valid?(); end

  def protect_against_forgery?(); end

  def render(*arg); end
  RESCUES_TEMPLATE_PATHS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugView
end

class ActionDispatch::ExceptionWrapper::SourceMapLocation
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::FileHandler
  PRECOMPRESSED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization
  ALLOWED_HOSTS_IN_DEVELOPMENT = ::T.let(nil, ::T.untyped)
  IPV4_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME_WITH_PORT = ::T.let(nil, ::T.untyped)
  PORT_REGEX = ::T.let(nil, ::T.untyped)
  SUBDOMAIN_REGEX = ::T.let(nil, ::T.untyped)
  VALID_IP_HOSTNAME = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization::DefaultResponseApp
  RESPONSE_STATUS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Response
  NO_STORE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration
end

module ActionDispatch::Integration::RequestHelpers
  def delete(path, **args); end

  def follow_redirect!(headers: T.unsafe(nil), **args); end

  def get(path, **args); end

  def head(path, **args); end

  def options(path, **args); end

  def patch(path, **args); end

  def post(path, **args); end

  def put(path, **args); end
end

module ActionDispatch::Integration::RequestHelpers
end

module ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  def app(); end

  def assertions(); end

  def assertions=(assertions); end

  def assigns(*arg, **arg1, &arg2); end

  def before_setup(); end

  def cookies(*arg, **arg1, &arg2); end

  def copy_session_variables!(); end

  def create_session(app); end

  def default_url_options(); end

  def default_url_options=(options); end

  def delete(*arg, **arg1, &arg2); end

  def follow_redirect!(*arg, **arg1, &arg2); end

  def get(*arg, **arg1, &arg2); end

  def head(*arg, **arg1, &arg2); end

  def initialize(*args, &blk); end

  def integration_session(); end

  def open_session(); end

  def patch(*arg, **arg1, &arg2); end

  def post(*arg, **arg1, &arg2); end

  def put(*arg, **arg1, &arg2); end

  def remove!(); end

  def reset!(); end

  def root_session(); end

  def root_session=(root_session); end
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
end

class ActionDispatch::Integration::Session
  include ::Minitest::Assertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def accept(); end

  def accept=(accept); end

  def body(*arg, **arg1, &arg2); end

  def controller(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def headers(*arg, **arg1, &arg2); end

  def host(); end

  def host!(arg); end

  def host=(host); end

  def https!(flag=T.unsafe(nil)); end

  def https?(); end

  def initialize(app); end

  def path(*arg, **arg1, &arg2); end

  def process(method, path, params: T.unsafe(nil), headers: T.unsafe(nil), env: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def redirect?(*arg, **arg1, &arg2); end

  def remote_addr(); end

  def remote_addr=(remote_addr); end

  def request(); end

  def request_count(); end

  def request_count=(request_count); end

  def reset!(); end

  def response(); end

  def status(*arg, **arg1, &arg2); end

  def status_message(*arg, **arg1, &arg2); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

module ActionDispatch::Integration
end

class ActionDispatch::IntegrationTest
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::TestHelpers::PageDumpHelper
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::IntegrationTest::UrlOptions
  include ::ActionDispatch::Assertions::RoutingAssertions::WithIntegrationRouting
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActionMailer::TestCase::ClearTestDeliveries
end

module ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::TestHelpers::PageDumpHelper
  def app(); end

  def document_root_element(); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
  def app(); end

  def app=(app); end

  def register_encoder(*args, **options); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

module ActionDispatch::IntegrationTest::Behavior
  extend ::ActiveSupport::Concern
end

module ActionDispatch::IntegrationTest::UrlOptions
  def url_options(); end
end

module ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActiveSupport::Concern
end

class ActionDispatch::IntegrationTest
  extend ::ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY_END_NODE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Simulator
  INITIAL_STATE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::TransitionTable
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  DEFAULT_EXP_ANCHORED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  GREEDY_EXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::PermissionsPolicy::Request
  POLICY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::RequestCookieMethods
  def commit_cookie_jar!(); end
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def main_app(); end
end

class ActionDispatch::Routing::RouteWrapper
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil), ssl_default_redirect_status: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
  PERMANENT_REDIRECT_REQUEST_METHODS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::ServerTiming::Subscriber
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::AbstractSecureStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::AbstractSecureStore
end

class ActionDispatch::Session::AbstractStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::AbstractStore
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

module ActionDispatch::Session::Compatibility
  def generate_sid(); end

  def initialize(app, options=T.unsafe(nil)); end
end

module ActionDispatch::Session::Compatibility
end

class ActionDispatch::Session::CookieStore
  def delete_session(req, session_id, options); end

  def load_session(req); end
  DEFAULT_SAME_SITE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::CookieStore::SessionId
  def cookie_value(); end

  def initialize(session_id, cookie_value=T.unsafe(nil)); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::CookieStore::SessionId
end

class ActionDispatch::Session::CookieStore
end

module ActionDispatch::Session::SessionObject
  def commit_session(req, res); end

  def loaded_session?(session); end

  def prepare_session(req); end
end

module ActionDispatch::Session::SessionObject
end

module ActionDispatch::Session::StaleSessionCheck
  def extract_session_id(env); end

  def load_session(env); end

  def stale_session_check!(); end
end

module ActionDispatch::Session::StaleSessionCheck
end

module ActionDispatch::TestHelpers::PageDumpHelper
  def save_and_open_page(path=T.unsafe(nil)); end
end

module ActionDispatch::TestHelpers::PageDumpHelper
end

class ActionDispatch::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestResponse
  def parsed_body(); end

  def response_parser(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

class ActionMailbox::Base
  include ::ActionMailbox::Routing
end

module ActionMailbox::Callbacks
  TERMINATOR = ::T.let(nil, ::T.untyped)
end

class ActionMailbox::InboundEmail
  include ::ActionMailbox::InboundEmail::Routable
  include ::ActionMailbox::InboundEmail::MessageId
end

module ActionMailbox::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base::LateAttachmentsProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::NonInferrableMailerError
  def initialize(name); end
end

class ActionMailer::NonInferrableMailerError
end

class ActionMailer::Parameterized::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def _mailer_class(); end

  def _mailer_class=(_mailer_class); end

  def _mailer_class?(); end
end

module ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def read_fixture(action); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
  def determine_default_mailer(name); end

  def mailer_class(); end

  def tests(mailer); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
end

module ActionMailer::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

module ActionMailer::TestCase::ClearTestDeliveries
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::ActiveSupport::Concern
end

class ActionMailer::TestCase
  extend ::ActionMailer::TestCase::Behavior::ClassMethods
  def self._mailer_class(); end

  def self._mailer_class=(value); end

  def self._mailer_class?(); end
end

module ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def assert_emails(number, &block); end

  def assert_enqueued_email_with(mailer, method, params: T.unsafe(nil), args: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_emails(number, &block); end

  def assert_no_emails(&block); end

  def assert_no_enqueued_emails(&block); end

  def capture_emails(&block); end

  def deliver_enqueued_emails(queue: T.unsafe(nil), at: T.unsafe(nil), &block); end
end

module ActionMailer::TestHelper
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionText::Attachable
  LOCATOR_NAME = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachables::MissingAttachable
  DEFAULT_PARTIAL_PATH = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class ActionText::Content
  include ::ActionText::ContentHelper
  include ::ActionText::Serialization
end

class ActionText::FixtureSet
end

class ActionText::FixtureSet
  def self.attachment(fixture_set_name, label, column_type: T.unsafe(nil)); end
end

class ActionText::TrixAttachment
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_TYPES = ::T.let(nil, ::T.untyped)
  COMPOSED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SELECTOR = ::T.let(nil, ::T.untyped)
  TAG_NAME = ::T.let(nil, ::T.untyped)
end

module ActionText::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer
  NO_DETAILS = ::T.let(nil, ::T.untyped)
end

module ActionView::AbstractRenderer::ObjectRendering
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer::RenderedTemplate
  EMPTY_SPACER = ::T.let(nil, ::T.untyped)
end

class ActionView::Base
  include ::ActionView::Context
  include ::ERB::Util
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil
end

class ActionView::CollectionRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering
  def render_collection_derive_partial(collection, context, block); end

  def render_collection_with_partial(collection, partial, context, block); end
end

class ActionView::CollectionRenderer::CollectionIterator
  include ::Enumerable
  def each(&blk); end

  def initialize(collection); end

  def length(); end

  def preload!(); end

  def size(); end
end

class ActionView::CollectionRenderer::CollectionIterator
end

class ActionView::CollectionRenderer::MixedCollectionIterator
  def each_with_info(); end

  def initialize(collection, paths); end
end

class ActionView::CollectionRenderer::MixedCollectionIterator
end

class ActionView::CollectionRenderer::PreloadCollectionIterator
  def initialize(collection, path, variables, relation); end
end

class ActionView::CollectionRenderer::PreloadCollectionIterator
end

class ActionView::CollectionRenderer::SameCollectionIterator
  def each_with_info(); end

  def from_collection(collection); end

  def initialize(collection, path, variables); end
end

class ActionView::CollectionRenderer::SameCollectionIterator
end

class ActionView::CollectionRenderer
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::RubyTracker
  def dependencies(); end

  def initialize(name, template, view_paths=T.unsafe(nil), parser_class: T.unsafe(nil)); end
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::RubyTracker
  def self.call(name, template, view_paths=T.unsafe(nil)); end

  def self.supports_view_paths?(); end
end

module ActionView::Helpers::AssetTagHelper
  MAX_HEADER_SIZE = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::ContentExfiltrationPreventionHelper
  CLOSE_CDATA_COMMENT = ::T.let(nil, ::T.untyped)
  CLOSE_FORM_TAG = ::T.let(nil, ::T.untyped)
  CLOSE_OPTION_TAG = ::T.let(nil, ::T.untyped)
  CLOSE_QUOTES_COMMENT = ::T.let(nil, ::T.untyped)
  CONTENT_EXFILTRATION_PREVENTION_MARKUP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  ARIA_PREFIXES = ::T.let(nil, ::T.untyped)
  DATA_PREFIXES = ::T.let(nil, ::T.untyped)
  TAG_TYPES = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

class ActionView::ObjectRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering
  def render_object_derive_partial(object, context, block); end

  def render_object_with_partial(object, partial, context, block); end
end

class ActionView::ObjectRenderer
end

class ActionView::OutputBuffer
  def <<(value); end

  def ==(other); end

  def append=(value); end

  def blank?(*arg, **arg1, &arg2); end

  def capture(*args); end

  def concat(value); end

  def empty?(*arg, **arg1, &arg2); end

  def encode!(*arg, **arg1, &arg2); end

  def encoding(*arg, **arg1, &arg2); end

  def force_encoding(*arg, **arg1, &arg2); end

  def html_safe(); end

  def initialize(buffer=T.unsafe(nil)); end

  def length(*arg, **arg1, &arg2); end

  def raw(); end

  def raw_buffer(); end

  def safe_append=(value); end

  def safe_concat(value); end

  def safe_expr_append=(val); end

  def to_str(); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

module ActionView::RenderParser
  ALL_KNOWN_KEYS = ::T.let(nil, ::T.untyped)
  RENDER_TYPE_KEYS = ::T.let(nil, ::T.untyped)
end

ActionView::RenderParser::Default = ActionView::RenderParser::PrismRenderParser

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_to_object(context, options); end
end

class ActionView::Renderer
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def block(); end

  def capture(); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def raw(); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
  def render_template(view, template, layout_name=T.unsafe(nil), locals=T.unsafe(nil)); end
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::Template
  NONE = ::T.let(nil, ::T.untyped)
  STRICT_LOCALS_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Inline
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Renderable
  def format(); end

  def identifier(); end

  def initialize(renderable); end

  def render(context, *args); end
end

class ActionView::Template::Renderable
end

class ActionView::Template::Sources::File
  def initialize(filename); end
end

class ActionView::Template::Sources::File
end

ActionView::Template::Types = Mime

class ActionView::TemplateDetails
  def format(); end

  def format_or_default(); end

  def handler(); end

  def handler_class(); end

  def initialize(locale, handler, format, variant); end

  def locale(); end

  def matches?(requested); end

  def sort_key_for(requested); end

  def variant(); end
end

class ActionView::TemplateDetails::Requested
  def formats(); end

  def formats_idx(); end

  def handlers(); end

  def handlers_idx(); end

  def initialize(locale:, handlers:, formats:, variants:); end

  def locale(); end

  def locale_idx(); end

  def variants(); end

  def variants_idx(); end
  ANY_HASH = ::T.let(nil, ::T.untyped)
end

class ActionView::TemplateDetails::Requested
end

class ActionView::TemplateDetails
end

class ActionView::TemplatePath
  def ==(other); end

  def eql?(other); end

  def initialize(name, prefix, partial, virtual); end

  def name(); end

  def partial(); end

  def partial?(); end

  def prefix(); end

  def to_str(); end

  def virtual(); end

  def virtual_path(); end
end

class ActionView::TemplatePath
  def self.build(name, prefix, partial); end

  def self.parse(virtual); end

  def self.virtual(name, prefix, partial); end
end

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  def deserialize(arguments); end

  def serialize(arguments); end
  OBJECT_SERIALIZER_KEY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  extend ::ActiveJob::Arguments
end

class ActiveJob::Base
  include ::ActiveJob::TestHelper::TestQueueAdapter
end

class ActiveJob::Base
  def self._test_adapter(); end

  def self._test_adapter=(value); end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_all_later(multi_args); end

  def perform_later(*arg, **arg1, &arg2); end

  def perform_now(*arg, **arg1, &arg2); end
end

class ActiveJob::ConfiguredJob
end

class ActiveJob::DeserializationError
  def initialize(); end
end

class ActiveJob::DeserializationError
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue_at(*arg); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def at(); end

  def at=(at); end

  def enqueue_after_transaction_commit(); end

  def enqueue_after_transaction_commit=(enqueue_after_transaction_commit); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def initialize(enqueue_after_transaction_commit: T.unsafe(nil)); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def queue(); end

  def queue=(queue); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

class ActiveJob::SerializationError
end

class ActiveJob::SerializationError
end

class ActiveJob::Serializers::RangeSerializer
  KEYS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::TimeObjectSerializer
  NANO_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::TimeWithZoneSerializer
  NANO_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def after_teardown(); end

  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def before_setup(); end

  def enqueued_jobs(*arg, **arg1, &arg2); end

  def enqueued_jobs=(arg); end

  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  def performed_jobs(*arg, **arg1, &arg2); end

  def performed_jobs=(arg); end

  def queue_adapter(); end

  def queue_adapter_for_test(); end
end

module ActiveJob::TestHelper::TestQueueAdapter
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
end

module ActiveJob::TestHelper
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attribute_names(); end

  def attributes(); end

  def freeze(); end

  def initialize(*arg); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, *arg, **arg1, &arg2); end

  def attribute_names(); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

class ActiveModel::Error
  CALLBACKS_OPTIONS = ::T.let(nil, ::T.untyped)
  MESSAGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Errors
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

class ActiveModel::Name
  MISSING_TRANSLATION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Translation
  MISSING_TRANSLATION = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Base
  include ::ActionText::Encryption
end

module ActiveRecord::Batches
  DEFAULT_ORDER = ::T.let(nil, ::T.untyped)
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  EXTENDED_TYPE_MAPS = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
  TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition
  OPTION_NAMES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
end

class ActiveRecord::ConnectionAdapters::NullPool
  NULL_CONFIG = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  def add_record(record, _=T.unsafe(nil)); end

  def after_commit(); end

  def after_rollback(); end

  def before_commit(); end

  def closed?(); end

  def dirty!(); end

  def dirty?(); end

  def invalidate!(); end

  def invalidated?(); end

  def joinable?(); end

  def materialized?(); end

  def open?(); end

  def restartable?(); end

  def state(); end

  def user_transaction(); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore
  ERROR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range
  INFINITE_FLOAT_RANGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid
  ACCEPTABLE_UUID = ::T.let(nil, ::T.untyped)
  CANONICAL_UUID = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  QUOTED_COLUMN_NAMES = ::T.let(nil, ::T.untyped)
  QUOTED_TABLE_NAMES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  DEADLOCK_DETECTED = ::T.let(nil, ::T.untyped)
  DUPLICATE_DATABASE = ::T.let(nil, ::T.untyped)
  FEATURE_NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  FOREIGN_KEY_VIOLATION = ::T.let(nil, ::T.untyped)
  LOCK_NOT_AVAILABLE = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
  NOT_NULL_VIOLATION = ::T.let(nil, ::T.untyped)
  NUMERIC_VALUE_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  QUERY_CANCELED = ::T.let(nil, ::T.untyped)
  SERIALIZATION_FAILURE = ::T.let(nil, ::T.untyped)
  UNIQUE_VIOLATION = ::T.let(nil, ::T.untyped)
  VALUE_LIMIT_VIOLATION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MoneyDecoder
  TYPE = ::T.let(nil, ::T.untyped)
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID = ActiveRecord::ConnectionAdapters::PostgreSQL::OID

ActiveRecord::ConnectionAdapters::PostgreSQLColumn = ActiveRecord::ConnectionAdapters::PostgreSQL::Column

ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata = ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata

module ActiveRecord::ConnectionAdapters::QueryCache
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::RealTransaction
  def commit(); end

  def restart(); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::RestartParentTransaction
  def commit(); end

  def initialize(connection, parent_transaction, **options); end

  def materialize!(*arg, **arg1, &arg2); end

  def materialized?(*arg, **arg1, &arg2); end

  def restart(*arg, **arg1, &arg2); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
  def commit(); end

  def initialize(connection, savepoint_name, parent_transaction, **options); end

  def restart(); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::SchemaDumper
  DEFAULT_DATETIME_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::Transaction
  def add_record(record, ensure_finalize=T.unsafe(nil)); end

  def after_commit(&block); end

  def after_rollback(&block); end

  def append_callbacks(callbacks); end

  def before_commit(&block); end

  def before_commit_records(); end

  def closed?(); end

  def commit_records(); end

  def connection(); end

  def dirty!(); end

  def dirty?(); end

  def full_rollback?(); end

  def incomplete!(); end

  def initialize(connection, isolation: T.unsafe(nil), joinable: T.unsafe(nil), run_commit_callbacks: T.unsafe(nil)); end

  def invalidate!(*arg, **arg1, &arg2); end

  def invalidated?(*arg, **arg1, &arg2); end

  def isolation_level(); end

  def joinable?(); end

  def materialize!(); end

  def materialized?(); end

  def open?(); end

  def records(); end

  def restartable?(); end

  def restore!(); end

  def rollback_records(); end

  def savepoint_name(); end

  def state(); end

  def user_transaction(); end

  def written(); end

  def written=(written); end
end

class ActiveRecord::ConnectionAdapters::Transaction::Callback
  def after_commit(); end

  def after_rollback(); end

  def before_commit(); end

  def initialize(event, callback); end
end

class ActiveRecord::ConnectionAdapters::TransactionInstrumenter
  def finish(outcome); end

  def initialize(payload=T.unsafe(nil)); end

  def start(); end
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  def begin_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil), _lazy: T.unsafe(nil)); end

  def commit_transaction(); end

  def current_transaction(); end

  def dirty_current_transaction(); end

  def disable_lazy_transactions!(); end

  def enable_lazy_transactions!(); end

  def initialize(connection); end

  def lazy_transactions_enabled?(); end

  def materialize_transactions(); end

  def open_transactions(); end

  def restorable?(); end

  def restore_transactions(); end

  def rollback_transaction(transaction=T.unsafe(nil)); end

  def within_new_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionState
  def add_child(state); end

  def commit!(); end

  def committed?(); end

  def completed?(); end

  def finalized?(); end

  def full_commit!(); end

  def full_rollback!(); end

  def fully_committed?(); end

  def fully_completed?(); end

  def fully_rolledback?(); end

  def initialize(state=T.unsafe(nil)); end

  def invalidate!(); end

  def invalidated?(); end

  def nullify!(); end

  def rollback!(); end

  def rolledback?(); end
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::DestroyAssociationAsyncJob
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end
end

class ActiveRecord::DestroyAssociationAsyncJob
end

class ActiveRecord::Encryption::Cipher
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def decrypt(encrypted_message); end

  def encrypt(clear_text); end

  def initialize(secret, deterministic: T.unsafe(nil)); end
  CIPHER_TYPE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def self.iv_length(); end

  def self.key_length(); end
end

class ActiveRecord::Encryption::Context
  PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
  def initialize(passwords, key_generator: T.unsafe(nil)); end
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
end

class ActiveRecord::Encryption::DeterministicKeyProvider
  def initialize(password); end
end

class ActiveRecord::Encryption::DeterministicKeyProvider
end

module ActiveRecord::Encryption::EncryptableRecord
  ORIGINAL_ATTRIBUTE_PREFIX = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::EncryptedAttributeType
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(*arg, **arg1, &arg2); end

  def cast_type(); end

  def deterministic?(*arg, **arg1, &arg2); end

  def downcase?(*arg, **arg1, &arg2); end

  def encrypted?(value); end

  def fixed?(*arg, **arg1, &arg2); end

  def initialize(scheme:, cast_type: T.unsafe(nil), previous_type: T.unsafe(nil), default: T.unsafe(nil)); end

  def key_provider(*arg, **arg1, &arg2); end

  def previous_schemes(*arg, **arg1, &arg2); end

  def previous_types(); end

  def scheme(); end

  def support_unencrypted_data?(); end

  def type(*arg, **arg1, &arg2); end

  def with_context(*arg, **arg1, &arg2); end
end

class ActiveRecord::Encryption::EncryptedAttributeType
end

module ActiveRecord::Encryption::EncryptedFixtures
  def initialize(fixture, model_class); end
end

module ActiveRecord::Encryption::EncryptedFixtures
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::Encryptor
  DECRYPT_ERRORS = ::T.let(nil, ::T.untyped)
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  THRESHOLD_TO_JUSTIFY_COMPRESSION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
  def active_primary_key(); end

  def decryption_keys(encrypted_message); end

  def encryption_key(); end
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
  def initialize(value, type); end

  def type(); end

  def value(); end
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
  def find_by(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQuery
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQuery
  def self.process_arguments(owner, args, check_for_additional_values); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
  def serialize(data); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
  def exists?(*args); end

  def scope_for_create(); end

  def where(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
  def self.install_support(); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
  def validate_each(record, attribute, value); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
  def self.install_support(); end
end

class ActiveRecord::Encryption::Key
  def id(); end

  def initialize(secret); end

  def public_tags(); end

  def secret(); end
end

class ActiveRecord::Encryption::Key
  def self.derive_from(password); end
end

class ActiveRecord::Encryption::KeyProvider
  def decryption_keys(encrypted_message); end

  def encryption_key(); end

  def initialize(keys); end
end

class ActiveRecord::Encryption::KeyProvider
end

class ActiveRecord::Encryption::Message
  def ==(other_message); end

  def headers(); end

  def headers=(headers); end

  def initialize(payload: T.unsafe(nil), headers: T.unsafe(nil)); end

  def payload(); end

  def payload=(payload); end
end

class ActiveRecord::Encryption::Message
end

class ActiveRecord::Encryption::NullEncryptor
  def binary?(); end

  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::NullEncryptor
end

class ActiveRecord::Encryption::Properties
  def ==(arg); end

  def [](*arg, **arg1, &arg2); end

  def []=(key, value); end

  def add(other_properties); end

  def auth_tag(); end

  def auth_tag=(value); end

  def compressed(); end

  def compressed=(value); end

  def each(*arg, **arg1, &arg2); end

  def encoding(); end

  def encoding=(value); end

  def encrypted_data_key(); end

  def encrypted_data_key=(value); end

  def encrypted_data_key_id(); end

  def encrypted_data_key_id=(value); end

  def initialize(initial_properties=T.unsafe(nil)); end

  def iv(); end

  def iv=(value); end

  def key?(*arg, **arg1, &arg2); end

  def method_missing(method, *arg, **arg1, &arg2); end

  def to_h(); end

  def validate_value_type(value); end
  ALLOWED_VALUE_CLASSES = ::T.let(nil, ::T.untyped)
  DEFAULT_PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Properties
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
  def binary?(); end

  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
end

class ActiveRecord::Encryption::Scheme
  def compatible_with?(other_scheme); end

  def deterministic?(); end

  def downcase?(); end

  def fixed?(); end

  def ignore_case?(); end

  def initialize(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous_schemes: T.unsafe(nil), **context_properties); end

  def key_provider(); end

  def merge(other_scheme); end

  def previous_schemes(); end

  def previous_schemes=(previous_schemes); end

  def support_unencrypted_data?(); end

  def to_h(); end

  def with_context(&block); end
end

class ActiveRecord::Encryption::Scheme
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::FixtureSet
  def [](x); end

  def []=(k, v); end

  def all_loaded_fixtures(); end

  def all_loaded_fixtures=(val); end

  def config(); end

  def each(&block); end

  def fixtures(); end

  def ignored_fixtures(); end

  def initialize(_, name, class_name, path, config=T.unsafe(nil)); end

  def model_class(); end

  def name(); end

  def size(); end

  def table_name(); end

  def table_rows(); end
  MAX_ID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::FixtureSet::File
  include ::Enumerable
  def each(&block); end

  def ignored_fixtures(); end

  def initialize(file); end

  def model_class(); end
end

class ActiveRecord::FixtureSet::File
  def self.open(file); end
end

class ActiveRecord::FixtureSet::ModelMetadata
  def column_names(); end

  def column_type(column_name); end

  def has_column?(column_name); end

  def inheritance_column_name(); end

  def initialize(model_class); end

  def primary_key_name(); end

  def primary_key_type(); end

  def timestamp_column_names(); end
end

class ActiveRecord::FixtureSet::ModelMetadata
end

class ActiveRecord::FixtureSet::RenderContext
end

class ActiveRecord::FixtureSet::RenderContext
  def self.create_subclass(); end
end

class ActiveRecord::FixtureSet::TableRow
  def initialize(fixture, table_rows:, label:, now:); end

  def to_hash(); end
end

class ActiveRecord::FixtureSet::TableRow::HasManyThroughProxy
  def lhs_key(); end

  def rhs_key(); end

  def timestamp_column_names(); end
end

class ActiveRecord::FixtureSet::TableRow::HasManyThroughProxy
end

class ActiveRecord::FixtureSet::TableRow::PrimaryKeyError
  def initialize(label, association, value); end
end

class ActiveRecord::FixtureSet::TableRow::PrimaryKeyError
end

class ActiveRecord::FixtureSet::TableRow::ReflectionProxy
  def initialize(association); end

  def join_table(); end

  def name(); end

  def primary_key_type(); end
end

class ActiveRecord::FixtureSet::TableRow::ReflectionProxy
end

class ActiveRecord::FixtureSet::TableRow
end

class ActiveRecord::FixtureSet::TableRows
  def initialize(table_name, model_class:, fixtures:); end

  def model_class(); end

  def model_metadata(); end

  def tables(); end

  def to_hash(); end
end

class ActiveRecord::FixtureSet::TableRows
end

class ActiveRecord::FixtureSet
  extend ::GlobalID::FixtureSet
  def self.all_loaded_fixtures(); end

  def self.all_loaded_fixtures=(val); end

  def self.cache_fixtures(connection_pool, fixtures_map); end

  def self.cache_for_connection_pool(connection_pool); end

  def self.cached_fixtures(connection_pool, keys_to_fetch=T.unsafe(nil)); end

  def self.composite_identify(label, key); end

  def self.context_class(); end

  def self.create_fixtures(fixtures_directories, fixture_set_names, class_names=T.unsafe(nil), config=T.unsafe(nil)); end

  def self.default_fixture_model_name(fixture_set_name, config=T.unsafe(nil)); end

  def self.default_fixture_table_name(fixture_set_name, config=T.unsafe(nil)); end

  def self.fixture_is_cached?(connection_pool, table_name); end

  def self.identify(label, column_type=T.unsafe(nil)); end

  def self.instantiate_all_loaded_fixtures(object, load_instances=T.unsafe(nil)); end

  def self.instantiate_fixtures(object, fixture_set, load_instances=T.unsafe(nil)); end

  def self.reset_cache(); end
end

class ActiveRecord::FutureResult
  def cancel(); end

  def canceled?(); end

  def empty?(*arg, **arg1, &arg2); end

  def execute!(connection); end

  def execute_or_skip(); end

  def initialize(pool, *args, **kwargs); end

  def lock_wait(); end

  def pending?(); end

  def result(); end

  def schedule!(session); end

  def then(&block); end

  def to_a(*arg, **arg1, &arg2); end
end

class ActiveRecord::FutureResult::Complete
  def canceled?(); end

  def empty?(*arg, **arg1, &arg2); end

  def initialize(result); end

  def pending?(); end

  def result(); end

  def then(&block); end

  def to_a(*arg, **arg1, &arg2); end
end

class ActiveRecord::FutureResult::EventBuffer
  def flush(); end

  def initialize(future_result, instrumenter); end

  def instrument(name, payload=T.unsafe(nil), &block); end
end

class ActiveRecord::FutureResult
  def self.wrap(result); end
end

class ActiveRecord::InternalMetadata
  def [](key); end

  def []=(key, value); end

  def arel_table(); end

  def count(); end

  def create_table(); end

  def create_table_and_set_flags(environment, schema_sha1=T.unsafe(nil)); end

  def delete_all_entries(); end

  def drop_table(); end

  def enabled?(); end

  def initialize(pool); end

  def primary_key(); end

  def table_exists?(); end

  def table_name(); end

  def value_key(); end
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(coder); end
end

class ActiveRecord::Locking::LockingType
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Marshalling::Methods
  def marshal_dump(); end
end

class ActiveRecord::Middleware::DatabaseSelector
  def call(env); end

  def context_klass(); end

  def initialize(app, resolver_klass=T.unsafe(nil), context_klass=T.unsafe(nil), options=T.unsafe(nil)); end

  def options(); end

  def resolver_klass(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def context(); end

  def delay(); end

  def initialize(context, options=T.unsafe(nil)); end

  def instrumenter(); end

  def read(&blk); end

  def reading_request?(request); end

  def update_context(response); end

  def write(&blk); end
  SEND_TO_REPLICA_DELAY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def initialize(session); end

  def last_write_timestamp(); end

  def save(response); end

  def session(); end

  def update_last_write_timestamp(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def self.call(request); end

  def self.convert_time_to_timestamp(time); end

  def self.convert_timestamp_to_time(timestamp); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def self.call(context, options=T.unsafe(nil)); end
end

class ActiveRecord::Middleware::DatabaseSelector
end

class ActiveRecord::Middleware::ShardSelector
  def call(env); end

  def initialize(app, resolver, options=T.unsafe(nil)); end

  def options(); end

  def resolver(); end
end

class ActiveRecord::Middleware::ShardSelector
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, **arg, &block); end

  def add_check_constraint(*args, **arg, &block); end

  def add_column(*args, **arg, &block); end

  def add_enum_value(*args, **arg, &block); end

  def add_exclusion_constraint(*args, **arg, &block); end

  def add_foreign_key(*args, **arg, &block); end

  def add_index(*args, **arg, &block); end

  def add_reference(*args, **arg, &block); end

  def add_timestamps(*args, **arg, &block); end

  def add_unique_constraint(*args, **arg, &block); end

  def change_column(*args, **arg, &block); end

  def change_column_comment(*args, **arg, &block); end

  def change_column_default(*args, **arg, &block); end

  def change_column_null(*args, **arg, &block); end

  def change_table(table_name, **options); end

  def change_table_comment(*args, **arg, &block); end

  def commands(); end

  def commands=(commands); end

  def create_enum(*args, **arg, &block); end

  def create_join_table(*args, **arg, &block); end

  def create_table(*args, **arg, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, **arg, &block); end

  def drop_enum(*args, **arg, &block); end

  def drop_join_table(*args, **arg, &block); end

  def drop_table(*args, **arg, &block); end

  def enable_extension(*args, **arg, &block); end

  def execute(*args, **arg, &block); end

  def execute_block(*args, **arg, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, **arg, &block); end

  def remove_check_constraint(*args, **arg, &block); end

  def remove_column(*args, **arg, &block); end

  def remove_columns(*args, **arg, &block); end

  def remove_exclusion_constraint(*args, **arg, &block); end

  def remove_foreign_key(*args, **arg, &block); end

  def remove_index(*args, **arg, &block); end

  def remove_reference(*args, **arg, &block); end

  def remove_timestamps(*args, **arg, &block); end

  def remove_unique_constraint(*args, **arg, &block); end

  def rename_column(*args, **arg, &block); end

  def rename_enum(*args, **arg, &block); end

  def rename_enum_value(*args, **arg, &block); end

  def rename_index(*args, **arg, &block); end

  def rename_table(*args, **arg, &block); end

  def replay(migration); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, **arg, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_check_constraint(args, &block); end

  def invert_add_column(args, &block); end

  def invert_add_exclusion_constraint(args, &block); end

  def invert_add_foreign_key(args, &block); end

  def invert_add_index(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_add_unique_constraint(args, &block); end

  def invert_create_enum(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_enum(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_check_constraint(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_exclusion_constraint(args, &block); end

  def invert_remove_foreign_key(args, &block); end

  def invert_remove_index(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end

  def invert_remove_unique_constraint(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
end

class ActiveRecord::Migration::CommandRecorder
end

class ActiveRecord::Migration::Compatibility::V4_2
  def index_exists?(table_name, column_name, **options); end

  def remove_index(table_name, column_name=T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*arg, **options); end

  def references(*arg, **options); end

  def timestamps(**options); end
end

class ActiveRecord::Migration::Compatibility::V5_0
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end

  def primary_key(name, type=T.unsafe(nil), **options); end

  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V5_2
  def add_timestamps(table_name, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  def invert_change_column_comment(args); end

  def invert_change_table_comment(args); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  def column(name, type, index: T.unsafe(nil), **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
  def belongs_to(*args, **options); end

  def column(name, type, index: T.unsafe(nil), **options); end

  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
  def self.compatible_timestamp_type(type, connection); end
end

module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
  def change(name, type, index: T.unsafe(nil), **options); end

  def column(name, type, index: T.unsafe(nil), **options); end

  def new_column_definition(name, type, **options); end
end

class ActiveRecord::Migration::Compatibility::V7_0
  def add_belongs_to(table_name, ref_name, **options); end

  def add_column(table_name, column_name, type, **options); end

  def add_foreign_key(from_table, to_table, **options); end

  def add_index(table_name, column_name, **options); end

  def add_reference(table_name, ref_name, **options); end

  def change_column(table_name, column_name, type, **options); end

  def change_column_null(table_name, column_name, null, default=T.unsafe(nil)); end

  def disable_extension(name, **options); end

  def rename_table(table_name, new_name, **options); end
end

module ActiveRecord::Migration::Compatibility::V7_0::TableDefinition
  def change(name, type, **options); end

  def column(name, type, **options); end

  def index(column_name, **options); end

  def references(*args, **options); end
end

ActiveRecord::Migration::Compatibility::V7_2 = ActiveRecord::Migration::Current

module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::PredicateBuilder
  def [](attr_name, value, operator=T.unsafe(nil)); end

  def build(attribute, value, operator=T.unsafe(nil)); end

  def build_bind_attribute(column_name, value); end

  def build_from_hash(attributes, &block); end

  def expand_from_hash(attributes, &block); end

  def initialize(table); end

  def register_handler(klass, handler); end

  def resolve_arel_attribute(table_name, column_name, &block); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  def self.or(other); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  def initialize(associated_table, value); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  def initialize(associated_table, values); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
end

class ActiveRecord::PredicateBuilder::RangeHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def begin(); end

  def begin=(_); end

  def end(); end

  def end=(_); end

  def exclude_end?(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PredicateBuilder::RelationHandler
end

class ActiveRecord::PredicateBuilder
  def self.references(attributes); end
end

class ActiveRecord::Promise
  def class(); end

  def initialize(future_result, block); end

  def inspect(); end

  def is_a?(arg); end

  def pending?(); end

  def pretty_print(q); end

  def respond_to?(*arg); end

  def then(&block); end

  def value(); end
end

class ActiveRecord::Promise::Complete
  def initialize(value); end

  def then(); end
end

class ActiveRecord::Promise::Complete
end

class ActiveRecord::Promise
end

module ActiveRecord::QueryLogs
end

class ActiveRecord::QueryLogs::LegacyFormatter
  def format(pairs); end
end

class ActiveRecord::QueryLogs::LegacyFormatter
end

class ActiveRecord::QueryLogs::SQLCommenter
end

class ActiveRecord::QueryLogs::SQLCommenter
end

module ActiveRecord::QueryLogs
  def self.cache_query_log_tags(); end

  def self.cache_query_log_tags=(val); end

  def self.cached_comment(); end

  def self.cached_comment=(obj); end

  def self.call(sql, connection); end

  def self.clear_cache(); end

  def self.prepend_comment(); end

  def self.prepend_comment=(val); end

  def self.query_source_location(); end

  def self.taggings(); end

  def self.taggings=(val); end

  def self.tags(); end

  def self.tags=(val); end

  def self.tags_formatter(); end

  def self.tags_formatter=(val); end

  def self.update_formatter(format); end
end

module ActiveRecord::QueryMethods
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Querying
  QUERYING_METHODS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Reflection
  extend ::ActiveStorage::Reflection::ReflectionExtension
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::TokenFor::RelationMethods
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::Merger
  NORMAL_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::WhereClause
  ARRAY_WITH_EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Result
  def [](idx); end

  def cancel(); end

  def cast_values(type_overrides=T.unsafe(nil)); end

  def column_indexes(); end

  def column_types(); end

  def columns(); end

  def each(&block); end

  def empty?(); end

  def includes_column?(name); end

  def initialize(columns, rows, column_types=T.unsafe(nil)); end

  def last(n=T.unsafe(nil)); end

  def length(); end

  def result(); end

  def rows(); end

  def to_a(); end

  def to_ary(); end
end

class ActiveRecord::Result
  def self.empty(async: T.unsafe(nil)); end
end

class ActiveRecord::SchemaMigration
  def arel_table(); end

  def count(); end

  def create_table(); end

  def create_version(version); end

  def delete_all_versions(); end

  def delete_version(version); end

  def drop_table(); end

  def initialize(pool); end

  def integer_versions(); end

  def normalize_migration_number(number); end

  def normalized_versions(); end

  def primary_key(); end

  def table_exists?(); end

  def table_name(); end

  def versions(); end
end

module ActiveRecord::SecureToken
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::StatementCache
  def execute(params, connection, allow_retry: T.unsafe(nil), &block); end

  def initialize(query_builder, bind_map, klass); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::PartialQueryCollector
  def <<(str); end

  def add_bind(obj); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil)); end

  def preparable(); end

  def preparable=(preparable); end

  def retryable(); end

  def retryable=(retryable); end

  def value(); end
end

class ActiveRecord::StatementCache::PartialQueryCollector
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.partial_query_collector(); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

class ActiveRecord::TableMetadata
  def aggregated_with?(aggregation_name); end

  def arel_table(); end

  def associated_table(table_name); end

  def associated_with?(table_name); end

  def has_column?(column_name); end

  def initialize(klass, arel_table, reflection=T.unsafe(nil)); end

  def join_foreign_key(*arg, **arg1, &arg2); end

  def join_foreign_type(*arg, **arg1, &arg2); end

  def join_primary_key(*arg, **arg1, &arg2); end

  def join_primary_type(*arg, **arg1, &arg2); end

  def polymorphic_association?(); end

  def polymorphic_name_association(); end

  def predicate_builder(); end

  def primary_key(); end

  def reflect_on_aggregation(aggregation_name); end

  def through_association?(); end

  def type(column_name); end
end

class ActiveRecord::TableMetadata
end

module ActiveRecord::Tasks::DatabaseTasks
  def cache_dump_filename(db_config_or_name, schema_cache_path: T.unsafe(nil)); end

  def charset(configuration, *arguments); end

  def charset_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def check_protected_environments!(environment=T.unsafe(nil)); end

  def check_schema_file(filename); end

  def check_target_version(); end

  def clear_schema_cache(filename); end

  def collation(configuration, *arguments); end

  def collation_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def create(configuration, *arguments); end

  def create_all(); end

  def create_current(environment=T.unsafe(nil), name=T.unsafe(nil)); end

  def database_configuration(); end

  def database_configuration=(database_configuration); end

  def db_configs_with_versions(environment=T.unsafe(nil)); end

  def db_dir(); end

  def db_dir=(db_dir); end

  def drop(configuration, *arguments); end

  def drop_all(); end

  def drop_current(environment=T.unsafe(nil)); end

  def dump_schema(db_config, format=T.unsafe(nil)); end

  def dump_schema_cache(conn_or_pool, filename); end

  def env(); end

  def env=(env); end

  def fixtures_path(); end

  def fixtures_path=(fixtures_path); end

  def for_each(databases); end

  def load_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def load_schema_current(format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_seed(); end

  def migrate(version=T.unsafe(nil)); end

  def migrate_status(); end

  def migration_class(); end

  def migration_connection(); end

  def migration_connection_pool(); end

  def migrations_paths(); end

  def migrations_paths=(migrations_paths); end

  def name(); end

  def prepare_all(); end

  def purge(configuration); end

  def purge_all(); end

  def purge_current(environment=T.unsafe(nil)); end

  def raise_for_multi_db(environment=T.unsafe(nil), command:); end

  def reconstruct_from_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def register_task(pattern, task); end

  def root(); end

  def root=(root); end

  def schema_dump_path(db_config, format=T.unsafe(nil)); end

  def schema_up_to_date?(configuration, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def seed_loader(); end

  def seed_loader=(seed_loader); end

  def setup_initial_database_yaml(); end

  def structure_dump(configuration, *arguments); end

  def structure_load(configuration, *arguments); end

  def target_version(); end

  def truncate_all(environment=T.unsafe(nil)); end

  def with_temporary_connection(db_config, clobber: T.unsafe(nil), &block); end

  def with_temporary_pool_for_each(env: T.unsafe(nil), name: T.unsafe(nil), clobber: T.unsafe(nil), &block); end
end

module ActiveRecord::Tasks::DatabaseTasks
  def self.structure_dump_flags(); end

  def self.structure_dump_flags=(val); end

  def self.structure_load_flags(); end

  def self.structure_load_flags=(val); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def create(); end

  def drop(); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  ER_DB_CREATE_EXISTS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def collation(); end

  def create(connection_already_established=T.unsafe(nil)); end

  def drop(); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def create(); end

  def drop(); end

  def initialize(db_config, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def self.using_database_configurations?(); end
end

module ActiveRecord::TestDatabases
end

module ActiveRecord::TestDatabases
  def self.create_and_load_schema(i, env_name:); end
end

module ActiveRecord::TestFixtures
  def after_teardown(); end

  def before_setup(); end

  def fixture(fixture_set_name, *fixture_names); end
end

module ActiveRecord::TestFixtures::ClassMethods
  def fixtures(*fixture_set_names); end

  def set_fixture_class(class_names=T.unsafe(nil)); end

  def setup_fixture_accessors(fixture_set_names=T.unsafe(nil)); end

  def uses_transaction(*methods); end

  def uses_transaction?(method); end
end

module ActiveRecord::TestFixtures::ClassMethods
end

module ActiveRecord::TestFixtures
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Transaction
  def after_commit(&block); end

  def after_rollback(&block); end

  def closed?(); end

  def initialize(internal_transaction); end

  def open?(); end

  def uuid(); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

ActiveRecord::Type::ImmutableString = ActiveModel::Type::ImmutableString

class ActiveRecord::Type::Serialized
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Time::Value
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Analyzer::ImageAnalyzer::Vips
  ROTATIONS = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Attached::Changes::DetachMany
  def attachments(); end

  def detach(); end

  def initialize(name, record, attachments); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachMany
end

class ActiveStorage::Attached::Changes::DetachOne
  def attachment(); end

  def detach(); end

  def initialize(name, record, attachment); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachOne
end

class ActiveStorage::Attached::Changes::PurgeMany
  def attachments(); end

  def initialize(name, record, attachments); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeMany
end

class ActiveStorage::Attached::Changes::PurgeOne
  def attachment(); end

  def initialize(name, record, attachment); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeOne
end

class ActiveStorage::Blob
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::Streaming
  DEFAULT_BLOB_STREAMING_DISPOSITION = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::BacktraceCleaner
  FORMATTED_GEMS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
  OPTION_ALIASES = ::T.let(nil, ::T.untyped)
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Coder
  COMPRESSED_FLAG = ::T.let(nil, ::T.untyped)
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
  OBJECT_DUMP_TYPE = ::T.let(nil, ::T.untyped)
  PACKED_EXPIRES_AT_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_TYPE_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_VERSION_INDEX = ::T.let(nil, ::T.untyped)
  PACKED_VERSION_LENGTH_TEMPLATE = ::T.let(nil, ::T.untyped)
  SIGNATURE = ::T.let(nil, ::T.untyped)
  STRING_DESERIALIZERS = ::T.let(nil, ::T.untyped)
  STRING_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
  def cache_path(); end

  def initialize(cache_path, **options); end
end

class ActiveSupport::Cache::FileStore
  def self.supports_cache_versioning?(); end
end

module ActiveSupport::Cache::MemoryStore::DupCoder
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

module ActiveSupport::Cache::SerializerWithFallback
  SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback
  MARK_COMPRESSED = ::T.let(nil, ::T.untyped)
  MARK_UNCOMPRESSED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::SerializerWithFallback::Marshal71WithFallback
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CodeGenerator::MethodSet
  METHOD_CACHES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Concurrency::ThreadLoadInterlockAwareMonitor
  include ::ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin
end

class ActiveSupport::CurrentAttributes
  INVALID_ATTRIBUTE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Delegation
  RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Deprecation::Reporting
  LIB_DIR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
  VARIABLE_PARTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnvironmentInquirer
  DEFAULT_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
  LOCAL_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ErrorReporter
  DEFAULT_RESCUE = ::T.let(nil, ::T.untyped)
  DEFAULT_SOURCE = ::T.let(nil, ::T.untyped)
  SEVERITIES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::ExecutionContext
end

module ActiveSupport::ExecutionContext
  def self.[]=(key, value); end

  def self.after_change(&block); end

  def self.clear(); end

  def self.set(**options); end

  def self.to_h(); end
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
  def initialize(*arg); end
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

class ActiveSupport::HashWithIndifferentAccess
  NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Inflector
  ALLOWED_ENCODINGS_FOR_TRANSLITERATE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LogSubscriber
  LEVEL_CHECKS = ::T.let(nil, ::T.untyped)
  MODES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator
  AUTH_TAG_LENGTH = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageEncryptors
end

class ActiveSupport::MessageEncryptors
end

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator
  SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::Metadata
  ENVELOPE_SERIALIZERS = ::T.let(nil, ::T.untyped)
  TIMESTAMP_SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback
  SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback
  JSON_START_WITH = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback::MarshalWithFallback
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(namespace); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(validate_float); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(value); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(value); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

class ActiveSupport::ProxyObject
  def raise(*args); end
end

class ActiveSupport::ProxyObject
  def self.inherited(_subclass); end
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::SecurityUtils
  def initialize(value, on_rotation: T.unsafe(nil)); end

  def rotate(previous_value); end

  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator
end

class ActiveSupport::SyntaxErrorProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SyntaxErrorProxy::BacktraceLocationProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TestsWithoutAssertions
end

module ActiveSupport::Testing::Assertions
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  def backend(); end

  def backend=(name); end

  def depth(); end

  def depth=(depth); end

  def parse(*arg, **arg1, &arg2); end

  def rename_key(key, options=T.unsafe(nil)); end

  def to_tag(key, value, options); end

  def with_backend(name); end
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini::FileLike
  def content_type(); end

  def content_type=(content_type); end

  def original_filename(); end

  def original_filename=(original_filename); end
end

module ActiveSupport::XmlMini::FileLike
end

module ActiveSupport::XmlMini
  extend ::ActiveSupport::XmlMini
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAttributeMethods
  include ::ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

Arel::Attribute = Arel::Attributes::Attribute

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class ArgumentError
  include ::ErrorHighlight::CoreExt
end

class Array
  def deconstruct(); end

  def to_h(); end
end

class Array
  def self.new(*arg); end

  def self.try_convert(arg); end
end

class Bank
  include ::Bank::GeneratedAttributeMethods
  include ::Bank::GeneratedAssociationMethods
end

module Bank::GeneratedAssociationMethods
end

module Bank::GeneratedAssociationMethods
end

module Bank::GeneratedAttributeMethods
end

module Bank::GeneratedAttributeMethods
end

module Base64
  VERSION = ::T.let(nil, ::T.untyped)
end

BasicObject::BasicObject = BasicObject

class BasicSocket
  def read_nonblock(len, str=T.unsafe(nil), exception: T.unsafe(nil)); end
end

module Benchmark
  VERSION = ::T.let(nil, ::T.untyped)
end

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end

  def to_h(); end
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  VERSION = ::T.let(nil, ::T.untyped)
end

class Binding
  def clone(); end
end

class Bodyguard
  include ::Bodyguard::GeneratedAttributeMethods
  include ::Bodyguard::GeneratedAssociationMethods
end

module Bodyguard::GeneratedAssociationMethods
end

module Bodyguard::GeneratedAssociationMethods
end

module Bodyguard::GeneratedAttributeMethods
end

module Bodyguard::GeneratedAttributeMethods
end

module Bootsnap
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache
  UNCOMPILABLE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache::YAML
  SUPPORTED_INTERNAL_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Bootsnap::ExplicitRequire
  ARCHDIR = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  RUBYLIBDIR = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache
  CACHED_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  DLEXT2 = ::T.let(nil, ::T.untyped)
  DL_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DOT_RB = ::T.let(nil, ::T.untyped)
  DOT_SO = ::T.let(nil, ::T.untyped)
  FALLBACK_SCAN = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Cache
  AGE_THRESHOLD = ::T.let(nil, ::T.untyped)
  BUILTIN_FEATURES = ::T.let(nil, ::T.untyped)
  TRUFFLERUBY_LIB_DIR_PREFIX = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Path
  RUBY_LIBDIR = ::T.let(nil, ::T.untyped)
  RUBY_SITEDIR = ::T.let(nil, ::T.untyped)
  STABLE = ::T.let(nil, ::T.untyped)
  VOLATILE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache::PathScanner
  ALTERNATIVE_NATIVE_EXTENSIONS_PATTERN = ::T.let(nil, ::T.untyped)
  BUNDLE_PATH = ::T.let(nil, ::T.untyped)
  NORMALIZE_NATIVE_EXTENSIONS = ::T.let(nil, ::T.untyped)
  REQUIRABLE_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Store
  CURRENT_VERSION = ::T.let(nil, ::T.untyped)
  VERSION_KEY = ::T.let(nil, ::T.untyped)
end

class Bundler::APIResponseInvalidDependenciesError
  def status_code(); end
end

class Bundler::APIResponseInvalidDependenciesError
end

module Bundler::CIDetector
  ENV_DESCRIPTORS = ::T.let(nil, ::T.untyped)
  ENV_INDICATORS = ::T.let(nil, ::T.untyped)
end

module Bundler::CIDetector
  def self.ci?(); end

  def self.ci_strings(); end
end

class Bundler::CLI
  def add(*gems); end

  def binstubs(*gems); end

  def cache(); end

  def check(); end

  def clean(); end

  def cli_help(); end

  def config(*args); end

  def console(group=T.unsafe(nil)); end

  def doctor(); end

  def env(); end

  def exec(*args); end

  def fund(); end

  def help(cli=T.unsafe(nil)); end

  def info(gem_name); end

  def init(); end

  def initialize(*args); end

  def inject(name, version); end

  def install(); end

  def issue(); end

  def licenses(); end

  def list(); end

  def lock(); end

  def open(name); end

  def outdated(*gems); end

  def platform(); end

  def plugin(*args); end

  def pristine(*gems); end

  def remove(*gems); end

  def show(gem_name=T.unsafe(nil)); end

  def update(*gems); end

  def version(); end

  def viz(); end
  AUTO_INSTALL_CMDS = ::T.let(nil, ::T.untyped)
  COMMAND_ALIASES = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  PARSEABLE_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Bundler::CLI::Common
end

module Bundler::CLI::Common
  def self.ask_for_spec_from(specs); end

  def self.clean_after_install?(); end

  def self.configure_gem_version_promoter(definition, options); end

  def self.default_gem_spec(name); end

  def self.ensure_all_gems_in_lockfile!(names, locked_gems=T.unsafe(nil)); end

  def self.gem_not_found_message(missing_gem_name, alternatives); end

  def self.output_fund_metadata_summary(); end

  def self.output_post_install_messages(messages); end

  def self.output_without_groups_message(command); end

  def self.patch_level_options(options); end

  def self.print_post_install_message(name, msg); end

  def self.select_spec(name, regex_match=T.unsafe(nil)); end

  def self.verbalize_groups(groups); end

  def self.without_groups_message(command); end
end

class Bundler::CLI::Config
  def base(name=T.unsafe(nil), *value); end

  def get(name); end

  def list(); end

  def set(name, value, *value_); end

  def unset(name); end
end

class Bundler::CLI::Config::Base
  def confirm(name); end

  def confirm_all(); end

  def explicit_scope?(); end

  def initialize(options, name, value, thor); end

  def message(); end

  def name(); end

  def new_value(); end

  def options(); end

  def run(); end

  def scope(); end

  def show_pretty_values_for(setting); end

  def thor(); end

  def validate_scope!(); end

  def value(); end

  def warn_unused_scope(msg); end
end

class Bundler::CLI::Config::Base
end

class Bundler::CLI::Config
end

class Bundler::CLI::Install
  def initialize(options); end

  def options(); end

  def run(); end
end

class Bundler::CLI::Install
end

class Bundler::CLI::Plugin
  def install(*plugins); end

  def list(); end

  def uninstall(*plugins); end
end

class Bundler::CLI::Plugin
end

class Bundler::CLI
  def self.aliases_for(command_name); end

  def self.all_aliases(); end

  def self.check_deprecated_ext_option(arguments); end

  def self.deprecated_ext_value?(arguments); end

  def self.dispatch(*arg); end

  def self.reformatted_help_args(args); end

  def self.source_root(); end

  def self.start(*arg); end
end

class Bundler::Checksum
  def ==(other); end

  def algo(); end

  def digest(); end

  def eql?(other); end

  def formatted_sources(); end

  def initialize(algo, digest, source); end

  def match?(other); end

  def merge!(other); end

  def removable?(); end

  def removal_instructions(); end

  def same_source?(other); end

  def sources(); end

  def to_lock(); end
  ALGO_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Bundler::Checksum::Source
  def ==(other); end

  def initialize(type, location); end

  def location(); end

  def removable?(); end

  def removal(); end

  def type(); end
end

class Bundler::Checksum::Source
end

class Bundler::Checksum::Store
  def merge!(other); end

  def register(spec, checksum); end

  def replace(spec, checksum); end

  def store(); end

  def to_lock(spec); end
end

class Bundler::Checksum::Store
end

class Bundler::Checksum
  def self.from_api(digest, source_uri, algo=T.unsafe(nil)); end

  def self.from_gem(io, pathname, algo=T.unsafe(nil)); end

  def self.from_gem_package(gem_package, algo=T.unsafe(nil)); end

  def self.from_lock(lock_checksum, lockfile_location); end

  def self.to_hexdigest(digest, algo=T.unsafe(nil)); end
end

class Bundler::ChecksumMismatchError
  def initialize(lock_name, existing, checksum); end

  def mismatch_resolution_instructions(); end
end

class Bundler::ChecksumMismatchError
end

class Bundler::CompactIndexClient
  def available?(); end

  def dependencies(names); end

  def info(name); end

  def initialize(directory, fetcher=T.unsafe(nil)); end

  def latest_version(name); end

  def names(); end

  def reset!(); end

  def versions(); end
  DEBUG_MUTEX = ::T.let(nil, ::T.untyped)
  INFO_DEPS = ::T.let(nil, ::T.untyped)
  INFO_NAME = ::T.let(nil, ::T.untyped)
  INFO_PLATFORM = ::T.let(nil, ::T.untyped)
  INFO_REQS = ::T.let(nil, ::T.untyped)
  INFO_VERSION = ::T.let(nil, ::T.untyped)
  SUPPORTED_DIGESTS = ::T.let(nil, ::T.untyped)
end

class Bundler::CompactIndexClient::Cache
  def directory(); end

  def info(name, remote_checksum=T.unsafe(nil)); end

  def initialize(directory, fetcher=T.unsafe(nil)); end

  def names(); end

  def reset!(); end

  def versions(); end
end

class Bundler::CompactIndexClient::Cache
end

class Bundler::CompactIndexClient::CacheFile
  def append(data); end

  def close(); end

  def commit(); end

  def commit!(); end

  def digests=(expected_digests); end

  def digests?(); end

  def initialize(original_path, &block); end

  def initialize_digests(keys=T.unsafe(nil)); end

  def md5(); end

  def open(write_mode=T.unsafe(nil), perm=T.unsafe(nil), &block); end

  def original_path(); end

  def path(); end

  def reset_digests(); end

  def size(); end

  def verify(); end

  def write(data); end
end

class Bundler::CompactIndexClient::CacheFile::ClosedError
end

class Bundler::CompactIndexClient::CacheFile::ClosedError
end

class Bundler::CompactIndexClient::CacheFile::DigestMismatchError
  def initialize(digests, expected_digests); end
end

class Bundler::CompactIndexClient::CacheFile::DigestMismatchError
end

class Bundler::CompactIndexClient::CacheFile::Error
end

class Bundler::CompactIndexClient::CacheFile::Error
end

class Bundler::CompactIndexClient::CacheFile
  def self.copy(path, &block); end

  def self.write(path, data, digests=T.unsafe(nil)); end
end

class Bundler::CompactIndexClient::Error
end

class Bundler::CompactIndexClient::Error
end

Bundler::CompactIndexClient::GemParser = Gem::Resolver::APISet::GemParser

class Bundler::CompactIndexClient::Parser
  def available?(); end

  def info(name); end

  def initialize(compact_index); end

  def names(); end

  def versions(); end
end

class Bundler::CompactIndexClient::Parser
end

class Bundler::CompactIndexClient::Updater
  def initialize(fetcher); end

  def update(remote_path, local_path, etag_path); end
end

class Bundler::CompactIndexClient::Updater::MismatchedChecksumError
  def initialize(path, message); end
end

class Bundler::CompactIndexClient::Updater::MismatchedChecksumError
end

class Bundler::CompactIndexClient::Updater
end

class Bundler::CompactIndexClient
  def self.debug(); end
end

class Bundler::ConnectionPool
  def auto_reload_after_fork(); end

  def available(); end

  def checkin(force: T.unsafe(nil)); end

  def checkout(options=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil), &block); end

  def reload(&block); end

  def shutdown(&block); end

  def size(); end

  def then(options=T.unsafe(nil)); end

  def with(options=T.unsafe(nil)); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::ConnectionPool::TimedStack
  def <<(obj, options=T.unsafe(nil)); end

  def empty?(); end

  def initialize(size=T.unsafe(nil), &block); end

  def length(); end

  def max(); end

  def pop(timeout=T.unsafe(nil), options=T.unsafe(nil)); end

  def push(obj, options=T.unsafe(nil)); end

  def shutdown(reload: T.unsafe(nil), &block); end
end

class Bundler::ConnectionPool::TimedStack
end

class Bundler::ConnectionPool
  def self.after_fork(); end

  def self.wrap(options, &block); end
end

class Bundler::CorruptBundlerInstallError
  def initialize(loaded_spec); end

  def status_code(); end
end

class Bundler::CorruptBundlerInstallError
end

class Bundler::CurrentRuby
  def jruby_30?(); end

  def jruby_31?(); end

  def jruby_32?(); end

  def jruby_33?(); end

  def jruby_3?(); end

  def maglev_30?(); end

  def maglev_31?(); end

  def maglev_32?(); end

  def maglev_33?(); end

  def maglev_3?(); end

  def mingw_30?(); end

  def mingw_31?(); end

  def mingw_32?(); end

  def mingw_33?(); end

  def mingw_3?(); end

  def mri_30?(); end

  def mri_31?(); end

  def mri_32?(); end

  def mri_33?(); end

  def mri_3?(); end

  def mswin64_30?(); end

  def mswin64_31?(); end

  def mswin64_32?(); end

  def mswin64_33?(); end

  def mswin64_3?(); end

  def mswin_30?(); end

  def mswin_31?(); end

  def mswin_32?(); end

  def mswin_33?(); end

  def mswin_3?(); end

  def on_30?(); end

  def on_31?(); end

  def on_32?(); end

  def on_33?(); end

  def on_3?(); end

  def rbx_30?(); end

  def rbx_31?(); end

  def rbx_32?(); end

  def rbx_33?(); end

  def rbx_3?(); end

  def ruby_30?(); end

  def ruby_31?(); end

  def ruby_32?(); end

  def ruby_33?(); end

  def ruby_3?(); end

  def truffleruby_30?(); end

  def truffleruby_31?(); end

  def truffleruby_32?(); end

  def truffleruby_33?(); end

  def truffleruby_3?(); end

  def windows?(); end

  def windows_18?(); end

  def windows_19?(); end

  def windows_1?(); end

  def windows_20?(); end

  def windows_21?(); end

  def windows_22?(); end

  def windows_23?(); end

  def windows_24?(); end

  def windows_25?(); end

  def windows_26?(); end

  def windows_27?(); end

  def windows_2?(); end

  def windows_30?(); end

  def windows_31?(); end

  def windows_32?(); end

  def windows_33?(); end

  def windows_3?(); end

  def x64_mingw_30?(); end

  def x64_mingw_31?(); end

  def x64_mingw_32?(); end

  def x64_mingw_33?(); end

  def x64_mingw_3?(); end
end

class Bundler::Definition
  def bundler_version_to_lock(); end

  def current_locked_dependencies(); end

  def deleted_deps(); end

  def dependencies_for(groups); end

  def filter_relevant(dependencies); end

  def locked_checksums(); end

  def locked_dependencies(); end

  def most_specific_locked_platform(); end

  def new_deps(); end

  def no_resolve_needed?(); end

  def prefer_local!(); end

  def requested_dependencies(); end

  def resolve_only_locally!(); end

  def source_requirements=(source_requirements); end
end

class Bundler::Definition
  def self.no_lock(); end

  def self.no_lock=(no_lock); end
end

class Bundler::Dependency
  def branch(); end

  def expanded_platforms(); end

  def gemspec_dev_dep?(); end

  def git(); end

  def github(); end

  def glob(); end

  def path(); end

  def ref(); end
  ALL_RUBY_VERSIONS = ::T.let(nil, ::T.untyped)
end

Bundler::Deprecate = Gem::Deprecate

module Bundler::Digest
  SHA1_MASK = ::T.let(nil, ::T.untyped)
  SHA1_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Digest
  def self.sha1(string); end
end

class Bundler::DirectoryRemovalError
  def initialize(orig_exception, msg); end

  def status_code(); end
end

class Bundler::DirectoryRemovalError
end

class Bundler::Dsl
  def check_primary_source_safety(); end

  def gemfile(); end
  GITHUB_PULL_REQUEST_URL = ::T.let(nil, ::T.untyped)
  GITLAB_MERGE_REQUEST_URL = ::T.let(nil, ::T.untyped)
end

class Bundler::EndpointSpecification
  include ::Bundler::MatchRemoteMetadata
  include ::Bundler::FetchMetadata
end

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::EnvironmentPreserver
  def replace_with_backup(); end
end

class Bundler::EnvironmentPreserver
  def self.from_env(); end
end

module Bundler::FetchMetadata
  def matches_current_ruby?(); end

  def matches_current_rubygems?(); end
end

module Bundler::FetchMetadata
end

class Bundler::Fetcher
  def api_fetcher?(); end

  def fetch_spec(spec); end

  def gem_remote_fetcher(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationForbiddenError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::AuthenticationForbiddenError
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def gem_remote_fetcher(); end

  def initialize(downloader, remote, display_uri, gem_remote_fetcher); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
  def link(dest); end
end

module Bundler::FileUtils
  def self.cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.link_entry(src, dest, dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end

  def self.ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end
end

module Bundler::ForcePlatform
  def default_force_ruby_platform(); end
end

module Bundler::ForcePlatform
end

class Bundler::GemHelpers::PlatformMatch
  def self.specificity_score(spec_platform, user_platform); end
end

module Bundler::GemHelpers
  def self.generic_local_platform_is_ruby?(); end

  def self.local_platform(); end

  def self.same_deps(spec, exemplary_spec); end

  def self.same_specificity(platform, spec, exemplary_spec); end

  def self.select_best_local_platform_match(specs, force_ruby: T.unsafe(nil)); end

  def self.sort_best_platform_match(matching, platform); end
end

class Bundler::GemVersionPromoter
  def filter_versions(package, specs); end

  def level(); end

  def level=(value); end

  def major?(); end

  def minor?(); end

  def pre(); end

  def pre=(pre); end

  def pre?(); end

  def sort_versions(package, specs); end

  def strict(); end

  def strict=(strict); end
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
  def add(spec); end

  def duplicates(); end

  def merge!(other); end

  def subset?(other); end
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::InsecureInstallPathError
  def initialize(path); end

  def status_code(); end
end

class Bundler::InsecureInstallPathError
end

class Bundler::Installer
  def definition(); end
end

class Bundler::LazySpecification
  include ::Bundler::MatchMetadata
  include ::Bundler::ForcePlatform
  def dependencies=(dependencies); end

  def eql?(other); end

  def force_ruby_platform(); end

  def force_ruby_platform!(); end

  def force_ruby_platform=(force_ruby_platform); end

  def lock_name(); end

  def materialize_for_installation(); end

  def name_tuple(); end

  def required_ruby_version(); end

  def required_ruby_version=(required_ruby_version); end

  def required_rubygems_version(); end

  def required_rubygems_version=(required_rubygems_version); end

  def runtime_dependencies(); end
end

class Bundler::LazySpecification
  def self.from_spec(s); end
end

class Bundler::LockfileParser
  def checksums(); end

  def may_include_redundant_platform_specific_gems?(); end
  CHECKSUMS = ::T.let(nil, ::T.untyped)
end

class Bundler::LockfileParser::Position
  def advance!(string); end

  def column(); end

  def initialize(line, column); end

  def line(); end
end

class Bundler::LockfileParser::Position
end

class Bundler::LockfileParser
  def self.bundled_with(); end
end

module Bundler::MatchMetadata
  def matches_current_metadata?(); end

  def matches_current_ruby?(); end

  def matches_current_rubygems?(); end
end

module Bundler::MatchMetadata
end

module Bundler::MatchRemoteMetadata
  include ::Bundler::MatchMetadata
  include ::Bundler::FetchMetadata
end

module Bundler::MatchRemoteMetadata
end

class Bundler::PermissionError
  def parent_folder(); end

  def permission_type(); end
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def add_dependency_names(names); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def checksum_store(); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*arg); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def identifier(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def local!(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def spec_names(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index
  def installed_in_plugin_root?(name); end

  def installed_plugins(); end

  def plugin_commands(plugin); end

  def unregister_plugin(name); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Path
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Path
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  def self.from_lock(locked_opts); end

  def self.list(); end

  def self.loaded?(plugin); end

  def self.save_plugin(name, spec, optional_plugin=T.unsafe(nil)); end

  def self.uninstall(names, options); end
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::PubGrub::Incompatibility
  def cause(); end

  def conflict?(); end

  def eql?(other); end

  def external_incompatibilities(); end

  def failure?(); end

  def initialize(terms, cause:, custom_explanation: T.unsafe(nil)); end

  def terms(); end
end

class Bundler::PubGrub::Incompatibility
end

class Bundler::RemoteSpecification
  include ::Bundler::MatchRemoteMetadata
  include ::Bundler::MatchMetadata
  include ::Bundler::FetchMetadata
  def runtime_dependencies(); end
end

class Bundler::Resolver
  include ::Bundler::GemHelpers
  def all_versions_for(package); end

  def bundler_pinned_to_current_version?(); end

  def default_bundler_source(); end

  def find_names_to_relax(incompatibility); end

  def incompatibilities_for(package, version); end

  def no_versions_incompatibility_for(package, unsatisfied_term); end

  def parse_dependency(package, dependency); end

  def raise_not_found!(package); end

  def setup_solver(); end

  def solve_versions(root:, logger:); end

  def source_for(name); end

  def versions_for(package, range=T.unsafe(nil)); end
end

class Bundler::Resolver::Base
  def [](name); end

  def base_requirements(); end

  def delete(specs); end

  def get_package(name); end

  def include_prereleases(names); end

  def include_remote_specs(names); end

  def initialize(source_requirements, dependencies, base, platforms, options); end

  def packages(); end

  def requirements(); end

  def source_requirements(); end

  def specs_compatible_with(result); end

  def unlock_names(names); end
end

class Bundler::Resolver::Base
end

class Bundler::Resolver::Candidate
  include ::Comparable
  def ==(other); end

  def dependencies(); end

  def eql?(other); end

  def initialize(version, group: T.unsafe(nil), priority: T.unsafe(nil)); end

  def prerelease?(); end

  def segments(); end

  def sort_obj(); end

  def to_specs(package); end

  def version(); end
end

class Bundler::Resolver::Candidate
end

class Bundler::Resolver::Incompatibility
  def extended_explanation(); end

  def initialize(terms, cause:, custom_explanation: T.unsafe(nil), extended_explanation: T.unsafe(nil)); end
end

class Bundler::Resolver::Incompatibility
end

class Bundler::Resolver::Package
  def ==(other); end

  def consider_prereleases!(); end

  def consider_remote_versions!(); end

  def current_platform?(); end

  def dependency(); end

  def force_ruby_platform?(); end

  def ignores_prereleases?(); end

  def initialize(name, platforms, locked_specs:, unlock:, prerelease: T.unsafe(nil), prefer_local: T.unsafe(nil), dependency: T.unsafe(nil)); end

  def locked_version(); end

  def meta?(); end

  def name(); end

  def platform_specs(specs); end

  def platforms(); end

  def prefer_local?(); end

  def prerelease_specified?(); end

  def root?(); end

  def top_level?(); end

  def unlock?(); end
end

class Bundler::Resolver::Package
end

class Bundler::Resolver::Root
  def initialize(name); end
end

class Bundler::Resolver::Root
end

class Bundler::Resolver::SpecGroup
  def dependencies(); end

  def empty?(); end

  def merge(other); end

  def sorted_spec_names(); end

  def specs(); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

module Bundler::RubyDsl
  def normalize_ruby_file(filename); end
end

class Bundler::RubygemsIntegration
  def add_default_gems_to(specs); end

  def all_specs(); end

  def default_specs(); end

  def default_stubs(); end

  def find_bundler(version); end

  def find_name(name); end

  def installed_specs(); end

  def plain_specs(); end

  def plain_specs=(specs); end

  def stub_rubygems(specs); end

  def supports_bundler_trampolining?(); end
end

module Bundler::SafeMarshal
  ALLOWED_CLASSES = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  PROC = ::T.let(nil, ::T.untyped)
end

module Bundler::SafeMarshal
end

class Bundler::Settings
  def processor_count(); end
  FALLBACK_TIMEOUT_URI_OPTION = ::T.let(nil, ::T.untyped)
  REMEMBERED_KEYS = ::T.let(nil, ::T.untyped)
  STRING_KEYS = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Path
  def self.keyword_init?(); end
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::Settings
  def self.key_for(key); end

  def self.key_to_s(key); end
end

module Bundler::SharedHelpers
  def bundle_bin_path(); end

  def checksum_for_file(path, digest); end

  def relative_gemfile_path(); end

  def relative_lockfile_path(); end

  def relative_path_to(destination, from: T.unsafe(nil)); end
end

class Bundler::SolveFailure
  def status_code(); end
end

class Bundler::SolveFailure
end

class Bundler::Source
  def add_dependency_names(names); end

  def cached!(); end

  def checksum_store(); end

  def identifier(); end

  def local!(); end

  def local_only!(); end

  def remote!(); end

  def spec_names(); end
end

class Bundler::Source::Git
  def current_branch(); end

  def glob(); end

  def local?(); end

  def to_gemfile(); end

  def uri_with_specifiers(specifiers); end
end

class Bundler::Source::Rubygems
  def default_cache_path_for(dir); end

  def default_specs(); end

  def dependency_api_available?(); end

  def fetch_gem_if_possible(spec, previous_spec=T.unsafe(nil)); end

  def multiple_remotes?(); end

  def no_remotes?(); end

  def package_path(cache_path, spec); end

  def remote_fetchers(); end

  def remote_names(); end

  def remotes=(remotes); end

  def to_gemfile(); end
end

class Bundler::Source::RubygemsAggregate
  def identifier(); end

  def initialize(sources, source_map); end

  def source_map(); end

  def sources(); end

  def specs(); end
end

class Bundler::Source::RubygemsAggregate
end

class Bundler::SourceList
  def add_global_rubygems_remote(uri); end

  def aggregate_global_source?(); end

  def expired_sources?(replacement_sources); end

  def global_path_source(); end

  def implicit_global_source?(); end

  def local!(); end

  def local_mode?(); end

  def local_only!(); end

  def lock_other_sources(); end

  def lock_rubygems_sources(); end

  def merged_gem_lockfile_sections!(replacement_source); end

  def merged_gem_lockfile_sections?(); end

  def non_default_explicit_sources(); end

  def non_global_rubygems_sources(); end
end

class Bundler::SourceMap
  def all_requirements(); end

  def dependencies(); end

  def direct_requirements(); end

  def initialize(sources, dependencies, locked_specs); end

  def locked_requirements(); end

  def locked_specs(); end

  def pinned_spec_names(skip=T.unsafe(nil)); end

  def sources(); end
end

class Bundler::SourceMap
end

class Bundler::SpecSet
  include ::Enumerable
  include ::Bundler::TSort
  def -(other); end

  def add_extra_platforms!(platforms); end

  def delete(specs); end

  def delete_by_name(name); end

  def incomplete_for_platform?(deps, platform); end

  def incomplete_specs(); end

  def missing_specs(); end

  def names(); end

  def specs_compatible_with(other); end

  def valid?(s); end

  def validate_deps(s); end
end

class Bundler::StubSpecification
  def base_dir=(path); end

  def checksum(); end

  def extensions(); end

  def full_gem_path=(path); end

  def gem_build_complete_path(); end

  def manually_installed?(); end

  def require_paths(); end
end

module Bundler::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::TSort::Cyclic
end

class Bundler::TSort::Cyclic
end

module Bundler::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

class Bundler::Thor
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Actions
  def _cleanup_options_and_set(options, key); end

  def _shared_configuration(); end

  def action(instance); end

  def add_file(destination, *args, &block); end

  def add_link(destination, *args); end

  def append_file(path, *args, &block); end

  def append_to_file(path, *args, &block); end

  def apply(path, config=T.unsafe(nil)); end

  def behavior(); end

  def behavior=(behavior); end

  def chmod(path, mode, config=T.unsafe(nil)); end

  def comment_lines(path, flag, *args); end

  def copy_file(source, *args, &block); end

  def create_file(destination, *args, &block); end

  def create_link(destination, *args); end

  def destination_root(); end

  def destination_root=(root); end

  def directory(source, *args, &block); end

  def empty_directory(destination, config=T.unsafe(nil)); end

  def find_in_source_paths(file); end

  def get(source, *args, &block); end

  def gsub_file(path, flag, *args, &block); end

  def in_root(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def inject_into_class(path, klass, *args, &block); end

  def inject_into_file(destination, *args, &block); end

  def inject_into_module(path, module_name, *args, &block); end

  def insert_into_file(destination, *args, &block); end

  def inside(dir=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def link_file(source, *args); end

  def prepend_file(path, *args, &block); end

  def prepend_to_file(path, *args, &block); end

  def relative_to_original_destination_root(path, remove_dot=T.unsafe(nil)); end

  def remove_dir(path, config=T.unsafe(nil)); end

  def remove_file(path, config=T.unsafe(nil)); end

  def run(command, config=T.unsafe(nil)); end

  def run_ruby_script(command, config=T.unsafe(nil)); end

  def source_paths(); end

  def template(source, *args, &block); end

  def thor(command, *args); end

  def uncomment_lines(path, flag, *args); end
  WARNINGS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Actions::CapturableERB
end

class Bundler::Thor::Actions::CapturableERB
end

module Bundler::Thor::Actions::ClassMethods
  def add_runtime_options!(); end

  def source_paths(); end

  def source_paths_for_search(); end

  def source_root(path=T.unsafe(nil)); end
end

module Bundler::Thor::Actions::ClassMethods
end

class Bundler::Thor::Actions::CreateFile
  def data(); end

  def force_on_collision?(); end

  def force_or_skip_or_conflict(force, skip, &block); end

  def identical?(); end

  def initialize(base, destination, data, config=T.unsafe(nil)); end

  def on_conflict_behavior(&block); end

  def render(); end
end

class Bundler::Thor::Actions::CreateFile
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::Directory
  def execute!(); end

  def file_level_lookup(previous_lookup); end

  def files(lookup); end

  def initialize(base, source, destination=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def source(); end
end

class Bundler::Thor::Actions::Directory
end

class Bundler::Thor::Actions::EmptyDirectory
  def base(); end

  def config(); end

  def convert_encoded_instructions(filename); end

  def destination(); end

  def destination=(destination); end

  def exists?(); end

  def given_destination(); end

  def initialize(base, destination, config=T.unsafe(nil)); end

  def invoke!(); end

  def invoke_with_conflict_check(&block); end

  def on_conflict_behavior(); end

  def on_file_clash_behavior(); end

  def pretend?(); end

  def relative_destination(); end

  def revoke!(); end

  def say_status(status, color); end
end

class Bundler::Thor::Actions::EmptyDirectory
end

class Bundler::Thor::Actions::InjectIntoFile
  def behavior(); end

  def content(); end

  def flag(); end

  def initialize(base, destination, data, config); end

  def replace!(regexp, string, force); end

  def replacement(); end

  def replacement_present?(); end

  def say_status(behavior, warning: T.unsafe(nil), color: T.unsafe(nil)); end
end

class Bundler::Thor::Actions::InjectIntoFile
end

module Bundler::Thor::Actions
  def self.included(base); end
end

class Bundler::Thor::AmbiguousCommandError
end

class Bundler::Thor::AmbiguousCommandError
end

Bundler::Thor::AmbiguousTaskError = Bundler::Thor::AmbiguousCommandError

class Bundler::Thor::Argument
  def banner(); end

  def default(); end

  def default_banner(); end

  def description(); end

  def enum(); end

  def enum_to_s(); end

  def human_name(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end

  def print_default(); end

  def required(); end

  def required?(); end

  def show_default?(); end

  def type(); end

  def usage(); end

  def valid_type?(type); end

  def validate!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Argument
end

class Bundler::Thor::Arguments
  def initialize(arguments=T.unsafe(nil)); end

  def parse(args); end

  def remaining(); end
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Arguments
  def self.parse(*args); end

  def self.split(args); end
end

class Bundler::Thor::AtLeastOneRequiredArgumentError
end

class Bundler::Thor::AtLeastOneRequiredArgumentError
end

module Bundler::Thor::Base
  def args(); end

  def args=(args); end

  def initialize(args=T.unsafe(nil), local_options=T.unsafe(nil), config=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def parent_options(); end

  def parent_options=(parent_options); end
end

module Bundler::Thor::Base
  def self.included(base); end

  def self.register_klass_file(klass); end

  def self.shell(); end

  def self.shell=(shell); end

  def self.subclass_files(); end

  def self.subclasses(); end
end

class Bundler::Thor::Command
  def formatted_usage(klass, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def handle_argument_error?(instance, error, caller); end

  def handle_no_method_error?(instance, error, caller); end

  def hidden?(); end

  def initialize(name, description, long_description, wrap_long_description, usage, options=T.unsafe(nil), options_relation=T.unsafe(nil)); end

  def local_method?(instance, name); end

  def method_at_least_one_option_names(); end

  def method_exclusive_option_names(); end

  def not_debugging?(instance); end

  def private_method?(instance); end

  def public_method?(instance); end

  def required_arguments_for(klass, usage); end

  def required_options(); end

  def run(instance, args=T.unsafe(nil)); end

  def sans_backtrace(backtrace, caller); end
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Command
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
  def [](key); end

  def []=(key, value); end

  def convert_key(key); end

  def delete(key); end

  def except(*keys); end

  def fetch(key, *args); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(key); end

  def merge(other); end

  def merge!(other); end

  def method_missing(method, *args); end

  def replace(other_hash); end

  def reverse_merge(other); end

  def slice(*keys); end

  def values_at(*indices); end
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
end

module Bundler::Thor::CoreExt
end

module Bundler::Thor::Correctable
  def corrections(); end

  def to_s(); end
end

module Bundler::Thor::Correctable
end

class Bundler::Thor::DynamicCommand
  def initialize(name, options=T.unsafe(nil)); end
end

class Bundler::Thor::DynamicCommand
end

Bundler::Thor::DynamicTask = Bundler::Thor::DynamicCommand

class Bundler::Thor::Error
end

class Bundler::Thor::Error
end

class Bundler::Thor::ExclusiveArgumentError
end

class Bundler::Thor::ExclusiveArgumentError
end

class Bundler::Thor::Group
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

class Bundler::Thor::Group
  def self.banner(); end

  def self.desc(description=T.unsafe(nil)); end

  def self.get_options_from_invocations(group_options, base_options); end

  def self.handle_argument_error(command, error, _args, arity); end

  def self.help(shell); end

  def self.invocation_blocks(); end

  def self.invocations(); end

  def self.invoke(*names, &block); end

  def self.invoke_from_option(*names, &block); end

  def self.printable_commands(*arg); end

  def self.printable_tasks(*arg); end

  def self.remove_invocation(*names); end

  def self.self_command(); end

  def self.self_task(); end
end

class Bundler::Thor::HiddenCommand
end

class Bundler::Thor::HiddenCommand
end

Bundler::Thor::HiddenTask = Bundler::Thor::HiddenCommand

module Bundler::Thor::Invocation
  def _parse_initialization_options(args, opts, config); end

  def _retrieve_class_and_command(name, sent_command=T.unsafe(nil)); end

  def _retrieve_class_and_task(name, sent_command=T.unsafe(nil)); end

  def _shared_configuration(); end

  def current_command_chain(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def invoke(name=T.unsafe(nil), *args); end

  def invoke_all(); end

  def invoke_command(command, *args); end

  def invoke_task(command, *args); end

  def invoke_with_padding(*args); end
end

module Bundler::Thor::Invocation
  def self.included(base); end
end

class Bundler::Thor::InvocationError
end

class Bundler::Thor::InvocationError
end

module Bundler::Thor::LineEditor
end

class Bundler::Thor::LineEditor::Basic
  def initialize(prompt, options); end

  def options(); end

  def prompt(); end

  def readline(); end
end

class Bundler::Thor::LineEditor::Basic
  def self.available?(); end
end

class Bundler::Thor::LineEditor::Readline
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
  def initialize(text); end

  def matches(); end
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
end

class Bundler::Thor::LineEditor::Readline
end

module Bundler::Thor::LineEditor
  def self.best_available(); end

  def self.readline(prompt, options=T.unsafe(nil)); end
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::NestedContext
  def enter(); end

  def entered?(); end
end

class Bundler::Thor::NestedContext
end

class Bundler::Thor::Option
  def aliases(); end

  def aliases_for_usage(); end

  def array?(); end

  def boolean?(); end

  def dasherize(str); end

  def dasherized?(); end

  def group(); end

  def hash?(); end

  def hide(); end

  def lazy_default(); end

  def numeric?(); end

  def repeatable(); end

  def string?(); end

  def switch_name(); end

  def undasherize(str); end

  def usage(padding=T.unsafe(nil)); end

  def validate_default_type!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Option
  def self.parse(key, value); end
end

class Bundler::Thor::Options
  def assign_result!(option, result); end

  def check_at_least_one!(); end

  def check_exclusive!(); end

  def check_unknown!(); end

  def current_is_switch?(); end

  def current_is_switch_formatted?(); end

  def initialize(hash_options=T.unsafe(nil), defaults=T.unsafe(nil), stop_on_unknown=T.unsafe(nil), disable_required_check=T.unsafe(nil), relations=T.unsafe(nil)); end

  def names_to_switch_names(names=T.unsafe(nil)); end

  def normalize_switch(arg); end

  def parse_boolean(switch); end

  def parse_peek(switch, option); end

  def parsing_options?(); end

  def switch?(arg); end

  def switch_option(arg); end

  def unshift(arg, is_value: T.unsafe(nil)); end
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Options
  def self.to_switches(options); end
end

module Bundler::Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Bundler::Thor::RakeCompat
  def self.included(base); end

  def self.rake_classes(); end
end

class Bundler::Thor::RequiredArgumentMissingError
end

class Bundler::Thor::RequiredArgumentMissingError
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Shell
  def _shared_configuration(); end

  def ask(*args, &block); end

  def error(*args, &block); end

  def file_collision(*args, &block); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def no?(*args, &block); end

  def print_in_columns(*args, &block); end

  def print_table(*args, &block); end

  def print_wrapped(*args, &block); end

  def say(*args, &block); end

  def say_error(*args, &block); end

  def say_status(*args, &block); end

  def set_color(*args, &block); end

  def shell(); end

  def shell=(shell); end

  def terminal_width(*args, &block); end

  def with_padding(); end

  def yes?(*args, &block); end
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Shell
end

Bundler::Thor::Task = Bundler::Thor::Command

class Bundler::Thor::UndefinedCommandError
  include ::Bundler::Thor::Correctable
  def all_commands(); end

  def command(); end

  def initialize(command, all_commands, namespace); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
end

class Bundler::Thor::UndefinedCommandError
end

Bundler::Thor::UndefinedTaskError = Bundler::Thor::UndefinedCommandError

class Bundler::Thor::UnknownArgumentError
  include ::Bundler::Thor::Correctable
  def initialize(switches, unknown); end

  def switches(); end

  def unknown(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
end

class Bundler::Thor::UnknownArgumentError
end

module Bundler::Thor::Util
end

module Bundler::Thor::Util
  def self.camel_case(str); end

  def self.escape_globs(path); end

  def self.escape_html(string); end

  def self.find_by_namespace(namespace); end

  def self.find_class_and_command_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.find_class_and_task_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.globs_for(path); end

  def self.load_thorfile(path, content=T.unsafe(nil), debug=T.unsafe(nil)); end

  def self.namespace_from_thor_class(constant); end

  def self.namespaces_in_content(contents, file=T.unsafe(nil)); end

  def self.ruby_command(); end

  def self.snake_case(str); end

  def self.thor_classes_in(klass); end

  def self.thor_root(); end

  def self.thor_root_glob(); end

  def self.user_home(); end
end

class Bundler::Thor
  def self.at_least_one(*args, &block); end

  def self.banner(command, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.check_unknown_options!(options=T.unsafe(nil)); end

  def self.command_help(shell, command_name); end

  def self.default_command(meth=T.unsafe(nil)); end

  def self.default_task(meth=T.unsafe(nil)); end

  def self.deprecation_warning(message); end

  def self.desc(usage, description, options=T.unsafe(nil)); end

  def self.disable_required_check(); end

  def self.disable_required_check!(*command_names); end

  def self.disable_required_check?(command); end

  def self.dispatch(meth, given_args, given_opts, config); end

  def self.dynamic_command_class(); end

  def self.exclusive(*args, &block); end

  def self.find_command_possibilities(meth); end

  def self.find_task_possibilities(meth); end

  def self.help(shell, subcommand=T.unsafe(nil)); end

  def self.long_desc(long_description, options=T.unsafe(nil)); end

  def self.map(mappings=T.unsafe(nil), **kw); end

  def self.method_at_least_one(*args, &block); end

  def self.method_at_least_one_option_names(); end

  def self.method_exclusive(*args, &block); end

  def self.method_exclusive_option_names(); end

  def self.method_option(name, options=T.unsafe(nil)); end

  def self.method_options(options=T.unsafe(nil)); end

  def self.normalize_command_name(meth); end

  def self.normalize_task_name(meth); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.options(options=T.unsafe(nil)); end

  def self.package_name(name, _=T.unsafe(nil)); end

  def self.print_at_least_one_required_options(shell, command=T.unsafe(nil)); end

  def self.print_exclusive_options(shell, command=T.unsafe(nil)); end

  def self.printable_commands(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.printable_tasks(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.register(klass, subcommand_name, usage, description, options=T.unsafe(nil)); end

  def self.retrieve_command_name(args); end

  def self.retrieve_task_name(args); end

  def self.sort_commands!(list); end

  def self.stop_on_unknown_option(); end

  def self.stop_on_unknown_option!(*command_names); end

  def self.stop_on_unknown_option?(command); end

  def self.subcommand(subcommand, subcommand_class); end

  def self.subcommand_classes(); end

  def self.subcommand_help(cmd); end

  def self.subcommands(); end

  def self.subtask(subcommand, subcommand_class); end

  def self.subtask_help(cmd); end

  def self.subtasks(); end

  def self.task_help(shell, command_name); end
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def confirm?(); end

  def debug(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg=T.unsafe(nil), newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def error?(); end

  def info(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def info?(); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg=T.unsafe(nil), newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def warn?(); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

class Bundler::UI::Silent
  def confirm?(); end

  def error?(); end

  def info?(); end

  def warn?(); end
end

module Bundler::URINormalizer
end

module Bundler::URINormalizer
  def self.normalize_suffix(uri, trailing_slash: T.unsafe(nil)); end
end

module Bundler
  def self.auto_install(); end

  def self.auto_switch(); end

  def self.configure_gem_home_and_path(path=T.unsafe(nil)); end

  def self.create_bundle_path(); end

  def self.gem_version(); end

  def self.most_specific_locked_platform?(platform); end

  def self.original_exec(*args); end

  def self.original_system(*args); end

  def self.preferred_gemfile_name(); end

  def self.reset_settings_and_root!(); end

  def self.safe_load_marshal(data); end

  def self.self_manager(); end

  def self.unbundled_env(); end

  def self.unbundled_exec(*args); end

  def self.unbundled_system(*args); end
end

class CGI
  VERSION = ::T.let(nil, ::T.untyped)
end

class CGI::Cookie
  DOMAIN_VALUE_RE = ::T.let(nil, ::T.untyped)
  PATH_VALUE_RE = ::T.let(nil, ::T.untyped)
  TOKEN_RE = ::T.let(nil, ::T.untyped)
end

module CGI::Escape
  def escapeURIComponent(arg); end

  def escape_uri_component(arg); end

  def unescapeURIComponent(*arg); end

  def unescape_uri_component(*arg); end
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

module CGI::Util
  def escapeURIComponent(arg); end

  def escape_uri_component(arg); end

  def unescapeURIComponent(*arg); end

  def unescape_uri_component(*arg); end
end

class Character
  include ::Character::GeneratedAttributeMethods
  include ::Character::GeneratedAssociationMethods
end

module Character::GeneratedAssociationMethods
end

module Character::GeneratedAssociationMethods
end

module Character::GeneratedAttributeMethods
end

module Character::GeneratedAttributeMethods
end

class Chest
  include ::Chest::GeneratedAttributeMethods
  include ::Chest::GeneratedAssociationMethods
end

module Chest::GeneratedAssociationMethods
end

module Chest::GeneratedAssociationMethods
end

module Chest::GeneratedAttributeMethods
end

module Chest::GeneratedAttributeMethods
end

class Class
  include ::ActiveSupport::DescendantsTracker::ReloadedClassesFiltering
  def json_creatable?(); end
end

class Collectable
  include ::Collectable::GeneratedAttributeMethods
  include ::Collectable::GeneratedAssociationMethods
end

module Collectable::GeneratedAssociationMethods
end

module Collectable::GeneratedAssociationMethods
end

module Collectable::GeneratedAttributeMethods
end

module Collectable::GeneratedAttributeMethods
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::FiberLocalVar
  LOCALS = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

Concurrent::LockLocalVar = Concurrent::FiberLocalVar

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_SYNCHRONOUS = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Concurrent::ThreadLocalVar
  LOCALS = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  DEFAULT_INTERVAL_TYPE = ::T.let(nil, ::T.untyped)
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  FIXED_DELAY = ::T.let(nil, ::T.untyped)
  FIXED_RATE = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__
  CONFIG = ::T.let(nil, ::T.untyped)
  CONFIG_MAP = ::T.let(nil, ::T.untyped)
  CONFIG_SET = ::T.let(nil, ::T.untyped)
  LOG_LEVELS = ::T.let(nil, ::T.untyped)
  M_CLASS = ::T.let(nil, ::T.untyped)
  M_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  M_INSTANCE_VARIABLE_GET = ::T.let(nil, ::T.untyped)
  M_KIND_OF_P = ::T.let(nil, ::T.untyped)
  M_METHOD = ::T.let(nil, ::T.untyped)
  M_NAME = ::T.let(nil, ::T.untyped)
  M_OBJECT_ID = ::T.let(nil, ::T.untyped)
  M_RESPOND_TO_P = ::T.let(nil, ::T.untyped)
  M_SINGLETON_CLASS = ::T.let(nil, ::T.untyped)
  SESSION = ::T.let(nil, ::T.untyped)
  SHORT_INSPECT_LENGTH = ::T.let(nil, ::T.untyped)
  SO_VERSION = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::Color
  SUPPORT_COLORABLE_OPTION = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Console
  def deactivate(); end

  def history(); end

  def history_file(); end

  def load_history(); end

  def load_history_if_not_loaded(); end

  def parse_input(buff, commands); end

  def read_history_file(); end

  def readline(prompt); end

  def readline_setup(prompt); end
  FH = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::ForkInterceptor
  def _fork(); end
end

module DEBUGGER__::ForkInterceptor::DaemonInterceptor
  def daemon(*args); end
end

class DEBUGGER__::FrameInfo
  BLOCK_LABL_REGEXP = ::T.let(nil, ::T.untyped)
  HOME = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::GlobalVariablesHelper
  SKIP_GLOBAL_LIST = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::LimitedPP
  def <<(other); end

  def buf(); end

  def initialize(max); end
end

class DEBUGGER__::LimitedPP
  def self.pp(obj, max=T.unsafe(nil)); end
end

module DEBUGGER__::MultiProcessGroup
  def after_fork(child: T.unsafe(nil)); end

  def info(msg); end

  def lock(); end

  def locked?(); end

  def multi_process!(); end

  def sync(&b); end

  def unlock(); end
end

class DEBUGGER__::ProcessGroup
  def after_fork(); end

  def lock(); end

  def locked?(); end

  def multi?(); end

  def multi_process!(); end

  def sync(); end

  def trylock(); end

  def unlock(); end
end

class DEBUGGER__::Session
  def activate_irb_integration(); end

  def after_fork_parent(); end

  def before_fork(need_lock=T.unsafe(nil)); end

  def capture_exception_frames(*exclude_path); end

  def check_postmortem(); end

  def check_unsafe(); end

  def enter_postmortem_session(exc); end

  def extend_feature(session: T.unsafe(nil), thread_client: T.unsafe(nil), ui: T.unsafe(nil)); end

  def intercept_trap_sigint(flag, &b); end

  def intercept_trap_sigint?(); end

  def intercept_trap_sigint_end(); end

  def intercept_trap_sigint_start(prev); end

  def postmortem=(is_enable); end

  def process_info(); end

  def save_int_trap(cmd); end

  def set_no_sigint_hook(old, new); end

  def width(); end
  BREAK_KEYWORDS = ::T.let(nil, ::T.untyped)
  METHOD_ADDED_TRACKERS = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Session
  def self.activate_method_added_trackers(); end

  def self.create_method_added_tracker(mod, method_added_id, method_accessor=T.unsafe(nil)); end

  def self.deactivate_method_added_trackers(); end
end

class DEBUGGER__::ThreadClient
  SPECIAL_LOCAL_VARS = ::T.let(nil, ::T.untyped)
  SUPPORT_TARGET_THREAD = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::TrapInterceptor
  def trap(sig, *command, &command_proc); end
end

class DEBUGGER__::UI_Base
  def event(type, *args); end

  def flush(); end

  def ignore_output_on_suspend?(); end
end

class DEBUGGER__::UI_LocalConsole
  def activate(session, on_fork: T.unsafe(nil)); end

  def activate_sigint(); end

  def after_fork_parent(); end

  def ask(prompt); end

  def deactivate(); end

  def deactivate_sigint(); end

  def puts(str=T.unsafe(nil)); end

  def quit(n); end

  def readline(prompt=T.unsafe(nil)); end

  def remote?(); end

  def setup_interrupt(); end

  def width(); end
end

module DEBUGGER__
  def self.add_catch_breakpoint(pat); end

  def self.add_line_breakpoint(file, line, **kw); end

  def self.check_loglevel(level); end

  def self.compare_path(a, b); end

  def self.debug(&b); end

  def self.info(msg); end

  def self.initialize_session(&init_ui); end

  def self.load_rc(); end

  def self.log(level, msg); end

  def self.open(host: T.unsafe(nil), port: T.unsafe(nil), sock_path: T.unsafe(nil), sock_dir: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.open_tcp(port:, host: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.open_unix(sock_path: T.unsafe(nil), sock_dir: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.require_location(); end

  def self.safe_inspect(obj, max_length: T.unsafe(nil), short: T.unsafe(nil)); end

  def self.setup_initial_suspend(); end

  def self.skip?(); end

  def self.skip_all(); end

  def self.start(nonstop: T.unsafe(nil), **kw); end

  def self.step_in(&b); end

  def self.warn(msg); end
end

module DRb
  VERSION = ::T.let(nil, ::T.untyped)
end

class DRb::DRbUNIXSocket
  Max_try = ::T.let(nil, ::T.untyped)
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

class Date
  VERSION = ::T.let(nil, ::T.untyped)
end

class Delegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def detailed_message(highlight: T.unsafe(nil), did_you_mean: T.unsafe(nil), **arg); end

  def original_message(); end

  def spell_checker(); end
end

class DidYouMean::Formatter
  def message_for(corrections); end
end

class DidYouMean::Formatter
  def self.message_for(corrections); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def names_to_exclude(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*arg); end
end

class DidYouMean::PatternKeyNameChecker
  def corrections(); end

  def initialize(no_matching_pattern_key_error); end
end

class DidYouMean::PatternKeyNameChecker
end

DidYouMean::PlainFormatter = DidYouMean::Formatter

class DidYouMean::RequirePathChecker
  def corrections(); end

  def initialize(exception); end

  def path(); end
end

class DidYouMean::RequirePathChecker
  def self.requireables(); end
end

class DidYouMean::TreeSpellChecker
  def augment(); end

  def correct(input); end

  def dictionary(); end

  def dictionary_without_leaves(); end

  def dimensions(); end

  def find_leaves(path); end

  def initialize(dictionary:, separator: T.unsafe(nil), augment: T.unsafe(nil)); end

  def plausible_dimensions(input); end

  def possible_paths(states); end

  def separator(); end

  def tree_depth(); end
end

class DidYouMean::TreeSpellChecker
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.correct_error(error_class, spell_checker); end

  def self.formatter(); end

  def self.formatter=(formatter); end

  def self.spell_checkers(); end
end

module Digest
  VERSION = ::T.let(nil, ::T.untyped)
end

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def chdir(); end

  def children(); end

  def each_child(); end
end

module Dir::Tmpname
  UNUSABLE_CHARS = ::T.let(nil, ::T.untyped)
end

class Dir
  def self.fchdir(arg); end

  def self.for_fd(arg); end
end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Escape
end

module ERB::Escape
  def self.html_escape(arg); end
end

module ERB::Util
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  INVALID_TAG_NAME_FOLLOWING_REGEXP = ::T.let(nil, ::T.untyped)
  INVALID_TAG_NAME_START_REGEXP = ::T.let(nil, ::T.untyped)
  SAFE_XML_TAG_NAME_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_NAME_FOLLOWING_CODEPOINTS = ::T.let(nil, ::T.untyped)
  TAG_NAME_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
  TAG_NAME_START_CODEPOINTS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  extend ::ActiveSupport::CoreExt::ERBUtil
end

class Encoding
  def _dump(*arg); end
end

class Encoding::Converter
  def initialize(*arg); end
  LF_NEWLINE_DECORATOR = ::T.let(nil, ::T.untyped)
end

class Encoding
  def self._load(arg); end
end

module Enumerable
  def compact(); end
end

module Enumerable
  extend ::ActiveSupport::EnumerableCoreExt::Constants
end

class Enumerator
  def +(arg); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*arg); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Generator
  def each(*arg, &blk); end

  def initialize(*arg); end
end

class Enumerator::Producer
  def each(&blk); end
end

class Enumerator::Producer
end

class Enumerator::Product
  def each(&blk); end
end

class Enumerator::Product
end

class Enumerator
  def self.product(*arg); end
end

Errno::EAUTH = Errno::NOERROR

Errno::EBADARCH = Errno::NOERROR

Errno::EBADEXEC = Errno::NOERROR

Errno::EBADMACHO = Errno::NOERROR

Errno::EBADRPC = Errno::NOERROR

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::EDEADLK

Errno::EDEVERR = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

Errno::EFTYPE = Errno::NOERROR

Errno::EIPSEC = Errno::NOERROR

Errno::ELAST = Errno::NOERROR

Errno::ENEEDAUTH = Errno::NOERROR

Errno::ENOATTR = Errno::NOERROR

Errno::ENOPOLICY = Errno::NOERROR

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

Errno::EPROCLIM = Errno::NOERROR

Errno::EPROCUNAVAIL = Errno::NOERROR

Errno::EPROGMISMATCH = Errno::NOERROR

Errno::EPROGUNAVAIL = Errno::NOERROR

Errno::EPWROFF = Errno::NOERROR

Errno::EQFULL = Errno::NOERROR

Errno::ERPCMISMATCH = Errno::NOERROR

Errno::ESHLIBVERS = Errno::NOERROR

module ErrorHighlight::CoreExt
  def detailed_message(highlight: T.unsafe(nil), error_highlight: T.unsafe(nil), **arg); end
end

module Erubi
  FREEZE_TEMPLATE_LITERALS = ::T.let(nil, ::T.untyped)
  MATCH_METHOD = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  SKIP_DEFINED_FOR_INSTANCE_VARIABLE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Erubi::Engine
  DEFAULT_REGEXP = ::T.let(nil, ::T.untyped)
end

module Etc
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid=(_); end

  def mem=(_); end

  def name=(_); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Etc::Passwd
  def dir=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ExitCalledError
end

class ExitCalledError
end

class Fiber
  def backtrace(*arg); end

  def backtrace_locations(*arg); end

  def blocking?(); end

  def initialize(*arg); end

  def kill(); end

  def storage(); end

  def storage=(storage); end

  def transfer(*arg); end
end

class Fiber
  def self.blocking(); end

  def self.blocking?(); end

  def self.current(); end

  def self.current_scheduler(); end

  def self.schedule(*arg); end

  def self.scheduler(); end

  def self.set_scheduler(arg); end
end

module Fiddle
  ALIGN_BOOL = ::T.let(nil, ::T.untyped)
  ALIGN_INT16_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT32_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT64_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT8_T = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  Qfalse = ::T.let(nil, ::T.untyped)
  Qnil = ::T.let(nil, ::T.untyped)
  Qtrue = ::T.let(nil, ::T.untyped)
  Qundef = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
  SIZEOF_BOOL = ::T.let(nil, ::T.untyped)
  SIZEOF_CONST_STRING = ::T.let(nil, ::T.untyped)
  SIZEOF_INT16_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT32_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT64_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT8_T = ::T.let(nil, ::T.untyped)
  SIZEOF_UCHAR = ::T.let(nil, ::T.untyped)
  SIZEOF_UINT = ::T.let(nil, ::T.untyped)
  SIZEOF_UINT16_T = ::T.let(nil, ::T.untyped)
  SIZEOF_UINT32_T = ::T.let(nil, ::T.untyped)
  SIZEOF_UINT64_T = ::T.let(nil, ::T.untyped)
  SIZEOF_UINT8_T = ::T.let(nil, ::T.untyped)
  SIZEOF_ULONG = ::T.let(nil, ::T.untyped)
  SIZEOF_ULONG_LONG = ::T.let(nil, ::T.untyped)
  SIZEOF_USHORT = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_CONST_STRING = ::T.let(nil, ::T.untyped)
  TYPE_INT16_T = ::T.let(nil, ::T.untyped)
  TYPE_INT32_T = ::T.let(nil, ::T.untyped)
  TYPE_INT64_T = ::T.let(nil, ::T.untyped)
  TYPE_INT8_T = ::T.let(nil, ::T.untyped)
  TYPE_UCHAR = ::T.let(nil, ::T.untyped)
  TYPE_UINT = ::T.let(nil, ::T.untyped)
  TYPE_UINT16_T = ::T.let(nil, ::T.untyped)
  TYPE_UINT32_T = ::T.let(nil, ::T.untyped)
  TYPE_UINT64_T = ::T.let(nil, ::T.untyped)
  TYPE_UINT8_T = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_ULONG_LONG = ::T.let(nil, ::T.untyped)
  TYPE_USHORT = ::T.let(nil, ::T.untyped)
  TYPE_VARIADIC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WINDOWS = ::T.let(nil, ::T.untyped)
end

class Fiddle::CStruct
  include ::Enumerable
  def each(&blk); end

  def each_pair(); end

  def replace(another); end

  def to_h(); end
end

class Fiddle::CStruct
  def self.entity_class(); end

  def self.offsetof(name, members, types); end
end

module Fiddle::CStructBuilder
end

module Fiddle::CStructBuilder
  def self.create(klass, types, members); end
end

class Fiddle::CStructEntity
  include ::Fiddle::PackInfo
  include ::Fiddle::ValueUtil
  def [](*args); end

  def []=(*args); end

  def assign_names(members); end

  def initialize(addr, types, func=T.unsafe(nil)); end

  def set_ctypes(types); end

  def to_s(); end
end

class Fiddle::CStructEntity
  def self.alignment(types); end

  def self.malloc(types, func=T.unsafe(nil), size=T.unsafe(nil), &block); end

  def self.size(types); end
end

class Fiddle::CUnion
end

class Fiddle::CUnion
  def self.entity_class(); end

  def self.offsetof(name, members, types); end
end

class Fiddle::CUnionEntity
end

class Fiddle::CUnionEntity
end

class Fiddle::ClearedReferenceError
end

class Fiddle::ClearedReferenceError
end

class Fiddle::Closure
  def free(); end

  def freed?(); end
end

class Fiddle::Closure
  def self.create(*args); end
end

class Fiddle::CompositeHandler
  def [](symbol); end

  def handlers(); end

  def initialize(handlers); end

  def sym(symbol); end
end

class Fiddle::CompositeHandler
end

class Fiddle::Error
end

class Fiddle::Error
end

class Fiddle::Function
  def need_gvl?(); end

  def to_proc(); end
end

class Fiddle::Handle
  def file_name(); end

  def sym_defined?(arg); end

  def to_ptr(); end
end

class Fiddle::Handle
  def self.sym_defined?(arg); end
end

module Fiddle::Importer
  include ::Fiddle
  include ::Fiddle::CParser
end

module Fiddle::Importer
  extend ::Fiddle::Importer
  extend ::Fiddle
  extend ::Fiddle::CParser
end

class Fiddle::MemoryView
  def [](*arg); end

  def byte_size(); end

  def format(); end

  def initialize(arg); end

  def item_size(); end

  def ndim(); end

  def obj(); end

  def readonly?(); end

  def release(); end

  def shape(); end

  def strides(); end

  def sub_offsets(); end
end

class Fiddle::MemoryView
  def self.export(arg); end
end

module Fiddle::PackInfo
  ALIGN_MAP = ::T.let(nil, ::T.untyped)
  PACK_MAP = ::T.let(nil, ::T.untyped)
  SIZE_MAP = ::T.let(nil, ::T.untyped)
end

module Fiddle::PackInfo
  def self.align(addr, align); end
end

class Fiddle::Packer
  include ::Fiddle::PackInfo
  def initialize(types); end

  def pack(ary); end

  def size(); end

  def unpack(ary); end
end

class Fiddle::Packer
  def self.[](*types); end
end

class Fiddle::Pinned
  def clear(); end

  def cleared?(); end

  def initialize(arg); end

  def ref(); end
end

class Fiddle::Pinned
end

class Fiddle::Pointer
  def call_free(); end

  def freed?(); end
end

class Fiddle::Pointer
  def self.read(arg, arg1); end

  def self.write(arg, arg1); end
end

class Fiddle::StructArray
  include ::Fiddle::ValueUtil
  def []=(index, value); end

  def initialize(ptr, type, initial_values); end

  def to_ptr(); end
end

class Fiddle::StructArray
end

module Fiddle::Types
  BOOL = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  CONST_STRING = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16_T = ::T.let(nil, ::T.untyped)
  INT32_T = ::T.let(nil, ::T.untyped)
  INT64_T = ::T.let(nil, ::T.untyped)
  INT8_T = ::T.let(nil, ::T.untyped)
  INTPTR_T = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  PTRDIFF_T = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SIZE_T = ::T.let(nil, ::T.untyped)
  SSIZE_T = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16_T = ::T.let(nil, ::T.untyped)
  UINT32_T = ::T.let(nil, ::T.untyped)
  UINT64_T = ::T.let(nil, ::T.untyped)
  UINT8_T = ::T.let(nil, ::T.untyped)
  UINTPTR_T = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARIADIC = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
  VOIDP = ::T.let(nil, ::T.untyped)
end

module Fiddle::Types
end

module Fiddle::ValueUtil
  def signed_value(val, ty); end

  def unsigned_value(val, ty); end

  def wrap_arg(arg, ty, funcs=T.unsafe(nil), &block); end

  def wrap_args(args, tys, funcs, &block); end
end

module Fiddle::ValueUtil
end

class File
  def self.absolute_path?(arg); end

  def self.atomic_write(file_name, temp_dir=T.unsafe(nil)); end

  def self.probe_stat_in(dir); end
end

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
  def self.ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module GC
  def garbage_collect(full_mark: T.unsafe(nil), immediate_mark: T.unsafe(nil), immediate_sweep: T.unsafe(nil)); end
end

module GC
  def self.latest_compact_info(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  FLATTENS_REQUIRED_PATHS = ::T.let(nil, ::T.untyped)
  HAVE_OPENSSL = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  VALIDATES_FOR_RESOLUTION = ::T.let(nil, ::T.untyped)
end

module Gem::BUNDLED_GEMS
  def self.build_message(gem); end

  def self.find_gem(path); end

  def self.replace_require(specs); end

  def self.warning?(name, specs: T.unsafe(nil)); end
end

class Gem::BasicSpecification
  def base_dir_priority(gem_path); end

  def default_gem_priority(); end

  def full_name_with_location(); end

  def plugins(); end
end

module Gem::BetterPermissionError
  def data(); end
end

module Gem::BetterPermissionError
end

module Gem::BundlerVersionFinder
  def self.prioritize!(specs); end
end

module Gem::CIDetector
  ENV_DESCRIPTORS = ::T.let(nil, ::T.untyped)
  ENV_INDICATORS = ::T.let(nil, ::T.untyped)
end

module Gem::CIDetector
  def self.ci?(); end

  def self.ci_strings(); end
end

class Gem::ConfigFile
  def ipv4_fallback_enabled(); end

  def ipv4_fallback_enabled=(ipv4_fallback_enabled); end

  def last_update_check(); end

  def last_update_check=(timestamp); end

  def state_file_name(); end

  def state_file_writable?(); end
  DEFAULT_IPV4_FALLBACK_ENABLED = ::T.let(nil, ::T.untyped)
end

class Gem::ConfigFile
  def self.deep_transform_config_keys!(config); end

  def self.dump_with_rubygems_yaml(content); end

  def self.load_with_rubygems_config_hash(yaml); end
end

class Gem::Dependency
  include ::Bundler::ForcePlatform
  def force_ruby_platform(); end
end

class Gem::DependencyList
  include ::Gem::TSort
end

module Gem::Deprecate
  def deprecate(name, repl, year, month); end
end

module Gem::Deprecate
  def self.next_rubygems_major_version(); end

  def self.rubygems_deprecate(name, replacement=T.unsafe(nil)); end

  def self.rubygems_deprecate_command(version=T.unsafe(nil)); end
end

class Gem::Installer
  include ::Gem::InstallerUninstallerUtils
  def ensure_writable_dir(dir); end

  def explicit_version_requirement(name); end

  def gemdeps_load(name); end

  def generate_plugins(); end
end

class Gem::Installer::ExtensionBuildError
end

class Gem::Installer::ExtensionBuildError
end

class Gem::Installer::FakePackage
  def copy_to(path); end

  def data_mode(); end

  def data_mode=(data_mode); end

  def dir_mode(); end

  def dir_mode=(dir_mode); end

  def extract_files(destination_dir, pattern=T.unsafe(nil)); end

  def initialize(spec); end

  def prog_mode(); end

  def prog_mode=(prog_mode); end

  def spec(); end

  def spec=(spec); end
end

class Gem::Installer::FakePackage
end

class Gem::Installer
  def self.inherited(klass); end
end

module Gem::InstallerUninstallerUtils
  def regenerate_plugins_for(spec, plugins_dir); end

  def remove_plugins_for(spec, plugins_dir); end
end

module Gem::InstallerUninstallerUtils
end

class Gem::Licenses
  DEPRECATED_EXCEPTION_IDENTIFIERS = ::T.let(nil, ::T.untyped)
  DEPRECATED_EXCEPTION_REGEXP = ::T.let(nil, ::T.untyped)
  DEPRECATED_LICENSE_IDENTIFIERS = ::T.let(nil, ::T.untyped)
  DEPRECATED_LICENSE_REGEXP = ::T.let(nil, ::T.untyped)
  LICENSE_REF = ::T.let(nil, ::T.untyped)
  VALID_REGEXP = ::T.let(nil, ::T.untyped)
end

class Gem::Licenses
  def self.deprecated_exception_id?(license); end

  def self.deprecated_license_id?(license); end
end

module Gem::Molinillo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Molinillo::CircularDependencyError
  def dependencies(); end

  def initialize(vertices); end
end

class Gem::Molinillo::CircularDependencyError
end

module Gem::Molinillo::Delegates
end

module Gem::Molinillo::Delegates::ResolutionState
  def activated(); end

  def conflicts(); end

  def depth(); end

  def name(); end

  def possibilities(); end

  def requirement(); end

  def requirements(); end

  def unused_unwind_options(); end
end

module Gem::Molinillo::Delegates::ResolutionState
end

module Gem::Molinillo::Delegates::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_equal?(dependencies, other_dependencies); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Molinillo::Delegates::SpecificationProvider
end

module Gem::Molinillo::Delegates
end

class Gem::Molinillo::DependencyGraph
  include ::Enumerable
  include ::Gem::TSort
  def ==(other); end

  def add_child_vertex(name, payload, parent_names, requirement); end

  def add_edge(origin, destination, requirement); end

  def add_vertex(name, payload, root=T.unsafe(nil)); end

  def delete_edge(edge); end

  def detach_vertex_named(name); end

  def each(&blk); end

  def log(); end

  def rewind_to(tag); end

  def root_vertex_named(name); end

  def set_payload(name, payload); end

  def tag(tag); end

  def to_dot(options=T.unsafe(nil)); end

  def tsort_each_child(vertex, &block); end

  def vertex_named(name); end

  def vertices(); end
end

class Gem::Molinillo::DependencyGraph::Action
  def down(graph); end

  def next(); end

  def next=(arg); end

  def previous(); end

  def previous=(previous); end

  def up(graph); end
end

class Gem::Molinillo::DependencyGraph::Action
  def self.action_name(); end
end

class Gem::Molinillo::DependencyGraph::AddEdgeNoCircular
  def destination(); end

  def initialize(origin, destination, requirement); end

  def make_edge(graph); end

  def origin(); end

  def requirement(); end
end

class Gem::Molinillo::DependencyGraph::AddEdgeNoCircular
end

class Gem::Molinillo::DependencyGraph::AddVertex
  def initialize(name, payload, root); end

  def name(); end

  def payload(); end

  def root(); end
end

class Gem::Molinillo::DependencyGraph::AddVertex
end

class Gem::Molinillo::DependencyGraph::DeleteEdge
  def destination_name(); end

  def initialize(origin_name, destination_name, requirement); end

  def make_edge(graph); end

  def origin_name(); end

  def requirement(); end
end

class Gem::Molinillo::DependencyGraph::DeleteEdge
end

class Gem::Molinillo::DependencyGraph::DetachVertexNamed
  def initialize(name); end

  def name(); end
end

class Gem::Molinillo::DependencyGraph::DetachVertexNamed
end

class Gem::Molinillo::DependencyGraph::Edge
  def destination(); end

  def destination=(_); end

  def origin(); end

  def origin=(_); end

  def requirement(); end

  def requirement=(_); end
end

class Gem::Molinillo::DependencyGraph::Edge
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::Molinillo::DependencyGraph::SetPayload
  def initialize(name, payload); end

  def name(); end

  def payload(); end
end

class Gem::Molinillo::DependencyGraph::SetPayload
end

class Gem::Molinillo::DependencyGraph::Tag
  def initialize(tag); end

  def tag(); end
end

class Gem::Molinillo::DependencyGraph::Tag
end

class Gem::Molinillo::DependencyGraph::Vertex
  def ==(other); end

  def _path_to?(other, visited=T.unsafe(nil)); end

  def _recursive_predecessors(vertices=T.unsafe(nil)); end

  def _recursive_successors(vertices=T.unsafe(nil)); end

  def ancestor?(other); end

  def descendent?(other); end

  def eql?(other); end

  def explicit_requirements(); end

  def incoming_edges(); end

  def incoming_edges=(incoming_edges); end

  def initialize(name, payload); end

  def is_reachable_from?(other); end

  def name(); end

  def name=(name); end

  def outgoing_edges(); end

  def outgoing_edges=(outgoing_edges); end

  def path_to?(other); end

  def payload(); end

  def payload=(payload); end

  def predecessors(); end

  def recursive_predecessors(); end

  def recursive_successors(); end

  def requirements(); end

  def root(); end

  def root=(root); end

  def root?(); end

  def shallow_eql?(other); end

  def successors(); end
end

class Gem::Molinillo::DependencyGraph::Vertex
end

class Gem::Molinillo::DependencyGraph
  def self.tsort(vertices); end
end

class Gem::Molinillo::DependencyState
  def pop_possibility_state(); end
end

class Gem::Molinillo::DependencyState
end

class Gem::Molinillo::NoSuchDependencyError
  def dependency(); end

  def dependency=(dependency); end

  def initialize(dependency, required_by=T.unsafe(nil)); end

  def required_by(); end

  def required_by=(required_by); end
end

class Gem::Molinillo::NoSuchDependencyError
end

class Gem::Molinillo::PossibilityState
end

class Gem::Molinillo::PossibilityState
end

class Gem::Molinillo::ResolutionState
  def activated(); end

  def activated=(_); end

  def conflicts(); end

  def conflicts=(_); end

  def depth(); end

  def depth=(_); end

  def name(); end

  def name=(_); end

  def possibilities(); end

  def possibilities=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirements(); end

  def requirements=(_); end

  def unused_unwind_options(); end

  def unused_unwind_options=(_); end
end

class Gem::Molinillo::ResolutionState
  def self.[](*arg); end

  def self.empty(); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver
  def initialize(specification_provider, resolver_ui); end

  def resolve(requested, base=T.unsafe(nil)); end

  def resolver_ui(); end

  def specification_provider(); end
end

class Gem::Molinillo::Resolver::Resolution
  include ::Gem::Molinillo::Delegates::ResolutionState
  include ::Gem::Molinillo::Delegates::SpecificationProvider
  def base(); end

  def initialize(specification_provider, resolver_ui, requested, base); end

  def iteration_rate=(iteration_rate); end

  def original_requested(); end

  def resolve(); end

  def resolver_ui(); end

  def specification_provider(); end

  def started_at=(started_at); end

  def states=(states); end
end

class Gem::Molinillo::Resolver::Resolution::Conflict
  def activated_by_name(); end

  def activated_by_name=(_); end

  def existing(); end

  def existing=(_); end

  def locked_requirement(); end

  def locked_requirement=(_); end

  def possibility(); end

  def possibility_set(); end

  def possibility_set=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements(); end

  def requirements=(_); end

  def underlying_error(); end

  def underlying_error=(_); end
end

class Gem::Molinillo::Resolver::Resolution::Conflict
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution::PossibilitySet
  def dependencies(); end

  def dependencies=(_); end

  def latest_version(); end

  def possibilities(); end

  def possibilities=(_); end
end

class Gem::Molinillo::Resolver::Resolution::PossibilitySet
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution::UnwindDetails
  include ::Comparable
  def all_requirements(); end

  def conflicting_requirements(); end

  def conflicting_requirements=(_); end

  def requirement_tree(); end

  def requirement_tree=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements_unwound_to_instead(); end

  def requirements_unwound_to_instead=(_); end

  def reversed_requirement_tree_index(); end

  def state_index(); end

  def state_index=(_); end

  def state_requirement(); end

  def state_requirement=(_); end

  def sub_dependencies_to_avoid(); end

  def unwinding_to_primary_requirement?(); end
end

class Gem::Molinillo::Resolver::Resolution::UnwindDetails
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution
end

class Gem::Molinillo::Resolver
end

class Gem::Molinillo::ResolverError
end

class Gem::Molinillo::ResolverError
end

module Gem::Molinillo::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_equal?(dependencies, other_dependencies); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Molinillo::SpecificationProvider
end

module Gem::Molinillo::UI
  def after_resolution(); end

  def before_resolution(); end

  def debug(depth=T.unsafe(nil)); end

  def debug?(); end

  def indicate_progress(); end

  def output(); end

  def progress_rate(); end
end

module Gem::Molinillo::UI
end

class Gem::Molinillo::VersionConflict
  include ::Gem::Molinillo::Delegates::SpecificationProvider
  def conflicts(); end

  def initialize(conflicts, specification_provider); end

  def message_with_trees(opts=T.unsafe(nil)); end

  def specification_provider(); end
end

class Gem::Molinillo::VersionConflict
end

module Gem::Molinillo
end

class Gem::NameTuple
  def lock_name(); end
end

module Gem::Net
end

class Gem::Net::BufferedIO
  def <<(*strs); end

  def close(); end

  def closed?(); end

  def continue_timeout(); end

  def continue_timeout=(continue_timeout); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def eof?(); end

  def initialize(io, read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil), continue_timeout: T.unsafe(nil), debug_output: T.unsafe(nil)); end

  def io(); end

  def read(len, dest=T.unsafe(nil), ignore_eof=T.unsafe(nil)); end

  def read_all(dest=T.unsafe(nil)); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def readline(); end

  def readuntil(terminator, ignore_eof=T.unsafe(nil)); end

  def write(*strs); end

  def write_timeout(); end

  def write_timeout=(write_timeout); end

  def writeline(str); end
  BUFSIZE = ::T.let(nil, ::T.untyped)
end

class Gem::Net::BufferedIO
end

class Gem::Net::HTTP
  def active?(); end

  def address(); end

  def ca_file(); end

  def ca_file=(ca_file); end

  def ca_path(); end

  def ca_path=(ca_path); end

  def cert(); end

  def cert=(cert); end

  def cert_store(); end

  def cert_store=(cert_store); end

  def ciphers(); end

  def ciphers=(ciphers); end

  def close_on_empty_response(); end

  def close_on_empty_response=(close_on_empty_response); end

  def continue_timeout(); end

  def continue_timeout=(sec); end

  def copy(path, initheader=T.unsafe(nil)); end

  def delete(path, initheader=T.unsafe(nil)); end

  def extra_chain_cert(); end

  def extra_chain_cert=(extra_chain_cert); end

  def finish(); end

  def get(path, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def get2(path, initheader=T.unsafe(nil), &block); end

  def head(path, initheader=T.unsafe(nil)); end

  def head2(path, initheader=T.unsafe(nil), &block); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def initialize(address, port=T.unsafe(nil)); end

  def ipaddr(); end

  def ipaddr=(addr); end

  def keep_alive_timeout(); end

  def keep_alive_timeout=(keep_alive_timeout); end

  def key(); end

  def key=(key); end

  def local_host(); end

  def local_host=(local_host); end

  def local_port(); end

  def local_port=(local_port); end

  def lock(path, body, initheader=T.unsafe(nil)); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def mkcol(path, body=T.unsafe(nil), initheader=T.unsafe(nil)); end

  def move(path, initheader=T.unsafe(nil)); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def options(path, initheader=T.unsafe(nil)); end

  def patch(path, data, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def peer_cert(); end

  def port(); end

  def post(path, data, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def post2(path, data, initheader=T.unsafe(nil), &block); end

  def propfind(path, body=T.unsafe(nil), initheader=T.unsafe(nil)); end

  def proppatch(path, body, initheader=T.unsafe(nil)); end

  def proxy?(); end

  def proxy_address(); end

  def proxy_address=(proxy_address); end

  def proxy_from_env=(proxy_from_env); end

  def proxy_from_env?(); end

  def proxy_pass(); end

  def proxy_pass=(proxy_pass); end

  def proxy_port(); end

  def proxy_port=(proxy_port); end

  def proxy_uri(); end

  def proxy_user(); end

  def proxy_user=(proxy_user); end

  def proxyaddr(); end

  def proxyport(); end

  def put(path, data, initheader=T.unsafe(nil)); end

  def put2(path, data, initheader=T.unsafe(nil), &block); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def request(req, body=T.unsafe(nil), &block); end

  def request_get(path, initheader=T.unsafe(nil), &block); end

  def request_head(path, initheader=T.unsafe(nil), &block); end

  def request_post(path, data, initheader=T.unsafe(nil), &block); end

  def request_put(path, data, initheader=T.unsafe(nil), &block); end

  def response_body_encoding(); end

  def response_body_encoding=(value); end

  def send_request(name, path, data=T.unsafe(nil), header=T.unsafe(nil)); end

  def set_debug_output(output); end

  def ssl_timeout(); end

  def ssl_timeout=(ssl_timeout); end

  def ssl_version(); end

  def ssl_version=(ssl_version); end

  def start(); end

  def started?(); end

  def trace(path, initheader=T.unsafe(nil)); end

  def unlock(path, body, initheader=T.unsafe(nil)); end

  def use_ssl=(flag); end

  def use_ssl?(); end

  def verify_callback(); end

  def verify_callback=(verify_callback); end

  def verify_depth(); end

  def verify_depth=(verify_depth); end

  def verify_hostname(); end

  def verify_hostname=(verify_hostname); end

  def verify_mode(); end

  def verify_mode=(verify_mode); end

  def write_timeout(); end

  def write_timeout=(sec); end
  HAVE_ZLIB = ::T.let(nil, ::T.untyped)
  HTTPVersion = ::T.let(nil, ::T.untyped)
  IDEMPOTENT_METHODS_ = ::T.let(nil, ::T.untyped)
  SSL_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SSL_IVNAMES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Copy
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Copy
end

class Gem::Net::HTTP::Delete
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Delete
end

class Gem::Net::HTTP::Get
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Get
end

class Gem::Net::HTTP::Head
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Head
end

class Gem::Net::HTTP::Lock
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Lock
end

class Gem::Net::HTTP::Mkcol
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Mkcol
end

class Gem::Net::HTTP::Move
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Move
end

class Gem::Net::HTTP::Options
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Options
end

class Gem::Net::HTTP::Patch
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Patch
end

class Gem::Net::HTTP::Persistent
  def ca_file(); end

  def ca_file=(file); end

  def ca_path(); end

  def ca_path=(path); end

  def cert(); end

  def cert=(certificate); end

  def cert_store(); end

  def cert_store=(store); end

  def certificate(); end

  def certificate=(certificate); end

  def ciphers(); end

  def ciphers=(ciphers); end

  def connection_for(uri); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def escape(str); end

  def expired?(connection); end

  def finish(connection); end

  def generation(); end

  def headers(); end

  def http_version(uri); end

  def http_versions(); end

  def idle_timeout(); end

  def idle_timeout=(idle_timeout); end

  def initialize(name: T.unsafe(nil), proxy: T.unsafe(nil), pool_size: T.unsafe(nil)); end

  def keep_alive(); end

  def keep_alive=(keep_alive); end

  def key(); end

  def key=(key); end

  def max_requests(); end

  def max_requests=(max_requests); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def name(); end

  def no_proxy(); end

  def normalize_uri(uri); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def override_headers(); end

  def pool(); end

  def private_key(); end

  def private_key=(key); end

  def proxy=(proxy); end

  def proxy_bypass?(host, port); end

  def proxy_from_env(); end

  def proxy_uri(); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def reconnect(); end

  def reconnect_ssl(); end

  def request(uri, req=T.unsafe(nil), &block); end

  def request_setup(req_or_uri); end

  def reset(connection); end

  def reuse_ssl_sessions(); end

  def reuse_ssl_sessions=(reuse_ssl_sessions); end

  def shutdown(); end

  def socket_options(); end

  def ssl(connection); end

  def ssl_generation(); end

  def ssl_timeout(); end

  def ssl_timeout=(ssl_timeout); end

  def ssl_version(); end

  def ssl_version=(ssl_version); end

  def start(http); end

  def timeout_key(); end

  def unescape(str); end

  def verify_callback(); end

  def verify_callback=(callback); end

  def verify_depth(); end

  def verify_depth=(verify_depth); end

  def verify_mode(); end

  def verify_mode=(verify_mode); end

  def write_timeout(); end

  def write_timeout=(write_timeout); end
  DEFAULT_POOL_SIZE = ::T.let(nil, ::T.untyped)
  EPOCH = ::T.let(nil, ::T.untyped)
  HAVE_OPENSSL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Persistent::Connection
  def close(); end

  def finish(); end

  def http(); end

  def http=(http); end

  def initialize(http_class, http_args, ssl_generation); end

  def last_use(); end

  def last_use=(last_use); end

  def requests(); end

  def requests=(requests); end

  def reset(); end

  def ressl(ssl_generation); end

  def ssl_generation(); end

  def ssl_generation=(ssl_generation); end
end

class Gem::Net::HTTP::Persistent::Connection
end

class Gem::Net::HTTP::Persistent::Error
end

class Gem::Net::HTTP::Persistent::Error
end

class Gem::Net::HTTP::Persistent::Pool
  def checkin(net_http_args); end

  def checkout(net_http_args); end

  def key(); end

  def shutdown(); end
end

class Gem::Net::HTTP::Persistent::Pool
end

class Gem::Net::HTTP::Persistent::TimedStackMulti
end

class Gem::Net::HTTP::Persistent::TimedStackMulti
  def self.hash_of_arrays(); end
end

class Gem::Net::HTTP::Persistent
  def self.detect_idle_timeout(uri, max=T.unsafe(nil)); end
end

class Gem::Net::HTTP::Post
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Post
end

class Gem::Net::HTTP::Propfind
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Propfind
end

class Gem::Net::HTTP::Proppatch
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Proppatch
end

module Gem::Net::HTTP::ProxyDelta
end

module Gem::Net::HTTP::ProxyDelta
end

Gem::Net::HTTP::ProxyMod = Gem::Net::HTTP::ProxyDelta

class Gem::Net::HTTP::Put
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Put
end

class Gem::Net::HTTP::Trace
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Trace
end

class Gem::Net::HTTP::Unlock
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Unlock
end

class Gem::Net::HTTP
  def self.Proxy(p_addr=T.unsafe(nil), p_port=T.unsafe(nil), p_user=T.unsafe(nil), p_pass=T.unsafe(nil)); end

  def self.default_port(); end

  def self.get(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil)); end

  def self.get_print(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil)); end

  def self.get_response(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil), &block); end

  def self.http_default_port(); end

  def self.https_default_port(); end

  def self.is_version_1_1?(); end

  def self.is_version_1_2?(); end

  def self.new(address, port=T.unsafe(nil), p_addr=T.unsafe(nil), p_port=T.unsafe(nil), p_user=T.unsafe(nil), p_pass=T.unsafe(nil), p_no_proxy=T.unsafe(nil)); end

  def self.newobj(*arg, **arg1); end

  def self.post(url, data, header=T.unsafe(nil)); end

  def self.post_form(url, params); end

  def self.proxy_address(); end

  def self.proxy_class?(); end

  def self.proxy_pass(); end

  def self.proxy_port(); end

  def self.proxy_user(); end

  def self.socket_type(); end

  def self.start(address, *arg, &block); end

  def self.version_1_1?(); end

  def self.version_1_2(); end

  def self.version_1_2?(); end
end

class Gem::Net::HTTPAccepted
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPAccepted
end

class Gem::Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPAlreadyReported
end

class Gem::Net::HTTPBadGateway
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPBadGateway
end

class Gem::Net::HTTPBadRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPBadRequest
end

class Gem::Net::HTTPBadResponse
end

class Gem::Net::HTTPBadResponse
end

class Gem::Net::HTTPClientError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPClientError::EXCEPTION_TYPE = Gem::Net::HTTPClientException

class Gem::Net::HTTPClientError
end

Gem::Net::HTTPClientErrorCode = Gem::Net::HTTPClientError

class Gem::Net::HTTPClientException
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPClientException
end

class Gem::Net::HTTPConflict
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPConflict
end

class Gem::Net::HTTPContinue
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPContinue
end

class Gem::Net::HTTPCreated
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPCreated
end

class Gem::Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPEarlyHints
end

class Gem::Net::HTTPError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPError
end

module Gem::Net::HTTPExceptions
  def data(); end

  def initialize(msg, res); end

  def response(); end
end

module Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPExpectationFailed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPExpectationFailed
end

class Gem::Net::HTTPFailedDependency
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPFailedDependency
end

class Gem::Net::HTTPFatalError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPFatalError
end

Gem::Net::HTTPFatalErrorCode = Gem::Net::HTTPClientError

class Gem::Net::HTTPForbidden
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPForbidden
end

class Gem::Net::HTTPFound
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPFound
end

Gem::Net::HTTPGatewayTimeOut = Gem::Net::HTTPGatewayTimeout

class Gem::Net::HTTPGatewayTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPGatewayTimeout
end

class Gem::Net::HTTPGenericRequest
  include ::Gem::Net::HTTPHeader
  def body(); end

  def body=(str); end

  def body_exist?(); end

  def body_stream(); end

  def body_stream=(input); end

  def decode_content(); end

  def exec(sock, ver, path); end

  def initialize(m, reqbody, resbody, uri_or_path, initheader=T.unsafe(nil)); end

  def method(); end

  def path(); end

  def request_body_permitted?(); end

  def response_body_permitted?(); end

  def set_body_internal(str); end

  def update_uri(addr, port, ssl); end

  def uri(); end
end

class Gem::Net::HTTPGenericRequest::Chunker
  def finish(); end

  def initialize(sock); end

  def write(buf); end
end

class Gem::Net::HTTPGenericRequest::Chunker
end

class Gem::Net::HTTPGenericRequest
end

class Gem::Net::HTTPGone
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPGone
end

module Gem::Net::HTTPHeader
  def [](key); end

  def []=(key, val); end

  def add_field(key, val); end

  def basic_auth(account, password); end

  def canonical_each(); end

  def chunked?(); end

  def connection_close?(); end

  def connection_keep_alive?(); end

  def content_length(); end

  def content_length=(len); end

  def content_range(); end

  def content_type(); end

  def content_type=(type, params=T.unsafe(nil)); end

  def delete(key); end

  def each(&blk); end

  def each_capitalized(); end

  def each_capitalized_name(); end

  def each_header(); end

  def each_key(&block); end

  def each_name(&block); end

  def each_value(); end

  def fetch(key, *args, &block); end

  def form_data=(params, sep=T.unsafe(nil)); end

  def get_fields(key); end

  def initialize_http_header(initheader); end

  def key?(key); end

  def length(); end

  def main_type(); end

  def proxy_basic_auth(account, password); end

  def range(); end

  def range=(r, e=T.unsafe(nil)); end

  def range_length(); end

  def set_content_type(type, params=T.unsafe(nil)); end

  def set_form(params, enctype=T.unsafe(nil), formopt=T.unsafe(nil)); end

  def set_form_data(params, sep=T.unsafe(nil)); end

  def set_range(r, e=T.unsafe(nil)); end

  def size(); end

  def sub_type(); end

  def to_hash(); end

  def type_params(); end
  MAX_FIELD_LENGTH = ::T.let(nil, ::T.untyped)
  MAX_KEY_LENGTH = ::T.let(nil, ::T.untyped)
end

module Gem::Net::HTTPHeader
end

class Gem::Net::HTTPHeaderSyntaxError
end

class Gem::Net::HTTPHeaderSyntaxError
end

class Gem::Net::HTTPIMUsed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPIMUsed
end

class Gem::Net::HTTPInformation
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPInformation::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPInformation
end

Gem::Net::HTTPInformationCode = Gem::Net::HTTPInformation

class Gem::Net::HTTPInsufficientStorage
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPInsufficientStorage
end

class Gem::Net::HTTPInternalServerError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPInternalServerError
end

class Gem::Net::HTTPLengthRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLengthRequired
end

class Gem::Net::HTTPLocked
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLocked
end

class Gem::Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLoopDetected
end

class Gem::Net::HTTPMethodNotAllowed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMethodNotAllowed
end

class Gem::Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMisdirectedRequest
end

class Gem::Net::HTTPMovedPermanently
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMovedPermanently
end

Gem::Net::HTTPMovedTemporarily = Gem::Net::HTTPFound

class Gem::Net::HTTPMultiStatus
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMultiStatus
end

Gem::Net::HTTPMultipleChoice = Gem::Net::HTTPMultipleChoices

class Gem::Net::HTTPMultipleChoices
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMultipleChoices
end

class Gem::Net::HTTPNetworkAuthenticationRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNetworkAuthenticationRequired
end

class Gem::Net::HTTPNoContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNoContent
end

class Gem::Net::HTTPNonAuthoritativeInformation
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNonAuthoritativeInformation
end

class Gem::Net::HTTPNotAcceptable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotAcceptable
end

class Gem::Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotExtended
end

class Gem::Net::HTTPNotFound
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotFound
end

class Gem::Net::HTTPNotImplemented
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotImplemented
end

class Gem::Net::HTTPNotModified
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotModified
end

class Gem::Net::HTTPOK
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPOK
end

class Gem::Net::HTTPPartialContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPartialContent
end

class Gem::Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPayloadTooLarge
end

class Gem::Net::HTTPPaymentRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPaymentRequired
end

class Gem::Net::HTTPPermanentRedirect
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPermanentRedirect
end

class Gem::Net::HTTPPreconditionFailed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPreconditionFailed
end

class Gem::Net::HTTPPreconditionRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPreconditionRequired
end

class Gem::Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPProcessing
end

class Gem::Net::HTTPProxyAuthenticationRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPProxyAuthenticationRequired
end

class Gem::Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRangeNotSatisfiable
end

class Gem::Net::HTTPRedirection
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPRedirection::EXCEPTION_TYPE = Gem::Net::HTTPRetriableError

class Gem::Net::HTTPRedirection
end

Gem::Net::HTTPRedirectionCode = Gem::Net::HTTPRedirection

class Gem::Net::HTTPRequest
  def initialize(path, initheader=T.unsafe(nil)); end
end

class Gem::Net::HTTPRequest
end

Gem::Net::HTTPRequestEntityTooLarge = Gem::Net::HTTPPayloadTooLarge

class Gem::Net::HTTPRequestHeaderFieldsTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRequestHeaderFieldsTooLarge
end

Gem::Net::HTTPRequestTimeOut = Gem::Net::HTTPRequestTimeout

class Gem::Net::HTTPRequestTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRequestTimeout
end

Gem::Net::HTTPRequestURITooLarge = Gem::Net::HTTPURITooLong

Gem::Net::HTTPRequestURITooLong = Gem::Net::HTTPURITooLong

Gem::Net::HTTPRequestedRangeNotSatisfiable = Gem::Net::HTTPRangeNotSatisfiable

class Gem::Net::HTTPResetContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPResetContent
end

Gem::Net::HTTPResponceReceiver = Gem::Net::HTTPResponse

class Gem::Net::HTTPResponse
  include ::Gem::Net::HTTPHeader
  def body(); end

  def body=(value); end

  def body_encoding(); end

  def body_encoding=(value); end

  def code(); end

  def code_type(); end

  def decode_content(); end

  def decode_content=(decode_content); end

  def entity(); end

  def error!(); end

  def error_type(); end

  def header(); end

  def http_version(); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def initialize(httpv, code, msg); end

  def message(); end

  def msg(); end

  def read_body(dest=T.unsafe(nil), &block); end

  def read_header(); end

  def reading_body(sock, reqmethodallowbody); end

  def response(); end

  def uri(); end

  def uri=(uri); end

  def value(); end
  CODE_CLASS_TO_OBJ = ::T.let(nil, ::T.untyped)
  CODE_TO_OBJ = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPResponse::Inflater
  def bytes_inflated(); end

  def finish(); end

  def inflate_adapter(dest); end

  def initialize(socket); end

  def read(clen, dest, ignore_eof=T.unsafe(nil)); end

  def read_all(dest); end
end

class Gem::Net::HTTPResponse::Inflater
end

class Gem::Net::HTTPResponse
  def self.body_permitted?(); end

  def self.exception_type(); end

  def self.read_new(sock); end
end

Gem::Net::HTTPResponseReceiver = Gem::Net::HTTPResponse

Gem::Net::HTTPRetriableCode = Gem::Net::HTTPRedirection

class Gem::Net::HTTPRetriableError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPRetriableError
end

class Gem::Net::HTTPSeeOther
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPSeeOther
end

class Gem::Net::HTTPServerError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPServerError::EXCEPTION_TYPE = Gem::Net::HTTPFatalError

class Gem::Net::HTTPServerError
end

Gem::Net::HTTPServerErrorCode = Gem::Net::HTTPServerError

Gem::Net::HTTPServerException = Gem::Net::HTTPClientException

class Gem::Net::HTTPServiceUnavailable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPServiceUnavailable
end

Gem::Net::HTTPSession = Gem::Net::HTTP

class Gem::Net::HTTPSuccess
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPSuccess::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPSuccess
end

Gem::Net::HTTPSuccessCode = Gem::Net::HTTPSuccess

class Gem::Net::HTTPSwitchProtocol
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPSwitchProtocol
end

class Gem::Net::HTTPTemporaryRedirect
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPTemporaryRedirect
end

class Gem::Net::HTTPTooManyRequests
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPTooManyRequests
end

class Gem::Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPURITooLong
end

class Gem::Net::HTTPUnauthorized
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnauthorized
end

class Gem::Net::HTTPUnavailableForLegalReasons
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnavailableForLegalReasons
end

class Gem::Net::HTTPUnknownResponse
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPUnknownResponse::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPUnknownResponse
end

class Gem::Net::HTTPUnprocessableEntity
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnprocessableEntity
end

class Gem::Net::HTTPUnsupportedMediaType
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnsupportedMediaType
end

class Gem::Net::HTTPUpgradeRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUpgradeRequired
end

class Gem::Net::HTTPUseProxy
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUseProxy
end

class Gem::Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPVariantAlsoNegotiates
end

class Gem::Net::HTTPVersionNotSupported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPVersionNotSupported
end

class Gem::Net::InternetMessageIO
  def each_list_item(); end

  def each_message_chunk(); end

  def initialize(*arg, **arg1); end

  def write_message(src); end

  def write_message_0(src); end

  def write_message_by_block(&block); end
end

class Gem::Net::InternetMessageIO
end

module Gem::Net::NetPrivate
end

Gem::Net::NetPrivate::HTTPRequest = Gem::Net::HTTPRequest

Gem::Net::NetPrivate::Socket = Gem::Net::InternetMessageIO

module Gem::Net::NetPrivate
end

class Gem::Net::OpenTimeout
end

class Gem::Net::OpenTimeout
end

class Gem::Net::ProtoAuthError
end

class Gem::Net::ProtoAuthError
end

class Gem::Net::ProtoCommandError
end

class Gem::Net::ProtoCommandError
end

class Gem::Net::ProtoFatalError
end

class Gem::Net::ProtoFatalError
end

class Gem::Net::ProtoRetriableError
end

class Gem::Net::ProtoRetriableError
end

class Gem::Net::ProtoServerError
end

class Gem::Net::ProtoServerError
end

class Gem::Net::ProtoSyntaxError
end

class Gem::Net::ProtoSyntaxError
end

class Gem::Net::ProtoUnknownError
end

class Gem::Net::ProtoUnknownError
end

Gem::Net::ProtocRetryError = Gem::Net::ProtoRetriableError

class Gem::Net::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::Protocol
  def self.protocol_param(name, val); end
end

class Gem::Net::ProtocolError
end

class Gem::Net::ProtocolError
end

class Gem::Net::ReadAdapter
  def <<(str); end

  def initialize(block); end
end

class Gem::Net::ReadAdapter
end

class Gem::Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Gem::Net::ReadTimeout
end

class Gem::Net::WriteAdapter
  def <<(str); end

  def initialize(writer); end

  def print(str); end

  def printf(*args); end

  def puts(str=T.unsafe(nil)); end

  def write(str); end
end

class Gem::Net::WriteAdapter
end

class Gem::Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Gem::Net::WriteTimeout
end

module Gem::Net
end

class Gem::Package
  def copy_stream(src, dst); end

  def gem(); end

  def limit_read(io, name, limit); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::SymlinkError
  def initialize(name, destination, destination_dir); end
end

class Gem::Package::SymlinkError
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.oct_or_256based(str); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def length(); end

  def pos(); end

  def pos=(new_pos); end

  def read(maxlen=T.unsafe(nil)); end

  def readpartial(maxlen, outbuf=T.unsafe(nil)); end

  def rewind(); end

  def seek(offset, whence=T.unsafe(nil)); end

  def size(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
  def self.open(header, io, &block); end
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end

  def self.raw_spec(path, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::Platform
  def normalized_linux_version(); end

  def normalized_linux_version_ext(); end
  WINDOWS = ::T.let(nil, ::T.untyped)
  X64_LINUX = ::T.let(nil, ::T.untyped)
  X64_LINUX_MUSL = ::T.let(nil, ::T.untyped)
end

class Gem::Platform
  def self._deprecated_match(platform); end

  def self.match_gem?(platform, gem_name); end

  def self.match_spec?(spec); end

  def self.sort_priority(platform); end
end

class Gem::RequestSet
  include ::Gem::TSort
end

class Gem::RequestSet::Lockfile::Tokenizer::Token
  def self.keyword_init?(); end
end

class Gem::Requirement
  def _sorted_requirements(); end
end

class Gem::Resolv
  def each_address(name); end

  def each_name(address); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def initialize(resolvers=T.unsafe(nil), use_ipv6: T.unsafe(nil)); end
  AddressRegex = ::T.let(nil, ::T.untyped)
  DefaultResolver = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS
  def close(); end

  def each_address(name); end

  def each_name(address); end

  def each_resource(name, typeclass, &proc); end

  def extract_resources(msg, name, typeclass); end

  def fetch_resource(name, typeclass); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def getresource(name, typeclass); end

  def getresources(name, typeclass); end

  def initialize(config_info=T.unsafe(nil)); end

  def lazy_initialize(); end

  def make_tcp_requester(host, port); end

  def make_udp_requester(); end

  def timeouts=(values); end
  Port = ::T.let(nil, ::T.untyped)
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
  UDPSize = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Config
  def generate_candidates(name); end

  def generate_timeouts(); end

  def initialize(config_info=T.unsafe(nil)); end

  def lazy_initialize(); end

  def nameserver_port(); end

  def resolv(name); end

  def single?(); end

  def timeouts=(values); end

  def use_ipv6?(); end
  InitialTimeout = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Config::NXDomain
end

class Gem::Resolv::DNS::Config::NXDomain
end

class Gem::Resolv::DNS::Config::OtherResolvError
end

class Gem::Resolv::DNS::Config::OtherResolvError
end

class Gem::Resolv::DNS::Config
  def self.default_config_hash(filename=T.unsafe(nil)); end

  def self.parse_resolv_conf(filename); end
end

class Gem::Resolv::DNS::DecodeError
end

class Gem::Resolv::DNS::DecodeError
end

class Gem::Resolv::DNS::EncodeError
end

class Gem::Resolv::DNS::EncodeError
end

module Gem::Resolv::DNS::Label
end

class Gem::Resolv::DNS::Label::Str
  def ==(other); end

  def downcase(); end

  def eql?(other); end

  def initialize(string); end

  def string(); end
end

class Gem::Resolv::DNS::Label::Str
end

module Gem::Resolv::DNS::Label
  def self.split(arg); end
end

class Gem::Resolv::DNS::Message
  def ==(other); end

  def aa(); end

  def aa=(aa); end

  def add_additional(name, ttl, data); end

  def add_answer(name, ttl, data); end

  def add_authority(name, ttl, data); end

  def add_question(name, typeclass); end

  def additional(); end

  def answer(); end

  def authority(); end

  def each_additional(); end

  def each_answer(); end

  def each_authority(); end

  def each_question(); end

  def each_resource(); end

  def encode(); end

  def id(); end

  def id=(id); end

  def initialize(id=T.unsafe(nil)); end

  def opcode(); end

  def opcode=(opcode); end

  def qr(); end

  def qr=(qr); end

  def question(); end

  def ra(); end

  def ra=(ra); end

  def rcode(); end

  def rcode=(rcode); end

  def rd(); end

  def rd=(rd); end

  def tc(); end

  def tc=(tc); end
end

class Gem::Resolv::DNS::Message::MessageDecoder
  def get_bytes(len=T.unsafe(nil)); end

  def get_label(); end

  def get_labels(); end

  def get_length16(); end

  def get_list(); end

  def get_name(); end

  def get_question(); end

  def get_rr(); end

  def get_string(); end

  def get_string_list(); end

  def get_unpack(template); end

  def initialize(data); end
end

class Gem::Resolv::DNS::Message::MessageDecoder
end

class Gem::Resolv::DNS::Message::MessageEncoder
  def put_bytes(d); end

  def put_label(d); end

  def put_labels(d, compress: T.unsafe(nil)); end

  def put_length16(); end

  def put_name(d, compress: T.unsafe(nil)); end

  def put_pack(template, *d); end

  def put_string(d); end

  def put_string_list(ds); end
end

class Gem::Resolv::DNS::Message::MessageEncoder
end

class Gem::Resolv::DNS::Message
  def self.decode(m); end
end

class Gem::Resolv::DNS::Name
  def ==(other); end

  def [](i); end

  def absolute?(); end

  def eql?(other); end

  def initialize(labels, absolute=T.unsafe(nil)); end

  def length(); end

  def subdomain_of?(other); end

  def to_a(); end
end

class Gem::Resolv::DNS::Name
  def self.create(arg); end
end

module Gem::Resolv::DNS::OpCode
  IQuery = ::T.let(nil, ::T.untyped)
  Notify = ::T.let(nil, ::T.untyped)
  Query = ::T.let(nil, ::T.untyped)
  Status = ::T.let(nil, ::T.untyped)
  Update = ::T.let(nil, ::T.untyped)
end

module Gem::Resolv::DNS::OpCode
end

class Gem::Resolv::DNS::Query
  def encode_rdata(msg); end
end

class Gem::Resolv::DNS::Query
  def self.decode_rdata(msg); end
end

module Gem::Resolv::DNS::RCode
  BADALG = ::T.let(nil, ::T.untyped)
  BADKEY = ::T.let(nil, ::T.untyped)
  BADMODE = ::T.let(nil, ::T.untyped)
  BADNAME = ::T.let(nil, ::T.untyped)
  BADSIG = ::T.let(nil, ::T.untyped)
  BADTIME = ::T.let(nil, ::T.untyped)
  BADVERS = ::T.let(nil, ::T.untyped)
  FormErr = ::T.let(nil, ::T.untyped)
  NXDomain = ::T.let(nil, ::T.untyped)
  NXRRSet = ::T.let(nil, ::T.untyped)
  NoError = ::T.let(nil, ::T.untyped)
  NotAuth = ::T.let(nil, ::T.untyped)
  NotImp = ::T.let(nil, ::T.untyped)
  NotZone = ::T.let(nil, ::T.untyped)
  Refused = ::T.let(nil, ::T.untyped)
  ServFail = ::T.let(nil, ::T.untyped)
  YXDomain = ::T.let(nil, ::T.untyped)
  YXRRSet = ::T.let(nil, ::T.untyped)
end

module Gem::Resolv::DNS::RCode
end

class Gem::Resolv::DNS::Requester
  def close(); end

  def request(sender, tout); end

  def sender_for(addr, msg); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP::Sender
  def data(); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP::Sender
end

class Gem::Resolv::DNS::Requester::ConnectedUDP
end

class Gem::Resolv::DNS::Requester::MDNSOneShot
end

class Gem::Resolv::DNS::Requester::MDNSOneShot
end

class Gem::Resolv::DNS::Requester::RequestError
end

class Gem::Resolv::DNS::Requester::RequestError
end

class Gem::Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Gem::Resolv::DNS::Requester::Sender
end

class Gem::Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::TCP::Sender
  def data(); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::TCP::Sender
end

class Gem::Resolv::DNS::Requester::TCP
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host, port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP::Sender
  def data(); end

  def initialize(msg, data, sock, host, port); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP::Sender
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP
end

class Gem::Resolv::DNS::Requester
end

class Gem::Resolv::DNS::Resource
  def ==(other); end

  def eql?(other); end

  def ttl(); end
  ClassHash = ::T.let(nil, ::T.untyped)
  ClassInsensitiveTypes = ::T.let(nil, ::T.untyped)
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::ANY
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::ANY
end

class Gem::Resolv::DNS::Resource::CNAME
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::CNAME
end

class Gem::Resolv::DNS::Resource::DomainName
  def initialize(name); end

  def name(); end
end

class Gem::Resolv::DNS::Resource::DomainName
end

class Gem::Resolv::DNS::Resource::Generic
  def data(); end

  def initialize(data); end
end

class Gem::Resolv::DNS::Resource::Generic
  def self.create(type_value, class_value); end
end

class Gem::Resolv::DNS::Resource::HINFO
  def cpu(); end

  def initialize(cpu, os); end

  def os(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::HINFO
end

module Gem::Resolv::DNS::Resource::IN
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::A
  def address(); end

  def initialize(address); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::A
end

class Gem::Resolv::DNS::Resource::IN::AAAA
  def address(); end

  def initialize(address); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::AAAA
end

class Gem::Resolv::DNS::Resource::IN::ANY
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::ANY
end

class Gem::Resolv::DNS::Resource::IN::CNAME
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::CNAME
end

class Gem::Resolv::DNS::Resource::IN::HINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::HINFO
end

class Gem::Resolv::DNS::Resource::IN::HTTPS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::HTTPS
end

class Gem::Resolv::DNS::Resource::IN::LOC
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::LOC
end

class Gem::Resolv::DNS::Resource::IN::MINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::MINFO
end

class Gem::Resolv::DNS::Resource::IN::MX
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::MX
end

class Gem::Resolv::DNS::Resource::IN::NS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::NS
end

class Gem::Resolv::DNS::Resource::IN::PTR
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::PTR
end

class Gem::Resolv::DNS::Resource::IN::SOA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SOA
end

class Gem::Resolv::DNS::Resource::IN::SRV
  def initialize(priority, weight, port, target); end

  def port(); end

  def priority(); end

  def target(); end

  def weight(); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SRV
end

class Gem::Resolv::DNS::Resource::IN::SVCB
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SVCB
end

class Gem::Resolv::DNS::Resource::IN::ServiceBinding
  def alias_mode?(); end

  def encode_rdata(msg); end

  def initialize(priority, target, params=T.unsafe(nil)); end

  def params(); end

  def priority(); end

  def service_mode?(); end

  def target(); end
end

class Gem::Resolv::DNS::Resource::IN::ServiceBinding
  def self.decode_rdata(msg); end
end

class Gem::Resolv::DNS::Resource::IN::TXT
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::TXT
end

class Gem::Resolv::DNS::Resource::IN::WKS
  def address(); end

  def bitmap(); end

  def initialize(address, protocol, bitmap); end

  def protocol(); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::WKS
end

module Gem::Resolv::DNS::Resource::IN
end

class Gem::Resolv::DNS::Resource::LOC
  def altitude(); end

  def hprecision(); end

  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end

  def latitude(); end

  def longitude(); end

  def ssize(); end

  def version(); end

  def vprecision(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::LOC
end

class Gem::Resolv::DNS::Resource::MINFO
  def emailbx(); end

  def initialize(rmailbx, emailbx); end

  def rmailbx(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::MINFO
end

class Gem::Resolv::DNS::Resource::MX
  def exchange(); end

  def initialize(preference, exchange); end

  def preference(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::MX
end

class Gem::Resolv::DNS::Resource::NS
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::NS
end

class Gem::Resolv::DNS::Resource::PTR
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::PTR
end

class Gem::Resolv::DNS::Resource::SOA
  def expire(); end

  def initialize(mname, rname, serial, refresh, retry_, expire, minimum); end

  def minimum(); end

  def mname(); end

  def refresh(); end

  def retry(); end

  def rname(); end

  def serial(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::SOA
end

class Gem::Resolv::DNS::Resource::TXT
  def data(); end

  def initialize(first_string, *rest_strings); end

  def strings(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::TXT
end

class Gem::Resolv::DNS::Resource
  def self.get_class(type_value, class_value); end
end

class Gem::Resolv::DNS::SvcParam
  ClassHash = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::ALPN
  def encode(msg); end

  def initialize(protocol_ids); end

  def protocol_ids(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::ALPN
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::DoHPath
  def encode(msg); end

  def initialize(template); end

  def template(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::DoHPath
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Generic
  def encode(msg); end

  def initialize(value); end

  def value(); end
end

class Gem::Resolv::DNS::SvcParam::Generic
  def self.create(key_number); end

  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::IPv4Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::IPv4Hint
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::IPv6Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::IPv6Hint
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Mandatory
  def encode(msg); end

  def initialize(keys); end

  def keys(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::Mandatory
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::NoDefaultALPN
  def encode(msg); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::NoDefaultALPN
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Port
  def encode(msg); end

  def initialize(port); end

  def port(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::Port
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam
  def self.key_name(); end

  def self.key_number(); end
end

class Gem::Resolv::DNS::SvcParams
  include ::Enumerable
  def [](key); end

  def add(param); end

  def count(); end

  def delete(key); end

  def each(&block); end

  def empty?(); end

  def encode(msg); end

  def initialize(params=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::SvcParams
  def self.decode(msg); end
end

class Gem::Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.open(*args); end

  def self.random(arg); end
end

class Gem::Resolv::Hosts
  def each_address(name, &proc); end

  def each_name(address, &proc); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def initialize(filename=T.unsafe(nil)); end

  def lazy_initialize(); end
  DefaultFileName = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::Hosts
end

class Gem::Resolv::IPv4
  def ==(other); end

  def address(); end

  def eql?(other); end

  def initialize(address); end

  def to_name(); end
  Regex = ::T.let(nil, ::T.untyped)
  Regex256 = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::IPv4
  def self.create(arg); end
end

class Gem::Resolv::IPv6
  def ==(other); end

  def address(); end

  def eql?(other); end

  def initialize(address); end

  def to_name(); end
  Regex = ::T.let(nil, ::T.untyped)
  Regex_6Hex4Dec = ::T.let(nil, ::T.untyped)
  Regex_8Hex = ::T.let(nil, ::T.untyped)
  Regex_8HexLinkLocal = ::T.let(nil, ::T.untyped)
  Regex_CompressedHex = ::T.let(nil, ::T.untyped)
  Regex_CompressedHex4Dec = ::T.let(nil, ::T.untyped)
  Regex_CompressedHexLinkLocal = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::IPv6
  def self.create(arg); end
end

module Gem::Resolv::LOC
end

class Gem::Resolv::LOC::Alt
  def ==(other); end

  def altitude(); end

  def eql?(other); end

  def initialize(altitude); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Alt
  def self.create(arg); end
end

class Gem::Resolv::LOC::Coord
  def ==(other); end

  def coordinates(); end

  def eql?(other); end

  def initialize(coordinates, orientation); end

  def orientation(); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Coord
  def self.create(arg); end
end

class Gem::Resolv::LOC::Size
  def ==(other); end

  def eql?(other); end

  def initialize(scalar); end

  def scalar(); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Size
  def self.create(arg); end
end

module Gem::Resolv::LOC
end

class Gem::Resolv::MDNS
  AddressV4 = ::T.let(nil, ::T.untyped)
  AddressV6 = ::T.let(nil, ::T.untyped)
  Addresses = ::T.let(nil, ::T.untyped)
  Port = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::MDNS
end

class Gem::Resolv::ResolvError
end

class Gem::Resolv::ResolvError
end

class Gem::Resolv::ResolvTimeout
end

class Gem::Resolv::ResolvTimeout
end

class Gem::Resolv
  def self.each_address(name, &block); end

  def self.each_name(address, &proc); end

  def self.getaddress(name); end

  def self.getaddresses(name); end

  def self.getname(address); end

  def self.getnames(address); end
end

class Gem::Resolver
  include ::Gem::Molinillo::UI
  include ::Gem::Molinillo::SpecificationProvider
end

class Gem::Resolver::APISet::GemParser
  def parse(line); end
end

class Gem::Resolver::APISet::GemParser
end

class Gem::Resolver::APISpecification
  def self.new(set, api_data); end
end

class Gem::Resolver::ActivationRequest
  def eql?(other); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::IndexSpecification
  def ==(other); end
end

class Gem::Resolver::InstallerSet
  def force(); end

  def force=(force); end
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Specification
  def required_ruby_version(); end

  def required_rubygems_version(); end
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

module Gem::Security
  DEFAULT_KEY_ALGORITHM = ::T.let(nil, ::T.untyped)
  EC_NAME = ::T.let(nil, ::T.untyped)
  RSA_DSA_KEY_LENGTH = ::T.let(nil, ::T.untyped)
end

class Gem::Security::Signer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil), options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def options(); end

  def re_sign_key(expiration_length: T.unsafe(nil)); end

  def sign(data); end
end

class Gem::Security::Signer
  def self.re_sign_cert(expired_cert, expired_cert_path, private_key); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_digest(algorithm=T.unsafe(nil)); end

  def self.create_key(algorithm); end

  def self.email_to_name(email_address); end

  def self.get_public_key(key); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil), num_results=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchMetadata
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def _deprecated_validate_dependencies(); end

  def _deprecated_validate_metadata(); end

  def _deprecated_validate_permissions(); end

  def deleted_gem?(); end

  def flatten_require_paths(); end

  def removed_method_calls(); end

  def to_ruby(); end

  def validate_for_resolution(); end
  LATEST_RUBY_WITHOUT_PATCH_VERSIONS = ::T.let(nil, ::T.untyped)
  REMOVED_METHODS = ::T.let(nil, ::T.untyped)
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.add_spec(spec); end

  def self.find_by_full_name(full_name); end

  def self.gemspec_stubs_in(dir, pattern); end

  def self.latest_spec_for(name); end

  def self.remove_spec(spec); end

  def self.specification_record(); end

  def self.stubs_for_pattern(pattern, match_platform=T.unsafe(nil)); end
end

class Gem::SpecificationPolicy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_duplicate_dependencies(); end

  def validate_for_resolution(); end

  def validate_metadata(); end

  def validate_optional(strict); end

  def validate_permissions(); end

  def validate_required!(); end

  def validate_required_metadata!(); end

  def validate_required_ruby_version(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::SpecificationRecord
  include ::Enumerable
  def add_spec(spec); end

  def all(); end

  def all=(specs); end

  def all_names(); end

  def each(&blk); end

  def find_active_stub_by_path(path); end

  def find_all_by_name(name, *requirements); end

  def find_by_path(path); end

  def find_inactive_by_path(path); end

  def initialize(dirs); end

  def latest_spec_for(name); end

  def latest_specs(prerelease); end

  def remove_spec(spec); end

  def stubs(); end

  def stubs_for(name); end

  def stubs_for_pattern(pattern, match_platform=T.unsafe(nil)); end
end

class Gem::SpecificationRecord
  def self.dirs_from(paths); end

  def self.from_path(path); end
end

class Gem::StubSpecification
  include ::Gem::BetterPermissionError
  def ==(other); end

  def build_extensions(); end

  def eql?(other); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def sort_obj(); end

  def spec(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

module Gem::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::TSort::Cyclic
end

class Gem::TSort::Cyclic
end

module Gem::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

module Gem::Timeout
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Timeout::Error
end

class Gem::Timeout::Error
  def self.handle_timeout(message); end
end

class Gem::Timeout::ExitException
  def exception(*arg); end
end

class Gem::Timeout::ExitException
end

module Gem::Timeout
  def self.ensure_timeout_thread_created(); end

  def self.timeout(sec, klass=T.unsafe(nil), message=T.unsafe(nil), &block); end
end

module Gem::URI
  include ::Gem::URI::RFC2396_REGEXP
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ABS_URI_REF = ::T.let(nil, ::T.untyped)
  DEFAULT_PARSER = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  OPAQUE = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  REL_URI_REF = ::T.let(nil, ::T.untyped)
  RFC3986_PARSER = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TBLDECWWWCOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCURICOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCWWWCOMP_ = ::T.let(nil, ::T.untyped)
  UNSAFE = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_CODE = ::T.let(nil, ::T.untyped)
  WEB_ENCODINGS_ = ::T.let(nil, ::T.untyped)
end

class Gem::URI::BadURIError
end

class Gem::URI::BadURIError
end

class Gem::URI::Error
end

class Gem::URI::Error
end

class Gem::URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  TYPECODE = ::T.let(nil, ::T.untyped)
  TYPECODE_PREFIX = ::T.let(nil, ::T.untyped)
end

class Gem::URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class Gem::URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::File
end

class Gem::URI::Generic
  include ::Gem::URI
  include ::Gem::URI::RFC2396_REGEXP
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def decoded_password(); end

  def decoded_user(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def to_str(); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  USE_REGISTRY = ::T.let(nil, ::T.untyped)
end

class Gem::URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class Gem::URI::HTTP
  def authority(); end

  def origin(); end

  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::HTTP
end

class Gem::URI::HTTPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::HTTPS
end

class Gem::URI::InvalidComponentError
end

class Gem::URI::InvalidComponentError
end

class Gem::URI::InvalidURIError
end

class Gem::URI::InvalidURIError
end

class Gem::URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_BASE = ::T.let(nil, ::T.untyped)
  SCOPE_ONE = ::T.let(nil, ::T.untyped)
  SCOPE_SUB = ::T.let(nil, ::T.untyped)
end

class Gem::URI::LDAP
end

class Gem::URI::LDAPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::LDAPS
end

class Gem::URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMAIL_REGEXP = ::T.let(nil, ::T.untyped)
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

class Gem::URI::MailTo
end

Gem::URI::Parser = Gem::URI::RFC2396_Parser

Gem::URI::REGEXP = Gem::URI::RFC2396_REGEXP

class Gem::URI::RFC2396_Parser
  include ::Gem::URI::RFC2396_REGEXP
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class Gem::URI::RFC2396_Parser
end

module Gem::URI::RFC2396_REGEXP
end

module Gem::URI::RFC2396_REGEXP::PATTERN
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  DOMLABEL = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  HIER_PART = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  HOSTPORT = ::T.let(nil, ::T.untyped)
  IPV4ADDR = ::T.let(nil, ::T.untyped)
  IPV6ADDR = ::T.let(nil, ::T.untyped)
  IPV6REF = ::T.let(nil, ::T.untyped)
  NET_PATH = ::T.let(nil, ::T.untyped)
  OPAQUE_PART = ::T.let(nil, ::T.untyped)
  PATH_SEGMENTS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REG_NAME = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_SEGMENT = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TOPLABEL = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  URIC = ::T.let(nil, ::T.untyped)
  URIC_NO_SLASH = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  X_ABS_URI = ::T.let(nil, ::T.untyped)
  X_REL_URI = ::T.let(nil, ::T.untyped)
end

module Gem::URI::RFC2396_REGEXP::PATTERN
end

module Gem::URI::RFC2396_REGEXP
end

class Gem::URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  RFC3986_URI = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SEG = ::T.let(nil, ::T.untyped)
  SEG_NC = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
end

class Gem::URI::RFC3986_Parser
end

module Gem::URI::Util
end

module Gem::URI::Util
  def self.make_components_hash(klass, array_hash); end
end

class Gem::URI::WS
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::WS
end

class Gem::URI::WSS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::WSS
end

module Gem::URI
  def self.decode_uri_component(str, enc=T.unsafe(nil)); end

  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.decode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.encode_uri_component(str, enc=T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.extract(str, schemes=T.unsafe(nil), &block); end

  def self.for(scheme, *arguments, default: T.unsafe(nil)); end

  def self.get_encoding(label); end

  def self.join(*str); end

  def self.parse(uri); end

  def self.regexp(schemes=T.unsafe(nil)); end

  def self.register_scheme(scheme, klass); end

  def self.scheme_list(); end

  def self.split(uri); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

class Gem::UnknownCommandError
  def initialize(unknown_command); end

  def unknown_command(); end
end

class Gem::UnknownCommandError
  def self.attach_correctable(); end
end

class Gem::UnknownCommandSpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end
end

class Gem::UnknownCommandSpellChecker
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

module Gem::Util
  def self._deprecated_silent_system(*command); end
end

class Gem::Version
  def partition_segments(ver); end
end

Gem::Version::Requirement = Gem::Requirement

class Gem::WebauthnVerificationError
  def initialize(message); end
end

class Gem::WebauthnVerificationError
end

module Gem
  def self.activated_gem_paths(); end

  def self.cache_home(); end

  def self.config_home(); end

  def self.data_home(); end

  def self.default_user_install(); end

  def self.disable_system_update_message(); end

  def self.disable_system_update_message=(disable_system_update_message); end

  def self.discover_gems_on_require(); end

  def self.discover_gems_on_require=(discover_gems_on_require); end

  def self.dynamic_library_suffixes(); end

  def self.find_config_file(); end

  def self.find_default_spec(path); end

  def self.freebsd_platform?(); end

  def self.load_safe_marshal(); end

  def self.open_file(path, flags, &block); end

  def self.open_file_with_flock(path, &block); end

  def self.plugin_suffix_pattern(); end

  def self.plugin_suffix_regexp(); end

  def self.plugindir(install_dir=T.unsafe(nil)); end

  def self.solaris_platform?(); end

  def self.state_file(); end

  def self.state_home(); end
end

module GlobalID::FixtureSet
  def global_id(fixture_set_name, label, column_type: T.unsafe(nil), **options); end

  def signed_global_id(fixture_set_name, label, column_type: T.unsafe(nil), **options); end
end

module GlobalID::FixtureSet
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid, options=T.unsafe(nil)); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid, options=T.unsafe(nil)); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::InvalidModelIdError
end

class GlobalID::Locator::InvalidModelIdError
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class Guild
  include ::Guild::GeneratedAttributeMethods
  include ::Guild::GeneratedAssociationMethods
end

module Guild::GeneratedAssociationMethods
end

module Guild::GeneratedAssociationMethods
end

module Guild::GeneratedAttributeMethods
end

module Guild::GeneratedAttributeMethods
end

class Hash
  def deconstruct_keys(arg); end
end

class Hash
  def self.from_trusted_xml(xml); end

  def self.ruby2_keywords_hash(arg); end
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Cache
  def _fetch(cache_key, &block); end

  def cache_key(locale, key, options); end

  def fetch(cache_key, &block); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Cache
end

module I18n::Backend::CacheFile
  def load_file(filename); end

  def normalized_path(file); end

  def path_roots(); end

  def path_roots=(path_roots); end
end

module I18n::Backend::CacheFile
end

module I18n::Backend::Cascade
  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end
end

module I18n::Backend::Cascade
end

class I18n::Backend::Chain
  include ::I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def backends(); end

  def backends=(backends); end

  def eager_load!(); end

  def exists?(locale, key, options=T.unsafe(nil)); end

  def init_translations(); end

  def initialize(*backends); end

  def initialized?(); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def namespace_lookup?(result, options); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translate(locale, key, default_options=T.unsafe(nil)); end

  def translations(); end
end

module I18n::Backend::Chain::Implementation
end

class I18n::Backend::Chain
end

module I18n::Backend::Flatten
  def escape_default_separator(key); end

  def find_link(locale, key); end

  def flatten_keys(hash, escape, prev_key=T.unsafe(nil), &block); end

  def flatten_translations(locale, data, escape, subtree); end

  def links(); end

  def normalize_flat_keys(locale, key, scope, separator); end

  def resolve_link(locale, key); end

  def store_link(locale, key, link); end
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  def self.escape_default_separator(key); end

  def self.normalize_flat_keys(locale, key, scope, separator); end
end

module I18n::Backend::Gettext
  def load_po(filename); end

  def normalize(locale, data); end

  def normalize_pluralization(locale, key, value); end

  def parse(filename); end
end

class I18n::Backend::Gettext::PoData
  def set_comment(msgid_or_sym, comment); end
end

class I18n::Backend::Gettext::PoData
end

module I18n::Backend::Gettext
end

module I18n::Backend::InterpolationCompiler
  def compile_all_strings_in(data); end

  def interpolate(locale, string, values); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::InterpolationCompiler::Compiler
  def compile_if_an_interpolation(string); end

  def compile_interpolation_token(key); end

  def compiled_interpolation_body(str); end

  def direct_key(key); end

  def escape_key_sym(key); end

  def escape_plain_str(str); end

  def handle_interpolation_token(token); end

  def interpolate_key(key); end

  def interpolate_or_raise_missing(key); end

  def interpolated_str?(str); end

  def missing_key(key); end

  def nil_key(key); end

  def reserved_key(key); end

  def tokenize(str); end
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  extend ::I18n::Backend::InterpolationCompiler::Compiler
end

module I18n::Backend::InterpolationCompiler
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def init_translations(); end

  def initialize(store, subtrees=T.unsafe(nil)); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def store(); end

  def store=(store); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translations(); end
end

module I18n::Backend::KeyValue::Implementation
end

class I18n::Backend::KeyValue::SubtreeProxy
  def [](key); end

  def has_key?(key); end

  def initialize(master_key, store); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end
end

class I18n::Backend::KeyValue::SubtreeProxy
end

class I18n::Backend::KeyValue
end

class I18n::Backend::LazyLoadable
  def initialize(lazy_load: T.unsafe(nil)); end

  def initialized_locales(); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
  def initialize(file, expected_locale, unexpected_locales); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
end

class I18n::Backend::LazyLoadable
end

module I18n::Backend::Memoize
  def available_locales(); end

  def eager_load!(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def memoized_lookup(); end

  def reload!(); end

  def reset_memoizations!(locale=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::Memoize
end

module I18n::Backend::Metadata
  def interpolate(locale, entry, values=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def with_metadata(metadata, &block); end
end

module I18n::Backend::Metadata
  def self.included(base); end
end

module I18n::Backend::Pluralization
  def pluralize(locale, entry, count); end

  def pluralizer(locale); end

  def pluralizers(); end
end

module I18n::Backend::Pluralization
end

module I18n::Backend::Simple::Implementation
  MUTEX = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext::Helpers
  def N_(msgsid); end

  def _(msgid, options=T.unsafe(nil)); end

  def gettext(msgid, options=T.unsafe(nil)); end

  def n_(msgid, msgid_plural, n=T.unsafe(nil)); end

  def ngettext(msgid, msgid_plural, n=T.unsafe(nil)); end

  def np_(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def npgettext(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def ns_(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def nsgettext(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def p_(msgctxt, msgid); end

  def pgettext(msgctxt, msgid); end

  def s_(msgid, separator=T.unsafe(nil)); end

  def sgettext(msgid, separator=T.unsafe(nil)); end
end

module I18n::Gettext::Helpers
end

module I18n::Gettext
  def self.extract_scope(msgid, separator); end

  def self.plural_keys(*args); end
end

class I18n::InvalidFilenames
  NUMBER_OF_ERRORS_SHOWN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

class I18n::Locale::Tag::Rfc4646
  include ::I18n::Locale::Tag::Parents
  def to_sym(); end
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  def self.match(tag); end
end

class I18n::Locale::Tag::Rfc4646
  def self.parser(); end

  def self.parser=(parser); end

  def self.tag(tag); end
end

class I18n::Middleware
  def call(env); end

  def initialize(app); end
end

class I18n::Middleware
end

module I18n::MissingTranslation::Base
  PERMITTED_KEYS = ::T.let(nil, ::T.untyped)
end

module I18n::Tests
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

module I18n::Tests
end

module I18n
  def self.cache_key_digest(); end

  def self.cache_key_digest=(key_digest); end

  def self.cache_namespace(); end

  def self.cache_namespace=(namespace); end

  def self.cache_store(); end

  def self.cache_store=(store); end

  def self.perform_caching?(); end
end

class IO
  def nonblock(*arg); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def path(); end

  def pathconf(arg); end

  def ready?(); end

  def timeout(); end

  def timeout=(timeout); end

  def to_path(); end

  def wait(*arg); end

  def wait_priority(*arg); end

  def wait_readable(*arg); end

  def wait_writable(*arg); end
  PRIORITY = ::T.let(nil, ::T.untyped)
  READABLE = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class IO::Buffer
  include ::Comparable
  def &(arg); end

  def ^(arg); end

  def and!(arg); end

  def clear(*arg); end

  def copy(*arg); end

  def each(*arg, &blk); end

  def each_byte(*arg); end

  def empty?(); end

  def external?(); end

  def free(); end

  def get_string(*arg); end

  def get_value(arg, arg1); end

  def get_values(arg, arg1); end

  def hexdump(*arg); end

  def initialize(*arg); end

  def internal?(); end

  def locked(); end

  def locked?(); end

  def mapped?(); end

  def not!(); end

  def null?(); end

  def or!(arg); end

  def pread(*arg); end

  def private?(); end

  def pwrite(*arg); end

  def read(*arg); end

  def readonly?(); end

  def resize(arg); end

  def set_string(*arg); end

  def set_value(arg, arg1, arg2); end

  def set_values(arg, arg1, arg2); end

  def shared?(); end

  def size(); end

  def slice(*arg); end

  def transfer(); end

  def valid?(); end

  def values(*arg); end

  def write(*arg); end

  def xor!(arg); end

  def |(arg); end

  def ~(); end
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
  EXTERNAL = ::T.let(nil, ::T.untyped)
  HOST_ENDIAN = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAPPED = ::T.let(nil, ::T.untyped)
  NETWORK_ENDIAN = ::T.let(nil, ::T.untyped)
  PAGE_SIZE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  SHARED = ::T.let(nil, ::T.untyped)
end

class IO::Buffer::AccessError
end

class IO::Buffer::AccessError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::LockedError
end

class IO::Buffer::LockedError
end

class IO::Buffer::MaskError
end

class IO::Buffer::MaskError
end

class IO::Buffer
  def self.for(arg); end

  def self.map(*arg); end

  def self.size_of(arg); end

  def self.string(arg); end
end

class IO::ConsoleMode
  VERSION = ::T.let(nil, ::T.untyped)
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO::TimeoutError
end

class IO::TimeoutError
end

class IO
  def self.console(*arg); end

  def self.console_size(); end

  def self.new(*arg); end
end

class IPAddr
  def ==(other); end

  def begin_addr(); end

  def end_addr(); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end

  def netmask(); end

  def zone_id(); end

  def zone_id=(zid); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class IRB::BaseCompletor
  def command_candidates(target); end

  def completion_candidates(preposing, target, postposing, bind:); end

  def doc_namespace(preposing, matched, postposing, bind:); end

  def retrieve_files_to_require_from_load_path(); end

  def retrieve_files_to_require_relative_from_current_dir(); end

  def retrieve_gem_and_system_load_path(); end
  GEM_PATHS = ::T.let(nil, ::T.untyped)
  HELP_COMMAND_PREPOSING = ::T.let(nil, ::T.untyped)
  ReservedWords = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  DIM = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class IRB::ColorPrinter
  METHOD_INSPECT = ::T.let(nil, ::T.untyped)
  METHOD_RESPOND_TO = ::T.let(nil, ::T.untyped)
end

module IRB::Command
  NO_OVERRIDE = ::T.let(nil, ::T.untyped)
  OVERRIDE_ALL = ::T.let(nil, ::T.untyped)
  OVERRIDE_PRIVATE_ONLY = ::T.let(nil, ::T.untyped)
end

class IRB::Command::Backtrace
  def execute(arg); end
end

class IRB::Command::Base
  def execute(arg); end

  def initialize(irb_context); end

  def irb_context(); end
end

class IRB::Command::Base
  def self.execute(irb_context, arg); end
end

class IRB::Command::Break
  def execute(arg); end
end

class IRB::Command::Catch
  def execute(arg); end
end

class IRB::Command::Context
  def execute(_arg); end
end

class IRB::Command::Continue
  def execute(arg); end
end

class IRB::Command::CurrentWorkingWorkspace
  def execute(_arg); end
end

class IRB::Command::Debug
  def execute(_arg); end

  def execute_debug_command(pre_cmds: T.unsafe(nil), do_cmds: T.unsafe(nil)); end
end

class IRB::Command::DebugCommand
  def self.category(); end

  def self.description(); end
end

class IRB::Command::Delete
  def execute(arg); end
end

class IRB::Command::DisableIrb
  def execute(*arg); end
end

class IRB::Command::Exit
  def execute(_arg); end
end

class IRB::Command::Finish
  def execute(arg); end
end

class IRB::Command::ForceExit
  def execute(_arg); end
end

class IRB::Command::Foreground
  def execute_internal(key=T.unsafe(nil)); end
end

class IRB::Command::Help
  def execute(command_name); end
end

class IRB::Command::Info
  def execute(arg); end
end

class IRB::Command::IrbCommand
  def execute_internal(*obj); end
end

class IRB::Command::IrbInfo
  def execute(_arg); end
end

class IRB::Command::Jobs
  def execute(_arg); end
end

class IRB::Command::Kill
  def execute_internal(*keys); end
end

class IRB::Command::Load
  def execute_internal(file_name=T.unsafe(nil), priv=T.unsafe(nil)); end
end

class IRB::Command::LoaderCommand
  def raise_cmd_argument_error(); end
end

class IRB::Command::Ls
  def class_method_map(classes, dumped_mods); end

  def dump_methods(o, klass, obj); end
end

class IRB::Command::Measure
  def execute_internal(type=T.unsafe(nil), arg=T.unsafe(nil)); end

  def initialize(*args); end
end

class IRB::Command::Next
  def execute(arg); end
end

IRB::Command::Nop = IRB::Command::Base

class IRB::Command::PushWorkspace
  def execute(arg); end
end

class IRB::Command::Require
  def execute_internal(file_name=T.unsafe(nil)); end
end

module IRB::Command::RubyArgsExtractor
  def ruby_args(arg); end

  def unwrap_string_literal(str); end
end

class IRB::Command::Source
  def execute_internal(file_name=T.unsafe(nil)); end
end

class IRB::Command::Step
  def execute(arg); end
end

class IRB::Command::Whereami
  def execute(_arg); end
end

class IRB::Command::Workspaces
  def execute(_arg); end
end

module IRB::Command
  def self._register_with_aliases(name, command_class, *aliases); end

  def self.all_commands_info(); end

  def self.command_names(); end

  def self.command_override_policies(); end

  def self.execute_as_command?(name, public_method:, private_method:); end

  def self.extract_ruby_args(*args, **kwargs); end

  def self.load_command(command); end
end

class IRB::Context
  def __inspect__(); end

  def __to_s__(); end

  def change_workspace(*_main); end

  def command_aliases(); end

  def command_aliases=(command_aliases); end

  def echo_on_assignment(); end

  def echo_on_assignment=(echo_on_assignment); end

  def echo_on_assignment?(); end

  def evaluate(statement, line_no); end

  def evaluate_expression(code, line_no); end

  def extra_doc_dirs(); end

  def extra_doc_dirs=(extra_doc_dirs); end

  def from_binding?(); end

  def history_file(); end

  def history_file=(hist); end

  def home_workspace(); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def inspect_last_value(); end

  def newline_before_multiline_output(); end

  def newline_before_multiline_output=(newline_before_multiline_output); end

  def newline_before_multiline_output?(); end

  def pop_workspace(); end

  def push_workspace(*_main); end

  def replace_workspace(workspace); end

  def save_history(); end

  def use_autocomplete(); end

  def use_autocomplete?(); end

  def use_multiline(); end

  def use_multiline?(); end

  def use_reline(); end

  def use_reline?(); end

  def use_singleline(); end

  def use_singleline?(); end

  def with_debugger(); end

  def with_debugger=(with_debugger); end
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

module IRB::Debug
  IRB_DIR = ::T.let(nil, ::T.untyped)
end

module IRB::Debug
  def self.insert_debug_break(pre_cmds: T.unsafe(nil), do_cmds: T.unsafe(nil)); end

  def self.setup(irb); end
end

IRB::ExtendCommand = IRB::Command

class IRB::FileInputMethod
  def close(); end

  def initialize(file); end
end

class IRB::FileInputMethod
  def self.open(file, &block); end
end

class IRB::HelperMethod::Conf
  def execute(); end
end

module IRB::HelpersContainer
  def conf(*args, **opts, &block); end
end

module IRB::HelpersContainer
  def self.install_helper_methods(); end
end

module IRB::HistorySavingAbility
  def load_history(); end

  def reset_history_counter(); end

  def save_history(); end

  def support_history_saving?(); end
end

module IRB::InputCompletor
  CompletionProc = ::T.let(nil, ::T.untyped)
end

module IRB::InputCompletor
  def self.retrieve_completion_data(input, bind: T.unsafe(nil), doc_namespace: T.unsafe(nil)); end
end

class IRB::InputMethod
  def prompting?(); end

  def support_history_saving?(); end

  def winsize(); end
  BASIC_WORD_BREAK_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class IRB::Inspector
  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end
  KERNEL_INSPECT = ::T.let(nil, ::T.untyped)
end

class IRB::Irb
  def build_statement(code); end

  def command?(code); end

  def configure_io(); end

  def convert_invalid_byte_sequence(str, enc); end

  def debug_break(); end

  def debug_readline(binding); end

  def each_top_level_statement(); end

  def encode_with_invalid_byte_sequence(str, enc); end

  def from_binding(); end

  def handle_exception(exc); end

  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil), from_binding: T.unsafe(nil)); end

  def output_value(omit=T.unsafe(nil)); end

  def parse_command(code); end

  def read_input(prompt); end

  def readmultiline(); end
  ASSIGN_OPERATORS_REGEXP = ::T.let(nil, ::T.untyped)
  CONTROL_CHARACTERS_PATTERN = ::T.let(nil, ::T.untyped)
  PROMPT_MAIN_TRUNCATE_LENGTH = ::T.let(nil, ::T.untyped)
  PROMPT_MAIN_TRUNCATE_OMISSION = ::T.let(nil, ::T.untyped)
end

module IRB::IrbLoader
  def irb_load(fn, priv=T.unsafe(nil)); end

  def load_file(path, priv=T.unsafe(nil)); end

  def old(); end

  def search_file_from_ruby_path(fn); end

  def source_file(path); end
end

class IRB::Locale
  def String(mes); end

  def each_localized_path(dir, file); end

  def each_sublocale(); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def search_file(lib_paths, dir, file); end

  def territory(); end
  LEGACY_ENCODING_ALIAS_MAP = ::T.let(nil, ::T.untyped)
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

module IRB::NestingParser
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
end

class IRB::Pager
  PAGE_COMMANDS = ::T.let(nil, ::T.untyped)
end

class IRB::Pager
  def self.page(retain_content: T.unsafe(nil)); end

  def self.page_content(content, **options); end
end

class IRB::ReadlineInputMethod
  def completion_info(); end
end

class IRB::ReadlineInputMethod
  def self.initialize_readline(); end
end

class IRB::RegexpCompletor
  def complete_require_path(target, preposing, postposing); end

  def doc_namespace(_preposing, matched, _postposing, bind:); end

  def retrieve_completion_data(input, bind:, doc_namespace:); end

  def select_message(receiver, message, candidates, sep=T.unsafe(nil)); end
  Operators = ::T.let(nil, ::T.untyped)
end

class IRB::ReidlineInputMethod
  def initialize(); end
end

class IRB::RelineInputMethod
  def auto_indent(&block); end

  def check_termination(&block); end

  def completion_info(); end

  def display_document(matched); end

  def dynamic_prompt(&block); end

  def initialize(completor); end

  def rdoc_ri_driver(); end

  def retrieve_doc_namespace(matched); end

  def show_doc_dialog_proc(); end
  HISTORY = ::T.let(nil, ::T.untyped)
end

class IRB::RubyLex
  ASSIGNMENT_NODE_TYPES = ::T.let(nil, ::T.untyped)
  ERROR_TOKENS = ::T.let(nil, ::T.untyped)
  FREE_INDENT_TOKENS = ::T.let(nil, ::T.untyped)
  LTYPE_TOKENS = ::T.let(nil, ::T.untyped)
end

class IRB::SourceFinder
  def find_source(signature, super_level=T.unsafe(nil)); end

  def initialize(irb_context); end
end

class IRB::Statement
  def code(); end

  def is_assignment?(); end

  def should_be_handled_by_debugger?(); end

  def suppresses_echo?(); end
end

class IRB::Statement::Command
  def arg(); end

  def command_class(); end

  def initialize(original_code, command_class, arg); end
end

class IRB::Statement::Expression
  def initialize(code, is_assignment); end
end

class IRB::TypeCompletor
  def completion_candidates(preposing, target, _postposing, bind:); end

  def doc_namespace(preposing, matched, _postposing, bind:); end

  def initialize(context); end
end

class IRB::WorkSpace
  def initialize(*main); end

  def load_helper_methods_to_main(); end

  def local_variable_get(name); end

  def local_variable_set(name, value); end
end

module IRB
  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.initialized?(); end

  def self.irbrc_files(); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.raise_validation_error(msg); end

  def self.rc_file(ext); end

  def self.run_config(); end

  def self.set_measure_callback(type=T.unsafe(nil), arg=T.unsafe(nil), &block); end

  def self.unset_measure_callback(type=T.unsafe(nil)); end

  def self.validate_config(); end
end

class Integer
  def ceildiv(other); end

  def to_bn(); end
  GMP_VERSION = ::T.let(nil, ::T.untyped)
end

class Integer
  def self.try_convert(arg); end
end

class Item
  include ::Item::GeneratedAttributeMethods
  include ::Item::GeneratedAssociationMethods
end

module Item::GeneratedAssociationMethods
end

module Item::GeneratedAssociationMethods
end

module Item::GeneratedAttributeMethods
end

module Item::GeneratedAttributeMethods
end

class ItemCatalog
  include ::ItemCatalog::GeneratedAttributeMethods
  include ::ItemCatalog::GeneratedAssociationMethods
end

module ItemCatalog::GeneratedAssociationMethods
end

module ItemCatalog::GeneratedAssociationMethods
end

module ItemCatalog::GeneratedAttributeMethods
end

module ItemCatalog::GeneratedAttributeMethods
end

class JSON::Ext::Generator::State
  def escape_slash(); end

  def escape_slash=(escape_slash); end

  def escape_slash?(); end

  def script_safe(); end

  def script_safe=(script_safe); end

  def script_safe?(); end

  def strict(); end

  def strict=(strict); end

  def strict?(); end
end

class JSON::Ext::Generator::State
  def self.from_state(arg); end
end

class JSON::Ext::Parser
  def initialize(*arg); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  extend ::Bootsnap::CompileCache::JSON::Patch
  def self.create_fast_state(); end

  def self.create_pretty_state(); end
end

module Kernel
  include ::DEBUGGER__::TrapInterceptor
  def pretty_inspect(); end
end

module Kernel
  def self.at_exit(); end

  def self.exit(*arg); end

  def self.trap(*arg); end
end

class KeyError
  include ::DidYouMean::Correctable
end

class LoadError
  include ::DidYouMean::Correctable
end

class Logger
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  DatetimeFormat = ::T.let(nil, ::T.untyped)
  Format = ::T.let(nil, ::T.untyped)
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  INLINE_LINE_BREAK = ::T.let(nil, ::T.untyped)
  LINEBREAKERS = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

Loofah::HTML = Loofah::HTML4

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_COLORS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_EXTENDED_COLORS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ARIA_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_IMPORTANT = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
  CSS_PROPERTY_STRING_WITHOUT_EMBEDDED_QUOTES = ::T.let(nil, ::T.untyped)
  CSS_WHITESPACE = ::T.let(nil, ::T.untyped)
  DATA_ATTRIBUTE_NAME = ::T.let(nil, ::T.untyped)
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::BccField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LAX_CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  UNFOLD_WS = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Envelope
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
  def self.parse(string); end
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

module Mail::Parsers::ContentDispositionParser
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def disposition_type(); end

  def disposition_type=(_); end

  def error(); end

  def error=(_); end

  def parameters(); end

  def parameters=(_); end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentDispositionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentLocationParser
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def error(); end

  def error=(_); end

  def location(); end

  def location=(_); end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentLocationParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTransferEncodingParser
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def encoding(); end

  def encoding=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTransferEncodingParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTypeParser
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def error(); end

  def error=(_); end

  def main_type(); end

  def main_type=(_); end

  def parameters(); end

  def parameters=(_); end

  def sub_type(); end

  def sub_type=(_); end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTypeParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::EnvelopeFromParser
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def address(); end

  def address=(_); end

  def ctime_date(); end

  def ctime_date=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::EnvelopeFromParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MessageIdsParser
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def error(); end

  def error=(_); end

  def message_ids(); end

  def message_ids=(_); end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MessageIdsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MimeVersionParser
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def error(); end

  def error=(_); end

  def major(); end

  def major=(_); end

  def minor(); end

  def minor=(_); end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MimeVersionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::Parsers::PhraseListsParser
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def error(); end

  def error=(_); end

  def phrases(); end

  def phrases=(_); end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Mail::Parsers::PhraseListsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ReceivedParser
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def date(); end

  def date=(_); end

  def error(); end

  def error=(_); end

  def info(); end

  def info=(_); end

  def time(); end

  def time=(_); end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ReceivedParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::PartsList
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SmtpEnvelope
  MAX_ADDRESS_BYTESIZE = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Marcel
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  MAGIC = ::T.let(nil, ::T.untyped)
  TYPE_EXTS = ::T.let(nil, ::T.untyped)
  TYPE_PARENTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class Market
  include ::Market::GeneratedAttributeMethods
  include ::Market::GeneratedAssociationMethods
end

module Market::GeneratedAssociationMethods
end

module Market::GeneratedAssociationMethods
end

module Market::GeneratedAttributeMethods
end

module Market::GeneratedAttributeMethods
end

class MatchData
  def deconstruct(); end

  def deconstruct_keys(arg); end

  def match(arg); end

  def match_length(arg); end
end

class MessagePack::HeldBuffer
end

class MessagePack::HeldBuffer
end

module MessagePack::Time
  Packer = ::T.let(nil, ::T.untyped)
  TIME_AT_3_AVAILABLE = ::T.let(nil, ::T.untyped)
  Unpacker = ::T.let(nil, ::T.untyped)
end

class MessagePack::Timestamp
  TIMESTAMP32_MAX_SEC = ::T.let(nil, ::T.untyped)
  TIMESTAMP64_MAX_SEC = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

MiniMime::Db::PReadFile = File

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Minitest
  VERSION = ::T.let(nil, ::T.untyped)
end

class Minitest::Assertion
  RE = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

module Minitest::Reportable
  BASE_DIR = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  SETUP_METHODS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::UnexpectedError
  BASE_RE = ::T.let(nil, ::T.untyped)
end

class Module
  def set_temporary_name(arg); end

  def undefined_instance_methods(); end
end

Module::DelegationError = ActiveSupport::DelegationError

class Monitor
  def enter(); end

  def exit(); end

  def mon_check_owner(); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_locked?(); end

  def mon_owned?(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_enter(); end

  def try_mon_enter(); end

  def wait_for_cond(arg, arg1); end
end

module MonitorMixin
  def initialize(*arg, **arg1, &arg2); end
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NameError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::IMAP
  include ::Net::IMAP::DeprecatedClientOptions
  def auth_capable?(mechanism); end

  def auth_mechanisms(); end

  def capabilities(); end

  def capabilities_cached?(); end

  def capability?(capability); end

  def capable?(capability); end

  def clear_cached_capabilities(); end

  def clear_responses(type=T.unsafe(nil)); end

  def config(); end

  def enable(*capabilities); end

  def host(); end

  def id(client_id=T.unsafe(nil)); end

  def idle_response_timeout(); end

  def logout!(); end

  def namespace(); end

  def open_timeout(); end

  def port(); end

  def ssl_ctx(); end

  def ssl_ctx_params(); end

  def tls_verified?(); end

  def uid_expunge(uid_set); end

  def unselect(); end
  ALL = ::T.let(nil, ::T.untyped)
  ARCHIVE = ::T.let(nil, ::T.untyped)
  DRAFTS = ::T.let(nil, ::T.untyped)
  ENABLE_ALIASES = ::T.let(nil, ::T.untyped)
  HASCHILDREN = ::T.let(nil, ::T.untyped)
  HASNOCHILDREN = ::T.let(nil, ::T.untyped)
  HAS_CHILDREN = ::T.let(nil, ::T.untyped)
  HAS_NO_CHILDREN = ::T.let(nil, ::T.untyped)
  JUNK = ::T.let(nil, ::T.untyped)
  NONEXISTENT = ::T.let(nil, ::T.untyped)
  NO_INFERIORS = ::T.let(nil, ::T.untyped)
  NO_SELECT = ::T.let(nil, ::T.untyped)
  REMOTE = ::T.let(nil, ::T.untyped)
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
  SENT = ::T.let(nil, ::T.untyped)
  STRFDATE = ::T.let(nil, ::T.untyped)
  STRFTIME = ::T.let(nil, ::T.untyped)
  SUBSCRIBED = ::T.let(nil, ::T.untyped)
  TRASH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::Authenticators
  def add_authenticator(*arg, **arg1, &arg2); end

  def authenticator(*arg, **arg1, &arg2); end
end

module Net::IMAP::Authenticators
end

module Net::IMAP::BodyStructure
end

module Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeBasic
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeMessage
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeMultipart
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeText
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::ClientID
  def initialize(data); end

  def send_data(imap, tag); end

  def validate(); end
end

class Net::IMAP::ClientID
end

class Net::IMAP::Config
  include ::Net::IMAP::Config::AttrAccessors
  include ::Net::IMAP::Config::AttrInheritance
  include ::Net::IMAP::Config::AttrTypeCoercion
  def defaults_hash(); end

  def initialize(parent=T.unsafe(nil), **attrs); end

  def load_defaults(version); end

  def to_h(); end

  def update(**attrs); end

  def with(**attrs); end
end

module Net::IMAP::Config::AttrAccessors
  def data(); end

  def debug(*args, **arg, &block); end

  def debug=(*args, **arg, &block); end

  def freeze(); end

  def idle_response_timeout(*args, **arg, &block); end

  def idle_response_timeout=(*args, **arg, &block); end

  def initialize(); end

  def open_timeout(*args, **arg, &block); end

  def open_timeout=(*args, **arg, &block); end

  def responses_without_block(*args, **arg, &block); end

  def responses_without_block=(*args, **arg, &block); end

  def sasl_ir(*args, **arg, &block); end

  def sasl_ir=(*args, **arg, &block); end
end

class Net::IMAP::Config::AttrAccessors::Struct
  def debug(); end

  def debug=(_); end

  def idle_response_timeout(); end

  def idle_response_timeout=(_); end

  def open_timeout(); end

  def open_timeout=(_); end

  def responses_without_block(); end

  def responses_without_block=(_); end

  def sasl_ir(); end

  def sasl_ir=(_); end
end

class Net::IMAP::Config::AttrAccessors::Struct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Net::IMAP::Config::AttrAccessors
  extend ::Forwardable
  def self.attr_accessor(name); end

  def self.struct(); end
end

module Net::IMAP::Config::AttrInheritance
  def debug(); end

  def idle_response_timeout(); end

  def inherited?(attr); end

  def initialize(parent=T.unsafe(nil)); end

  def new(**attrs); end

  def open_timeout(); end

  def parent(); end

  def reset(attr=T.unsafe(nil)); end

  def responses_without_block(); end

  def sasl_ir(); end
end

module Net::IMAP::Config::AttrInheritance
  def self.attr_accessor(name); end
end

module Net::IMAP::Config::AttrTypeCoercion
  def debug=(val); end

  def debug?(); end

  def idle_response_timeout=(val); end

  def open_timeout=(val); end

  def responses_without_block=(val); end

  def sasl_ir=(val); end

  def sasl_ir?(); end
end

module Net::IMAP::Config::AttrTypeCoercion
  def self.attr_accessor(attr, type: T.unsafe(nil)); end

  def self.boolean(attr); end

  def self.enum(attr, enum); end

  def self.integer(attr); end
end

class Net::IMAP::Config
  def self.[](config); end

  def self.default(); end

  def self.global(); end

  def self.version_defaults(); end
end

module Net::IMAP::DeprecatedClientOptions
  def initialize(host, port_or_options=T.unsafe(nil), *deprecated, **options); end

  def starttls(*deprecated, **options); end
end

module Net::IMAP::DeprecatedClientOptions
end

class Net::IMAP::ExtensionData
end

class Net::IMAP::ExtensionData
end

class Net::IMAP::FetchData
  def attr_upcase(); end

  def binary(*part_nums, offset: T.unsafe(nil)); end

  def binary_size(*part_nums); end

  def body(); end

  def body_structure(); end

  def bodystructure(); end

  def emailid(); end

  def envelope(); end

  def flags(); end

  def header(*part_nums, fields: T.unsafe(nil), except: T.unsafe(nil), offset: T.unsafe(nil)); end

  def header_fields(first, *rest, part: T.unsafe(nil), offset: T.unsafe(nil)); end

  def header_fields_not(first, *rest, part: T.unsafe(nil), offset: T.unsafe(nil)); end

  def internal_date(); end

  def internaldate(); end

  def message(offset: T.unsafe(nil)); end

  def mime(part, *subparts, offset: T.unsafe(nil)); end

  def modseq(); end

  def part(index, *subparts, offset: T.unsafe(nil)); end

  def rfc822(); end

  def rfc822_header(); end

  def rfc822_size(); end

  def rfc822_text(); end

  def text(*part, offset: T.unsafe(nil)); end

  def threadid(); end

  def uid(); end
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::InvalidResponseError
end

class Net::IMAP::InvalidResponseError
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespaces
end

class Net::IMAP::Namespaces
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

class Net::IMAP::ResponseParser
  include ::Net::IMAP::ResponseParser::ParserUtils
  include ::Net::IMAP::ResponseParser::ResponseConditions
  def CRLF!(); end

  def CRLF?(); end

  def EOF!(); end

  def EOF?(); end

  def NIL!(); end

  def NIL?(); end

  def PLUS!(); end

  def PLUS?(); end

  def SP!(); end

  def SP?(); end

  def STAR!(); end

  def STAR?(); end

  def body_fld_enc(); end

  def body_fld_lines(); end

  def body_fld_octets(); end

  def case_insensitive__string(); end

  def case_insensitive__string?(); end

  def config(); end

  def date_time(); end

  def lbra(); end

  def lbra?(); end

  def lookahead_CRLF!(); end

  def lookahead_EOF!(); end

  def lookahead_NIL!(); end

  def lookahead_PLUS?(); end

  def lookahead_SP?(); end

  def lookahead_STAR?(); end

  def lookahead_body?(); end

  def lookahead_case_insensitive__string!(); end

  def lookahead_lbra?(); end

  def lookahead_lpar?(); end

  def lookahead_number!(); end

  def lookahead_quoted!(); end

  def lookahead_rbra?(); end

  def lookahead_rpar?(); end

  def lookahead_string!(); end

  def lookahead_string8!(); end

  def lookahead_tagged_ext_label!(); end

  def lookahead_thread_list?(); end

  def lookahead_thread_nested?(); end

  def lpar(); end

  def lpar?(); end

  def media_subtype(); end

  def mod_sequence_value(); end

  def mod_sequence_valzer(); end

  def number(); end

  def number64(); end

  def number64?(); end

  def number?(); end

  def nz_number(); end

  def nz_number64(); end

  def nz_number?(); end

  def peek_PLUS?(); end

  def peek_SP?(); end

  def peek_STAR?(); end

  def peek_lbra?(); end

  def peek_lpar?(); end

  def peek_rbra?(); end

  def peek_rpar?(); end

  def permsg_modsequence(); end

  def quirky_SP?(); end

  def quoted(); end

  def quoted?(); end

  def rbra(); end

  def rbra?(); end

  def rpar(); end

  def rpar?(); end

  def string(); end

  def string8(); end

  def string8?(); end

  def string?(); end

  def tagged_ext_label(); end

  def tagged_ext_label?(); end

  def uniqueid(); end

  def x_gm_id(); end
  ASTRING_CHARS_TOKENS = ::T.let(nil, ::T.untyped)
  ASTRING_TOKENS = ::T.let(nil, ::T.untyped)
  RE_RESPONSE_TYPE = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_TOKENS = ::T.let(nil, ::T.untyped)
  T_LITERAL8 = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ParserUtils
end

module Net::IMAP::ResponseParser::ParserUtils::Generator
  def def_char_matchers(name, char, token); end

  def def_token_matchers(name, *token_symbols, coerce: T.unsafe(nil), send: T.unsafe(nil)); end
  LOOKAHEAD = ::T.let(nil, ::T.untyped)
  SHIFT_TOKEN = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ParserUtils::Generator
end

module Net::IMAP::ResponseParser::ParserUtils
end

module Net::IMAP::ResponseParser::Patterns
  include ::Net::IMAP::ResponseParser::Patterns::RFC5234
  include ::Net::IMAP::ResponseParser::Patterns::RFC3629
  ASTRING_CHAR = ::T.let(nil, ::T.untyped)
  ASTRING_CHARS = ::T.let(nil, ::T.untyped)
  ASTRING_SPECIALS = ::T.let(nil, ::T.untyped)
  ATOM = ::T.let(nil, ::T.untyped)
  ATOMISH = ::T.let(nil, ::T.untyped)
  ATOM_CHAR = ::T.let(nil, ::T.untyped)
  ATOM_SPECIALS = ::T.let(nil, ::T.untyped)
  CHAR8 = ::T.let(nil, ::T.untyped)
  CODE_TEXT = ::T.let(nil, ::T.untyped)
  CODE_TEXT_CHAR = ::T.let(nil, ::T.untyped)
  FLAG = ::T.let(nil, ::T.untyped)
  FLAG_EXTENSION = ::T.let(nil, ::T.untyped)
  FLAG_KEYWORD = ::T.let(nil, ::T.untyped)
  FLAG_LIST = ::T.let(nil, ::T.untyped)
  FLAG_PERM = ::T.let(nil, ::T.untyped)
  FLAG_PERM_LIST = ::T.let(nil, ::T.untyped)
  LIST_WILDCARDS = ::T.let(nil, ::T.untyped)
  LITERAL = ::T.let(nil, ::T.untyped)
  LITERAL8 = ::T.let(nil, ::T.untyped)
  MBX_FLAG = ::T.let(nil, ::T.untyped)
  MBX_LIST_FLAGS = ::T.let(nil, ::T.untyped)
  NZ_NUMBER = ::T.let(nil, ::T.untyped)
  QUIRKY_FLAG = ::T.let(nil, ::T.untyped)
  QUIRKY_FLAGS_LIST = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_esc = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_rev1 = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_rev2 = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_safe = ::T.let(nil, ::T.untyped)
  QUOTED_SPECIALS = ::T.let(nil, ::T.untyped)
  QUOTED_rev1 = ::T.let(nil, ::T.untyped)
  QUOTED_rev2 = ::T.let(nil, ::T.untyped)
  RESP_SPECIALS = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_ITEM = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_STR = ::T.let(nil, ::T.untyped)
  SEQ_NUMBER = ::T.let(nil, ::T.untyped)
  SEQ_RANGE = ::T.let(nil, ::T.untyped)
  TAG = ::T.let(nil, ::T.untyped)
  TAGGED_EXT_LABEL = ::T.let(nil, ::T.untyped)
  TAGGED_LABEL_CHAR = ::T.let(nil, ::T.untyped)
  TAGGED_LABEL_FCHAR = ::T.let(nil, ::T.untyped)
  TEXT_CHAR = ::T.let(nil, ::T.untyped)
  TEXT_rev1 = ::T.let(nil, ::T.untyped)
  TEXT_rev2 = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::CharClassSubtraction
end

module Net::IMAP::ResponseParser::Patterns::CharClassSubtraction
end

module Net::IMAP::ResponseParser::Patterns::RFC3629
  UTF8_1 = ::T.let(nil, ::T.untyped)
  UTF8_2 = ::T.let(nil, ::T.untyped)
  UTF8_3 = ::T.let(nil, ::T.untyped)
  UTF8_4 = ::T.let(nil, ::T.untyped)
  UTF8_CHAR = ::T.let(nil, ::T.untyped)
  UTF8_OCTETS = ::T.let(nil, ::T.untyped)
  UTF8_TAIL = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::RFC3629
end

module Net::IMAP::ResponseParser::Patterns::RFC5234
  ALPHA = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CTL = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  DQUOTE = ::T.let(nil, ::T.untyped)
  HEXDIG = ::T.let(nil, ::T.untyped)
  OCTET = ::T.let(nil, ::T.untyped)
  SP = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::RFC5234
end

module Net::IMAP::ResponseParser::Patterns
  def self.unescape_quoted(quoted); end

  def self.unescape_quoted!(quoted); end
end

module Net::IMAP::ResponseParser::ResponseConditions
  AUTH_CONDS = ::T.let(nil, ::T.untyped)
  BAD = ::T.let(nil, ::T.untyped)
  BYE = ::T.let(nil, ::T.untyped)
  GREETING_CONDS = ::T.let(nil, ::T.untyped)
  NO = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  PREAUTH = ::T.let(nil, ::T.untyped)
  RESP_CONDS = ::T.let(nil, ::T.untyped)
  RESP_COND_STATES = ::T.let(nil, ::T.untyped)
  RESP_DATA_CONDS = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ResponseConditions
end

class Net::IMAP::ResponseParser::Token
  def self.keyword_init?(); end
end

class Net::IMAP::ResponseParser
  extend ::Net::IMAP::ResponseParser::ParserUtils::Generator
end

class Net::IMAP::ResponseText
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::SASL
end

class Net::IMAP::SASL::AnonymousAuthenticator
  def anonymous_message(); end

  def done?(); end

  def initial_response?(); end

  def initialize(anon_msg=T.unsafe(nil), anonymous_message: T.unsafe(nil), **arg); end

  def process(_server_challenge_string); end
end

class Net::IMAP::SASL::AnonymousAuthenticator
end

class Net::IMAP::SASL::AuthenticationCanceled
end

class Net::IMAP::SASL::AuthenticationCanceled
end

class Net::IMAP::SASL::AuthenticationError
end

class Net::IMAP::SASL::AuthenticationError
end

class Net::IMAP::SASL::AuthenticationExchange
  def authenticate(); end

  def authenticator(); end

  def done?(); end

  def initialize(client, mechanism, authenticator, sasl_ir: T.unsafe(nil)); end

  def mechanism(); end

  def send_initial_response?(); end
end

class Net::IMAP::SASL::AuthenticationExchange
  def self.authenticate(*arg, **arg1, &arg2); end

  def self.build(client, mechanism, *args, sasl_ir: T.unsafe(nil), **kwargs, &block); end
end

class Net::IMAP::SASL::AuthenticationFailed
end

class Net::IMAP::SASL::AuthenticationFailed
end

class Net::IMAP::SASL::AuthenticationIncomplete
  def initialize(response, message=T.unsafe(nil)); end

  def response(); end
end

class Net::IMAP::SASL::AuthenticationIncomplete
end

class Net::IMAP::SASL::Authenticators
  def add_authenticator(name, authenticator=T.unsafe(nil)); end

  def authenticator(mechanism, *arg, **arg1, &arg2); end

  def initialize(use_defaults: T.unsafe(nil), use_deprecated: T.unsafe(nil)); end

  def mechanism?(name); end

  def names(); end

  def new(mechanism, *arg, **arg1, &arg2); end

  def remove_authenticator(name); end
end

class Net::IMAP::SASL::Authenticators
end

Net::IMAP::SASL::BidiStringError = Net::IMAP::StringPrep::BidiStringError

class Net::IMAP::SASL::ClientAdapter
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def auth_capable?(mechanism); end

  def authenticate(*arg, **arg1, &arg2); end

  def client(); end

  def command_proc(); end

  def drop_connection(); end

  def drop_connection!(); end

  def initialize(client, &command_proc); end

  def response_errors(); end

  def run_command(mechanism, initial_response=T.unsafe(nil), &block); end

  def sasl_ir_capable?(); end
end

class Net::IMAP::SASL::ClientAdapter
end

class Net::IMAP::SASL::CramMD5Authenticator
  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def process(challenge); end
end

class Net::IMAP::SASL::CramMD5Authenticator
end

class Net::IMAP::SASL::DigestMD5Authenticator
  def authcid(); end

  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authz=T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), authzid: T.unsafe(nil), authcid: T.unsafe(nil), secret: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def password(); end

  def process(challenge); end

  def username(); end
end

class Net::IMAP::SASL::DigestMD5Authenticator
end

class Net::IMAP::SASL::Error
end

class Net::IMAP::SASL::Error
end

class Net::IMAP::SASL::ExternalAuthenticator
  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), authzid: T.unsafe(nil), username: T.unsafe(nil), **arg); end

  def process(_); end

  def username(); end
end

class Net::IMAP::SASL::ExternalAuthenticator
end

module Net::IMAP::SASL::GS2Header
  def gs2_authzid(); end

  def gs2_cb_flag(); end

  def gs2_header(); end
  NO_NULL_CHARS = ::T.let(nil, ::T.untyped)
  RFC5801_SASLNAME = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::SASL::GS2Header
  def self.gs2_saslname_encode(str); end
end

class Net::IMAP::SASL::LoginAuthenticator
  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def process(data); end
end

class Net::IMAP::SASL::LoginAuthenticator
end

class Net::IMAP::SASL::OAuthAuthenticator
  include ::Net::IMAP::SASL::GS2Header
  def authorization(); end

  def authzid(); end

  def done?(); end

  def host(); end

  def initial_client_response(); end

  def initialize(authzid: T.unsafe(nil), host: T.unsafe(nil), port: T.unsafe(nil), username: T.unsafe(nil), query: T.unsafe(nil), mthd: T.unsafe(nil), path: T.unsafe(nil), post: T.unsafe(nil), qs: T.unsafe(nil), **arg); end

  def last_server_response(); end

  def mthd(); end

  def path(); end

  def port(); end

  def post(); end

  def process(data); end

  def qs(); end

  def query(); end

  def username(); end
end

class Net::IMAP::SASL::OAuthAuthenticator
end

class Net::IMAP::SASL::OAuthBearerAuthenticator
  def initial_response?(); end

  def initialize(arg1=T.unsafe(nil), arg2=T.unsafe(nil), oauth2_token: T.unsafe(nil), secret: T.unsafe(nil), **args, &blk); end

  def oauth2_token(); end

  def secret(); end
end

class Net::IMAP::SASL::OAuthBearerAuthenticator
end

class Net::IMAP::SASL::PlainAuthenticator
  def authcid(); end

  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), secret: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), authzid: T.unsafe(nil), **arg); end

  def password(); end

  def process(data); end

  def secret(); end

  def username(); end
end

class Net::IMAP::SASL::PlainAuthenticator
end

Net::IMAP::SASL::ProhibitedCodepoint = Net::IMAP::StringPrep::ProhibitedCodepoint

module Net::IMAP::SASL::ProtocolAdapters
end

module Net::IMAP::SASL::ProtocolAdapters::Generic
  def cancel_response(); end

  def command_name(); end

  def decode(string); end

  def encode(string); end

  def encode_ir(string); end

  def host(); end

  def port(); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::Generic
end

module Net::IMAP::SASL::ProtocolAdapters::IMAP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::IMAP
end

module Net::IMAP::SASL::ProtocolAdapters::POP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def command_name(); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::POP
end

module Net::IMAP::SASL::ProtocolAdapters::SMTP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def command_name(); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::SMTP
end

module Net::IMAP::SASL::ProtocolAdapters
end

Net::IMAP::SASL::SASLprep = Net::IMAP::StringPrep::SASLprep

module Net::IMAP::SASL::ScramAlgorithm
  def H(str); end

  def HMAC(key, data); end

  def Hi(str, salt, iterations); end

  def Normalize(str); end

  def XOR(str1, str2); end

  def auth_message(); end

  def client_key(); end

  def client_proof(); end

  def client_signature(); end

  def salted_password(); end

  def server_key(); end

  def server_signature(); end

  def stored_key(); end
end

module Net::IMAP::SASL::ScramAlgorithm
end

class Net::IMAP::SASL::ScramAuthenticator
  include ::Net::IMAP::SASL::GS2Header
  include ::Net::IMAP::SASL::ScramAlgorithm
  def authcid(); end

  def authzid(); end

  def cbind_input(); end

  def cnonce(); end

  def digest(); end

  def done?(); end

  def initial_client_response(); end

  def initialize(username_arg=T.unsafe(nil), password_arg=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), authzid: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), min_iterations: T.unsafe(nil), cnonce: T.unsafe(nil), **options); end

  def iterations(); end

  def min_iterations(); end

  def password(); end

  def process(challenge); end

  def salt(); end

  def secret(); end

  def server_error(); end

  def snonce(); end

  def username(); end
end

class Net::IMAP::SASL::ScramAuthenticator
end

class Net::IMAP::SASL::ScramSHA1Authenticator
  DIGEST_NAME = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASL::ScramSHA1Authenticator
end

class Net::IMAP::SASL::ScramSHA256Authenticator
  DIGEST_NAME = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASL::ScramSHA256Authenticator
end

Net::IMAP::SASL::StringPrep = Net::IMAP::StringPrep

Net::IMAP::SASL::StringPrepError = Net::IMAP::StringPrep::StringPrepError

class Net::IMAP::SASL::XOAuth2Authenticator
  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), token=T.unsafe(nil), username: T.unsafe(nil), oauth2_token: T.unsafe(nil), authzid: T.unsafe(nil), secret: T.unsafe(nil), **arg); end

  def oauth2_token(); end

  def process(_data); end

  def secret(); end

  def username(); end
end

class Net::IMAP::SASL::XOAuth2Authenticator
end

module Net::IMAP::SASL
  def self.add_authenticator(*arg, **arg1, &arg2); end

  def self.authenticator(*args, registry: T.unsafe(nil), **kwargs, &block); end

  def self.authenticators(); end

  def self.saslprep(string, **opts); end
end

class Net::IMAP::SASLAdapter
  include ::Net::IMAP::SASL::ProtocolAdapters::IMAP
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASLAdapter
end

class Net::IMAP::SearchResult
  def ==(other); end

  def eql?(other); end

  def initialize(seq_nums, modseq: T.unsafe(nil)); end

  def modseq(); end

  def pretty_print(pp); end

  def to_s(type=T.unsafe(nil)); end

  def to_sequence_set(); end
end

class Net::IMAP::SearchResult
  def self.[](*seq_nums, modseq: T.unsafe(nil)); end
end

class Net::IMAP::SequenceSet
  def &(other); end

  def +(other); end

  def -(other); end

  def <<(object); end

  def ==(other); end

  def ===(other); end

  def [](index, length=T.unsafe(nil)); end

  def ^(other); end

  def add(object); end

  def add?(object); end

  def append(object); end

  def at(index); end

  def clear(); end

  def complement(); end

  def complement!(); end

  def count(); end

  def cover?(other); end

  def delete(object); end

  def delete?(object); end

  def delete_at(index); end

  def difference(other); end

  def disjoint?(other); end

  def each_element(); end

  def each_entry(&block); end

  def each_number(&block); end

  def each_range(); end

  def elements(); end

  def empty?(); end

  def entries(); end

  def eql?(other); end

  def find_index(number); end

  def full?(); end

  def include?(element); end

  def include_star?(); end

  def initialize(input=T.unsafe(nil)); end

  def intersect?(other); end

  def intersection(other); end

  def limit(max:); end

  def limit!(max:); end

  def max(star: T.unsafe(nil)); end

  def member?(element); end

  def merge(*inputs); end

  def min(star: T.unsafe(nil)); end

  def minmax(star: T.unsafe(nil)); end

  def normalize(); end

  def normalize!(); end

  def normalized_string(); end

  def numbers(); end

  def overlap?(other); end

  def ranges(); end

  def replace(other); end

  def send_data(imap, tag); end

  def size(); end

  def slice(index, length=T.unsafe(nil)); end

  def slice!(index, length=T.unsafe(nil)); end

  def string(); end

  def string=(str); end

  def subtract(*objects); end

  def to_a(); end

  def to_sequence_set(); end

  def to_set(); end

  def tuples(); end

  def union(other); end

  def valid?(); end

  def valid_string(); end

  def validate(); end

  def xor(other); end

  def |(other); end

  def ~(); end
  UINT32_MAX = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SequenceSet
  def self.[](first, *rest); end

  def self.empty(); end

  def self.full(); end

  def self.try_convert(obj); end
end

module Net::IMAP::StringFormatter
  LITERAL_REGEX = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringFormatter
  def self.nstring(str); end

  def self.string(str); end

  def self.valid_nstring?(str); end

  def self.valid_string?(str); end
end

module Net::IMAP::StringPrep
end

class Net::IMAP::StringPrep::BidiStringError
end

class Net::IMAP::StringPrep::BidiStringError
end

module Net::IMAP::StringPrep::NamePrep
  CHECK_BIDI = ::T.let(nil, ::T.untyped)
  MAPPING_TABLES = ::T.let(nil, ::T.untyped)
  NORMALIZATION = ::T.let(nil, ::T.untyped)
  PROHIBITED_TABLES = ::T.let(nil, ::T.untyped)
  STRINGPREP_PROFILE = ::T.let(nil, ::T.untyped)
  UNASSIGNED_TABLE = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::NamePrep
  def self.nameprep(string, **opts); end
end

class Net::IMAP::StringPrep::ProhibitedCodepoint
  def initialize(table, *args, **kwargs); end

  def table(); end
end

class Net::IMAP::StringPrep::ProhibitedCodepoint
end

module Net::IMAP::StringPrep::SASLprep
  ASCII_NO_CTRLS = ::T.let(nil, ::T.untyped)
  BIDI_FAILURE = ::T.let(nil, ::T.untyped)
  MAP_TO_NOTHING = ::T.let(nil, ::T.untyped)
  MAP_TO_SPACE = ::T.let(nil, ::T.untyped)
  PROHIBITED = ::T.let(nil, ::T.untyped)
  PROHIBITED_OUTPUT = ::T.let(nil, ::T.untyped)
  PROHIBITED_OUTPUT_STORED = ::T.let(nil, ::T.untyped)
  PROHIBITED_STORED = ::T.let(nil, ::T.untyped)
  TABLES_PROHIBITED = ::T.let(nil, ::T.untyped)
  TABLES_PROHIBITED_STORED = ::T.let(nil, ::T.untyped)
  UNASSIGNED = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::SASLprep
  def self.saslprep(str, stored: T.unsafe(nil), exception: T.unsafe(nil)); end
end

class Net::IMAP::StringPrep::StringPrepError
  def initialize(*args, string: T.unsafe(nil), profile: T.unsafe(nil)); end

  def profile(); end

  def string(); end
end

class Net::IMAP::StringPrep::StringPrepError
end

module Net::IMAP::StringPrep::Tables
  BIDI_DESC_REQ2 = ::T.let(nil, ::T.untyped)
  BIDI_DESC_REQ3 = ::T.let(nil, ::T.untyped)
  BIDI_FAILS_REQ2 = ::T.let(nil, ::T.untyped)
  BIDI_FAILS_REQ3 = ::T.let(nil, ::T.untyped)
  BIDI_FAILURE = ::T.let(nil, ::T.untyped)
  IN_A_1 = ::T.let(nil, ::T.untyped)
  IN_B_1 = ::T.let(nil, ::T.untyped)
  IN_B_2 = ::T.let(nil, ::T.untyped)
  IN_B_3 = ::T.let(nil, ::T.untyped)
  IN_C_1_1 = ::T.let(nil, ::T.untyped)
  IN_C_1_2 = ::T.let(nil, ::T.untyped)
  IN_C_2_1 = ::T.let(nil, ::T.untyped)
  IN_C_2_2 = ::T.let(nil, ::T.untyped)
  IN_C_3 = ::T.let(nil, ::T.untyped)
  IN_C_4 = ::T.let(nil, ::T.untyped)
  IN_C_5 = ::T.let(nil, ::T.untyped)
  IN_C_6 = ::T.let(nil, ::T.untyped)
  IN_C_7 = ::T.let(nil, ::T.untyped)
  IN_C_8 = ::T.let(nil, ::T.untyped)
  IN_C_9 = ::T.let(nil, ::T.untyped)
  IN_D_1 = ::T.let(nil, ::T.untyped)
  IN_D_1_NEGATED = ::T.let(nil, ::T.untyped)
  IN_D_2 = ::T.let(nil, ::T.untyped)
  MAPPINGS = ::T.let(nil, ::T.untyped)
  MAP_B_1 = ::T.let(nil, ::T.untyped)
  MAP_B_2 = ::T.let(nil, ::T.untyped)
  MAP_B_3 = ::T.let(nil, ::T.untyped)
  REGEXPS = ::T.let(nil, ::T.untyped)
  TITLES = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::Tables
end

module Net::IMAP::StringPrep::Trace
  CHECK_BIDI = ::T.let(nil, ::T.untyped)
  MAPPING_TABLES = ::T.let(nil, ::T.untyped)
  NORMALIZATION = ::T.let(nil, ::T.untyped)
  PROHIBITED_TABLES = ::T.let(nil, ::T.untyped)
  STRINGPREP_PROFILE = ::T.let(nil, ::T.untyped)
  UNASSIGNED_TABLE = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::Trace
  def self.stringprep_trace(string, **opts); end
end

module Net::IMAP::StringPrep
  def self.[](table); end

  def self.check_bidi!(string, c_8: T.unsafe(nil), profile: T.unsafe(nil)); end

  def self.check_prohibited!(string, *tables, bidi: T.unsafe(nil), unassigned: T.unsafe(nil), stored: T.unsafe(nil), profile: T.unsafe(nil)); end

  def self.map_tables!(string, *tables); end

  def self.stringprep(string, maps:, normalization:, prohibited:, **opts); end
end

class Net::IMAP::ThreadMember
  def all_seqnos(node=T.unsafe(nil)); end

  def to_sequence_set(); end
end

class Net::IMAP::UIDPlusData
  def uid_mapping(); end
end

class Net::IMAP::UIDPlusData
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP::UnparsedData
end

class Net::IMAP::UnparsedData
end

class Net::IMAP::UnparsedNumericResponseData
end

class Net::IMAP::UnparsedNumericResponseData
end

Net::IMAP::XOauth2Authenticator = Net::IMAP::SASL::XOAuth2Authenticator

class Net::IMAP
  extend ::Net::IMAP::Authenticators
  def self.config(); end

  def self.decode_date(string); end

  def self.decode_datetime(string); end

  def self.decode_time(string); end

  def self.encode_date(date); end

  def self.encode_datetime(time); end

  def self.encode_time(time); end

  def self.format_time(time); end

  def self.parse_date(string); end

  def self.parse_datetime(string); end

  def self.parse_time(string); end

  def self.saslprep(string, **opts); end
end

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP::AuthCramMD5
  CRAM_BUFSIZE = ::T.let(nil, ::T.untyped)
  IMASK = ::T.let(nil, ::T.untyped)
  OMASK = ::T.let(nil, ::T.untyped)
end

Net::SMTPSession = Net::SMTP

class NilClass
  def =~(arg); end
end

class NoMatchingPatternKeyError
  include ::DidYouMean::Correctable
  def key(); end

  def matchee(); end
end

class NoMatchingPatternKeyError
end

module Nokogiri
  LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  LIBXML_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_MEMORY_MANAGEMENT = ::T.let(nil, ::T.untyped)
  LIBXSLT_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_DATETIME_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  OTHER_LIBRARY_VERSIONS = ::T.let(nil, ::T.untyped)
  PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  CACHE_SWITCH_NAME = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::XPathVisitor
  WILDCARD_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::BuiltinsConfig
  ALWAYS = ::T.let(nil, ::T.untyped)
  NEVER = ::T.let(nil, ::T.untyped)
  OPTIMAL = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::DoctypeConfig
  HTML4 = ::T.let(nil, ::T.untyped)
  HTML5 = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
  XML = ::T.let(nil, ::T.untyped)
end

module Nokogiri::ClassResolver
  VALID_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

class Nokogiri::EncodingHandler
  USEFUL_ALIASES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Gumbo
  DEFAULT_MAX_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML4
end

class Nokogiri::HTML4::ElementDescription
end

Nokogiri::HTML::ElementDescription::Desc = Struct::HTMLElementDescription

class Nokogiri::HTML4::ElementDescription
end

module Nokogiri::HTML4
end

module Nokogiri::HTML4
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML4::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML5::QuirksMode
  LIMITED_QUIRKS = ::T.let(nil, ::T.untyped)
  NO_QUIRKS = ::T.let(nil, ::T.untyped)
  QUIRKS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Builder
  DEFAULT_DOCUMENT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DECONSTRUCT_KEYS = ::T.let(nil, ::T.untyped)
  DECONSTRUCT_METHODS = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::PP::Node
  COLLECTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  BIG_LINES = ::T.let(nil, ::T.untyped)
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_SCHEMA = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DEFAULT_XSLT = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::XPath
  CURRENT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  ROOT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  SUBTREE_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
end

class Numeric
  ZETTABYTE = ::T.let(nil, ::T.untyped)
end

class Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::DEBUGGER__::TrapInterceptor
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class ObjectSpace::InternalObjectWrapper
  def internal_object_id(); end

  def type(); end
end

class ObjectSpace::InternalObjectWrapper
end

class ObjectSpace::WeakMap
  def delete(arg); end
end

module ObjectSpace
  def self.allocation_class_path(arg); end

  def self.allocation_generation(arg); end

  def self.allocation_method_id(arg); end

  def self.allocation_sourcefile(arg); end

  def self.allocation_sourceline(arg); end

  def self.count_nodes(*arg); end

  def self.count_symbols(*arg); end

  def self.dump(obj, output: T.unsafe(nil)); end

  def self.dump_all(output: T.unsafe(nil), full: T.unsafe(nil), since: T.unsafe(nil), shapes: T.unsafe(nil)); end

  def self.dump_shapes(output: T.unsafe(nil), since: T.unsafe(nil)); end

  def self.internal_class_of(arg); end

  def self.internal_super_of(arg); end

  def self.reachable_objects_from(arg); end

  def self.reachable_objects_from_root(); end

  def self.trace_object_allocations(); end

  def self.trace_object_allocations_debug_start(); end
end

module Open3
  VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(arg); end

  def abs(); end

  def get_flags(arg); end

  def mod_sqrt(arg); end

  def negative?(); end

  def set_flags(arg); end
  CONSTTIME = ::T.let(nil, ::T.untyped)
end

module OpenSSL::Buffering
  def getbyte(); end
end

class OpenSSL::Buffering::Buffer
  def <<(string); end

  def concat(string); end

  def initialize(); end
  BINARY = ::T.let(nil, ::T.untyped)
end

class OpenSSL::Buffering::Buffer
end

class OpenSSL::Cipher
  def ccm_data_len=(ccm_data_len); end
end

class OpenSSL::HMAC
  def ==(other); end
end

module OpenSSL::Marshal
  def _dump(_level); end
end

module OpenSSL::Marshal::ClassMethods
  def _load(string); end
end

module OpenSSL::Marshal::ClassMethods
end

module OpenSSL::Marshal
  def self.included(base); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::DH
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DH
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::DSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::EC
  include ::OpenSSL::Marshal
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def add(arg); end

  def to_octet_string(arg); end
end

class OpenSSL::PKey::EC
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::PKey::PKey
  def compare?(arg); end

  def decrypt(*arg); end

  def derive(*arg); end

  def encrypt(*arg); end

  def oid(); end

  def private_to_der(*arg); end

  def private_to_pem(*arg); end

  def public_to_der(); end

  def public_to_pem(); end

  def raw_private_key(); end

  def raw_public_key(); end

  def sign_raw(*arg); end

  def to_text(); end

  def verify_raw(*arg); end

  def verify_recover(*arg); end
end

class OpenSSL::PKey::RSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::RSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

module OpenSSL::PKey
  def self.generate_key(*arg); end

  def self.generate_parameters(*arg); end

  def self.new_raw_private_key(arg, arg1); end

  def self.new_raw_public_key(arg, arg1); end
end

class OpenSSL::Provider
  def name(); end

  def unload(); end
end

class OpenSSL::Provider::ProviderError
end

class OpenSSL::Provider::ProviderError
end

class OpenSSL::Provider
  def self.load(arg); end

  def self.provider_names(); end
end

module OpenSSL::SSL
  OP_ALLOW_CLIENT_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CLEANSE_PLAINTEXT = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_DISABLE_TLSEXT_CA_NAMES = ::T.let(nil, ::T.untyped)
  OP_ENABLE_KTLS = ::T.let(nil, ::T.untyped)
  OP_ENABLE_MIDDLEBOX_COMPAT = ::T.let(nil, ::T.untyped)
  OP_IGNORE_UNEXPECTED_EOF = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ANTI_REPLAY = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_PRIORITIZE_CHACHA = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

module OpenSSL::Timestamp
end

class OpenSSL::Timestamp::Factory
  def additional_certs(); end

  def additional_certs=(additional_certs); end

  def allowed_digests(); end

  def allowed_digests=(allowed_digests); end

  def create_timestamp(arg, arg1, arg2); end

  def default_policy_id(); end

  def default_policy_id=(default_policy_id); end

  def gen_time(); end

  def gen_time=(gen_time); end

  def serial_number(); end

  def serial_number=(serial_number); end
end

class OpenSSL::Timestamp::Factory
end

class OpenSSL::Timestamp::Request
  def algorithm(); end

  def algorithm=(algorithm); end

  def cert_requested=(cert_requested); end

  def cert_requested?(); end

  def initialize(*arg); end

  def message_imprint(); end

  def message_imprint=(message_imprint); end

  def nonce(); end

  def nonce=(nonce); end

  def policy_id(); end

  def policy_id=(policy_id); end

  def to_der(); end

  def version(); end

  def version=(version); end
end

class OpenSSL::Timestamp::Request
end

class OpenSSL::Timestamp::Response
  def failure_info(); end

  def initialize(arg); end

  def status(); end

  def status_text(); end

  def to_der(); end

  def token(); end

  def token_info(); end

  def tsa_certificate(); end

  def verify(*arg); end
  GRANTED = ::T.let(nil, ::T.untyped)
  GRANTED_WITH_MODS = ::T.let(nil, ::T.untyped)
  REJECTION = ::T.let(nil, ::T.untyped)
  REVOCATION_NOTIFICATION = ::T.let(nil, ::T.untyped)
  REVOCATION_WARNING = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class OpenSSL::Timestamp::Response
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TokenInfo
  def algorithm(); end

  def gen_time(); end

  def initialize(arg); end

  def message_imprint(); end

  def nonce(); end

  def ordering(); end

  def policy_id(); end

  def serial_number(); end

  def to_der(); end

  def version(); end
end

class OpenSSL::Timestamp::TokenInfo
end

module OpenSSL::Timestamp
end

module OpenSSL::X509
  V_ERR_CA_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_CA_MD_TOO_WEAK = ::T.let(nil, ::T.untyped)
  V_ERR_CRL_PATH_VALIDATION_ERROR = ::T.let(nil, ::T.untyped)
  V_ERR_DANE_NO_MATCH = ::T.let(nil, ::T.untyped)
  V_ERR_DIFFERENT_CRL_SCOPE = ::T.let(nil, ::T.untyped)
  V_ERR_EE_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_EMAIL_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_EXCLUDED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_HOSTNAME_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_CALL = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_NON_CA = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_POLICY_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_IP_ADDRESS_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_CRL_SIGN = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = ::T.let(nil, ::T.untyped)
  V_ERR_NO_EXPLICIT_POLICY = ::T.let(nil, ::T.untyped)
  V_ERR_NO_VALID_SCTS = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_CERT_UNKNOWN = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_FAILED = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_NEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PATH_LOOP = ::T.let(nil, ::T.untyped)
  V_ERR_PERMITTED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_PATH_LENGTH_EXCEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_SUBJECT_NAME_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_STORE_LOOKUP = ::T.let(nil, ::T.untyped)
  V_ERR_SUBTREE_MINMAX = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_CURVE = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_VERSION = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_LOS_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_UNABLE_TO_GET_CRL_ISSUER = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNNESTED_RESOURCE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSPECIFIED = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_EXTENSION_FEATURE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_NAME_SYNTAX = ::T.let(nil, ::T.untyped)
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_PARTIAL_CHAIN = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS_ONLY = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_192_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
  V_FLAG_USE_CHECK_TIME = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Attribute
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::CRL
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def ==(other); end
end

class OpenSSL::X509::CRL
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Certificate
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
end

class OpenSSL::X509::Certificate
  extend ::OpenSSL::Marshal::ClassMethods
  def self.load(arg); end

  def self.load_file(path); end
end

class OpenSSL::X509::Extension
  include ::OpenSSL::Marshal
  def ==(other); end

  def value_der(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
  def ca_issuer_uris(); end

  def ocsp_uris(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def authority_key_identifier(); end
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
end

module OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::Helpers
  def crl_uris(); end
end

module OpenSSL::X509::Extension::CRLDistributionPoints
end

module OpenSSL::X509::Extension::Helpers
  def find_extension(oid); end
end

module OpenSSL::X509::Extension::Helpers
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def subject_key_identifier(); end
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
end

class OpenSSL::X509::Extension
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Name
  include ::OpenSSL::Marshal
  def to_utf8(); end
end

class OpenSSL::X509::Name
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Request
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Request
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenStruct
  def __id__!(); end

  def __send__!(*arg); end

  def as_json!(options=T.unsafe(nil)); end

  def at_exit!(&block); end

  def class!(); end

  def class_eval!(*args, &block); end

  def clone!(freeze: T.unsafe(nil)); end

  def debugger!(pre: T.unsafe(nil), do: T.unsafe(nil), up_level: T.unsafe(nil)); end

  def deep_dup!(); end

  def define_singleton_method!(*arg); end

  def delete_field!(name, &block); end

  def dig!(name, *names); end

  def display!(*arg); end

  def dup!(); end

  def each_pair!(); end

  def encode_with(coder); end

  def encode_with!(coder); end

  def enum_for!(*arg); end

  def exit!(*arg); end

  def extend!(mod, *args); end

  def freeze!(); end

  def gem!(dep, *reqs); end

  def hash!(); end

  def init_with(coder); end

  def init_with!(coder); end

  def inspect!(); end

  def instance_eval!(*arg); end

  def instance_exec!(*arg); end

  def instance_values!(); end

  def instance_variable_get!(arg); end

  def instance_variable_names!(); end

  def instance_variable_set!(arg, arg1); end

  def instance_variables!(); end

  def itself!(); end

  def marshal_dump!(); end

  def method!(arg); end

  def methods!(*arg); end

  def object_id!(); end

  def presence!(); end

  def presence_in!(another_object); end

  def pretty_inspect!(); end

  def pretty_print!(q); end

  def pretty_print_cycle!(q); end

  def pretty_print_inspect!(); end

  def pretty_print_instance_variables!(); end

  def private_methods!(*arg); end

  def protected_methods!(*arg); end

  def public_method!(arg); end

  def public_methods!(*arg); end

  def public_send!(*arg); end

  def remove_instance_variable!(arg); end

  def require_dependency!(filename); end

  def send!(*arg); end

  def singleton_class!(); end

  def singleton_method!(arg); end

  def singleton_method_added!(mid); end

  def singleton_methods!(*arg); end

  def tap!(); end

  def then!(); end

  def to_enum!(*arg); end

  def to_h!(&block); end

  def to_json!(options=T.unsafe(nil)); end

  def to_param!(); end

  def to_query!(key); end

  def to_s!(); end

  def to_yaml!(options=T.unsafe(nil)); end

  def trap!(sig, *command, &command_proc); end

  def with!(**attributes); end

  def with_options!(options, &block); end

  def yield_self!(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class OptionParser
  def additional_message(typ, opt); end

  def raise_unknown(); end

  def raise_unknown=(raise_unknown); end

  def require_exact(); end

  def require_exact=(require_exact); end
  Version = ::T.let(nil, ::T.untyped)
end

class OptionParser::List
  def get_candidates(id); end
end

class OptionParser::ParseError
  def additional(); end

  def additional=(additional); end
end

class OptionParser::Switch
  def pretty_print_contents(q); end
end

class OptionParser::Switch::NoArgument
  def pretty_head(); end
end

class OptionParser::Switch::OptionalArgument
  def pretty_head(); end
end

class OptionParser::Switch::PlacedArgument
  def pretty_head(); end
end

class OptionParser::Switch::RequiredArgument
  def pretty_head(); end
end

module PG
  include ::PG::Constants
  ERROR_CLASSES = ::T.let(nil, ::T.untyped)
  POSTGRESQL_LIB_PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PG::ActiveSqlTransaction
end

class PG::ActiveSqlTransaction
end

class PG::AdminShutdown
end

class PG::AdminShutdown
end

class PG::AmbiguousAlias
end

class PG::AmbiguousAlias
end

class PG::AmbiguousColumn
end

class PG::AmbiguousColumn
end

class PG::AmbiguousFunction
end

class PG::AmbiguousFunction
end

class PG::AmbiguousParameter
end

class PG::AmbiguousParameter
end

class PG::ArraySubscriptError
end

class PG::ArraySubscriptError
end

class PG::AssertFailure
end

class PG::AssertFailure
end

class PG::BadCopyFileFormat
end

class PG::BadCopyFileFormat
end

class PG::BasicTypeMapBasedOnResult
  include ::PG::BasicTypeRegistry::Checker
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapBasedOnResult
end

class PG::BasicTypeMapForQueries
  include ::PG::BasicTypeRegistry::Checker
  def encode_array_as(); end

  def encode_array_as=(pg_type); end

  def initialize(connection_or_coder_maps, registry: T.unsafe(nil), if_undefined: T.unsafe(nil)); end
end

class PG::BasicTypeMapForQueries::BinaryData
end

class PG::BasicTypeMapForQueries::BinaryData
end

class PG::BasicTypeMapForQueries::UndefinedEncoder
end

class PG::BasicTypeMapForQueries::UndefinedEncoder
end

class PG::BasicTypeMapForQueries
end

class PG::BasicTypeMapForResults
  include ::PG::BasicTypeRegistry::Checker
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
  def initialize(typenames); end

  def typecast_result_value(result, _tuple, field); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
end

class PG::BasicTypeMapForResults
end

class PG::BasicTypeRegistry
  include ::PG::BasicTypeRegistry::Checker
  def alias_type(format, new, old); end

  def coders_for(format, direction); end

  def define_default_types(); end

  def register_coder(coder); end

  def register_default_types(); end

  def register_type(format, name, encoder_class, decoder_class); end
end

module PG::BasicTypeRegistry::Checker
  def build_coder_maps(conn_or_maps, registry: T.unsafe(nil)); end

  def check_format_and_direction(format, direction); end
end

module PG::BasicTypeRegistry::Checker
end

class PG::BasicTypeRegistry::CoderMap
  def coder_by_name(name); end

  def coder_by_oid(oid); end

  def coders(); end

  def coders_by_name(); end

  def coders_by_oid(); end

  def initialize(result, coders_by_name, format, arraycoder); end
end

class PG::BasicTypeRegistry::CoderMap
end

class PG::BasicTypeRegistry::CoderMapsBundle
  def each_format(direction); end

  def initialize(connection, registry: T.unsafe(nil)); end

  def map_for(format, direction); end

  def typenames_by_oid(); end
end

class PG::BasicTypeRegistry::CoderMapsBundle
end

class PG::BasicTypeRegistry
end

class PG::BinaryDecoder::Boolean
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Bytea
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::CopyRow
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Date
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Date
end

class PG::BinaryDecoder::Float
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Integer
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::String
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Timestamp
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::ToBase64
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Boolean
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Bytea
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::CopyRow
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Date
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Float4
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Float8
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::FromBase64
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int2
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int4
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int8
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::String
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Timestamp
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::TimestampLocal
end

class PG::BinaryEncoder::TimestampLocal
end

class PG::BinaryEncoder::TimestampUtc
end

class PG::BinaryEncoder::TimestampUtc
end

class PG::BranchTransactionAlreadyActive
end

class PG::BranchTransactionAlreadyActive
end

class PG::CannotCoerce
end

class PG::CannotCoerce
end

class PG::CannotConnectNow
end

class PG::CannotConnectNow
end

class PG::CantChangeRuntimeParam
end

class PG::CantChangeRuntimeParam
end

class PG::CardinalityViolation
end

class PG::CardinalityViolation
end

class PG::CaseNotFound
end

class PG::CaseNotFound
end

class PG::CharacterNotInRepertoire
end

class PG::CharacterNotInRepertoire
end

class PG::CheckViolation
end

class PG::CheckViolation
end

class PG::Coder
  FORMAT_ERROR_MASK = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_PARTIAL = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_RAISE = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_STRING = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_UTC = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_UTC = ::T.let(nil, ::T.untyped)
end

class PG::CollationMismatch
end

class PG::CollationMismatch
end

class PG::CompositeDecoder
end

class PG::CompositeDecoder
end

class PG::CompositeEncoder
end

class PG::CompositeEncoder
end

class PG::ConfigFileError
end

class PG::ConfigFileError
end

class PG::ConfigurationLimitExceeded
end

class PG::ConfigurationLimitExceeded
end

class PG::Connection
  include ::PG::Constants
end

class PG::ConnectionBad
end

class PG::ConnectionBad
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionException
end

class PG::ConnectionException
end

class PG::ConnectionFailure
end

class PG::ConnectionFailure
end

module PG::Constants
  CONNECTION_AUTH_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_AWAITING_RESPONSE = ::T.let(nil, ::T.untyped)
  CONNECTION_BAD = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_STANDBY = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_TARGET = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_WRITABLE = ::T.let(nil, ::T.untyped)
  CONNECTION_CONSUME = ::T.let(nil, ::T.untyped)
  CONNECTION_GSS_STARTUP = ::T.let(nil, ::T.untyped)
  CONNECTION_MADE = ::T.let(nil, ::T.untyped)
  CONNECTION_NEEDED = ::T.let(nil, ::T.untyped)
  CONNECTION_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_SETENV = ::T.let(nil, ::T.untyped)
  CONNECTION_SSL_STARTUP = ::T.let(nil, ::T.untyped)
  CONNECTION_STARTED = ::T.let(nil, ::T.untyped)
  DEF_PGPORT = ::T.let(nil, ::T.untyped)
  INVALID_OID = ::T.let(nil, ::T.untyped)
  INV_READ = ::T.let(nil, ::T.untyped)
  INV_WRITE = ::T.let(nil, ::T.untyped)
  InvalidOid = ::T.let(nil, ::T.untyped)
  PGRES_BAD_RESPONSE = ::T.let(nil, ::T.untyped)
  PGRES_COMMAND_OK = ::T.let(nil, ::T.untyped)
  PGRES_COPY_BOTH = ::T.let(nil, ::T.untyped)
  PGRES_COPY_IN = ::T.let(nil, ::T.untyped)
  PGRES_COPY_OUT = ::T.let(nil, ::T.untyped)
  PGRES_EMPTY_QUERY = ::T.let(nil, ::T.untyped)
  PGRES_FATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_NONFATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_PIPELINE_ABORTED = ::T.let(nil, ::T.untyped)
  PGRES_PIPELINE_SYNC = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_FAILED = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_OK = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_READING = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_WRITING = ::T.let(nil, ::T.untyped)
  PGRES_SINGLE_TUPLE = ::T.let(nil, ::T.untyped)
  PGRES_TUPLES_OK = ::T.let(nil, ::T.untyped)
  PG_DIAG_COLUMN_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONSTRAINT_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONTEXT = ::T.let(nil, ::T.untyped)
  PG_DIAG_DATATYPE_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_QUERY = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_DETAIL = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_HINT = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_PRIMARY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SCHEMA_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY_NONLOCALIZED = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FILE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FUNCTION = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_LINE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SQLSTATE = ::T.let(nil, ::T.untyped)
  PG_DIAG_STATEMENT_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_TABLE_NAME = ::T.let(nil, ::T.untyped)
  PQERRORS_DEFAULT = ::T.let(nil, ::T.untyped)
  PQERRORS_SQLSTATE = ::T.let(nil, ::T.untyped)
  PQERRORS_TERSE = ::T.let(nil, ::T.untyped)
  PQERRORS_VERBOSE = ::T.let(nil, ::T.untyped)
  PQPING_NO_ATTEMPT = ::T.let(nil, ::T.untyped)
  PQPING_NO_RESPONSE = ::T.let(nil, ::T.untyped)
  PQPING_OK = ::T.let(nil, ::T.untyped)
  PQPING_REJECT = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ALWAYS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ERRORS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_NEVER = ::T.let(nil, ::T.untyped)
  PQTRANS_ACTIVE = ::T.let(nil, ::T.untyped)
  PQTRANS_IDLE = ::T.let(nil, ::T.untyped)
  PQTRANS_INERROR = ::T.let(nil, ::T.untyped)
  PQTRANS_INTRANS = ::T.let(nil, ::T.untyped)
  PQTRANS_UNKNOWN = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_ABORTED = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_OFF = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_ON = ::T.let(nil, ::T.untyped)
  SEEK_CUR = ::T.let(nil, ::T.untyped)
  SEEK_END = ::T.let(nil, ::T.untyped)
  SEEK_SET = ::T.let(nil, ::T.untyped)
end

module PG::Constants
end

class PG::CopyDecoder
end

class PG::CopyDecoder
end

class PG::CopyEncoder
end

class PG::CopyEncoder
end

class PG::CrashShutdown
end

class PG::CrashShutdown
end

class PG::DataCorrupted
end

class PG::DataCorrupted
end

class PG::DataException
end

class PG::DataException
end

class PG::DatabaseDropped
end

class PG::DatabaseDropped
end

class PG::DatatypeMismatch
end

class PG::DatatypeMismatch
end

class PG::DatetimeFieldOverflow
end

class PG::DatetimeFieldOverflow
end

class PG::DependentObjectsStillExist
end

class PG::DependentObjectsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DiagnosticsException
end

class PG::DiagnosticsException
end

class PG::DiskFull
end

class PG::DiskFull
end

class PG::DivisionByZero
end

class PG::DivisionByZero
end

class PG::DuplicateAlias
end

class PG::DuplicateAlias
end

class PG::DuplicateColumn
end

class PG::DuplicateColumn
end

class PG::DuplicateCursor
end

class PG::DuplicateCursor
end

class PG::DuplicateDatabase
end

class PG::DuplicateDatabase
end

class PG::DuplicateFile
end

class PG::DuplicateFile
end

class PG::DuplicateFunction
end

class PG::DuplicateFunction
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateObject
end

class PG::DuplicateObject
end

class PG::DuplicatePstatement
end

class PG::DuplicatePstatement
end

class PG::DuplicateSchema
end

class PG::DuplicateSchema
end

class PG::DuplicateTable
end

class PG::DuplicateTable
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::ErrorInAssignment
end

class PG::ErrorInAssignment
end

class PG::EscapeCharacterConflict
end

class PG::EscapeCharacterConflict
end

class PG::ExclusionViolation
end

class PG::ExclusionViolation
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineInvocationException
end

class PG::ExternalRoutineInvocationException
end

class PG::FdwColumnNameNotFound
end

class PG::FdwColumnNameNotFound
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwError
end

class PG::FdwError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwNoSchemas
end

class PG::FdwNoSchemas
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOutOfMemory
end

class PG::FdwOutOfMemory
end

class PG::FdwReplyHandle
end

class PG::FdwReplyHandle
end

class PG::FdwSchemaNotFound
end

class PG::FdwSchemaNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTooManyHandles
end

class PG::FdwTooManyHandles
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToEstablishConnection
end

class PG::FdwUnableToEstablishConnection
end

class PG::FeatureNotSupported
end

class PG::FeatureNotSupported
end

class PG::FloatingPointException
end

class PG::FloatingPointException
end

class PG::ForeignKeyViolation
end

class PG::ForeignKeyViolation
end

class PG::GeneratedAlways
end

class PG::GeneratedAlways
end

class PG::GroupingError
end

class PG::GroupingError
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::IdleInTransactionSessionTimeout
end

class PG::IdleInTransactionSessionTimeout
end

class PG::IdleSessionTimeout
end

class PG::IdleSessionTimeout
end

class PG::InFailedSqlTransaction
end

class PG::InFailedSqlTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::IndeterminateCollation
end

class PG::IndeterminateCollation
end

class PG::IndeterminateDatatype
end

class PG::IndeterminateDatatype
end

class PG::IndexCorrupted
end

class PG::IndexCorrupted
end

class PG::IndicatorOverflow
end

class PG::IndicatorOverflow
end

class PG::InsufficientPrivilege
end

class PG::InsufficientPrivilege
end

class PG::InsufficientResources
end

class PG::InsufficientResources
end

class PG::IntegrityConstraintViolation
end

class PG::IntegrityConstraintViolation
end

class PG::InternalError
end

class PG::InternalError
end

class PG::IntervalFieldOverflow
end

class PG::IntervalFieldOverflow
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForSqlJsonDatetimeFunction
end

class PG::InvalidArgumentForSqlJsonDatetimeFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidCatalogName
end

class PG::InvalidCatalogName
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnReference
end

class PG::InvalidColumnReference
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorName
end

class PG::InvalidCursorName
end

class PG::InvalidCursorState
end

class PG::InvalidCursorState
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeSequence
end

class PG::InvalidEscapeSequence
end

class PG::InvalidForeignKey
end

class PG::InvalidForeignKey
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantor
end

class PG::InvalidGrantor
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidJsonText
end

class PG::InvalidJsonText
end

class PG::InvalidName
end

class PG::InvalidName
end

class PG::InvalidObjectDefinition
end

class PG::InvalidObjectDefinition
end

class PG::InvalidParameterValue
end

class PG::InvalidParameterValue
end

class PG::InvalidPassword
end

class PG::InvalidPassword
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidRecursion
end

class PG::InvalidRecursion
end

class PG::InvalidRegularExpression
end

class PG::InvalidRegularExpression
end

class PG::InvalidResultStatus
end

class PG::InvalidResultStatus
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaName
end

class PG::InvalidSchemaName
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlStatementName
end

class PG::InvalidSqlStatementName
end

class PG::InvalidTableDefinition
end

class PG::InvalidTableDefinition
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionTermination
end

class PG::InvalidTransactionTermination
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlProcessingInstruction
end

class PG::InvalidXmlProcessingInstruction
end

class PG::IoError
end

class PG::IoError
end

class PG::LEInvalidSpecification
end

class PG::LEInvalidSpecification
end

class PG::LocatorException
end

class PG::LocatorException
end

class PG::LockFileExists
end

class PG::LockFileExists
end

class PG::LockNotAvailable
end

class PG::LockNotAvailable
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MostSpecificTypeMismatch
end

class PG::MostSpecificTypeMismatch
end

class PG::NameTooLong
end

class PG::NameTooLong
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoDataFound
end

class PG::NoDataFound
end

class PG::NoResultError
end

class PG::NoResultError
end

class PG::NoSqlJsonItem
end

class PG::NoSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NotAnXmlDocument
end

class PG::NotAnXmlDocument
end

class PG::NotNullViolation
end

class PG::NotNullViolation
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNotAllowed
end

class PG::NullValueNotAllowed
end

class PG::NumericValueOutOfRange
end

class PG::NumericValueOutOfRange
end

class PG::ObjectInUse
end

class PG::ObjectInUse
end

class PG::ObjectNotInPrerequisiteState
end

class PG::ObjectNotInPrerequisiteState
end

class PG::OperatorIntervention
end

class PG::OperatorIntervention
end

class PG::OutOfMemory
end

class PG::OutOfMemory
end

class PG::PlpgsqlError
end

class PG::PlpgsqlError
end

class PG::ProgramLimitExceeded
end

class PG::ProgramLimitExceeded
end

class PG::ProtocolViolation
end

class PG::ProtocolViolation
end

class PG::QueryCanceled
end

class PG::QueryCanceled
end

class PG::RaiseException
end

class PG::RaiseException
end

class PG::ReadOnlySqlTransaction
end

class PG::ReadOnlySqlTransaction
end

class PG::RecordDecoder
end

class PG::RecordDecoder
end

class PG::RecordEncoder
end

class PG::RecordEncoder
end

class PG::ReservedName
end

class PG::ReservedName
end

class PG::RestrictViolation
end

class PG::RestrictViolation
end

class PG::Result
  include ::Enumerable
  include ::PG::Constants
end

class PG::SEInvalidSpecification
end

class PG::SEInvalidSpecification
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SavepointException
end

class PG::SavepointException
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::ServerError
end

class PG::ServerError
end

class PG::SimpleCoder
end

class PG::SimpleCoder
end

class PG::SimpleDecoder
end

class PG::SimpleDecoder
end

class PG::SimpleEncoder
end

class PG::SimpleEncoder
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SnapshotTooOld
end

class PG::SnapshotTooOld
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonItemCannotBeCastToTargetType
end

class PG::SqlJsonItemCannotBeCastToTargetType
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonScalarRequired
end

class PG::SqlJsonScalarRequired
end

class PG::SqlRoutineException
end

class PG::SqlRoutineException
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StatementTooComplex
end

class PG::StatementTooComplex
end

class PG::StringDataLengthMismatch
end

class PG::StringDataLengthMismatch
end

class PG::StringDataRightTruncation
end

class PG::StringDataRightTruncation
end

class PG::SubstringError
end

class PG::SubstringError
end

class PG::SyntaxError
end

class PG::SyntaxError
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SystemError
end

class PG::SystemError
end

class PG::TRDeadlockDetected
end

class PG::TRDeadlockDetected
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRSerializationFailure
end

class PG::TRSerializationFailure
end

class PG::TRStatementCompletionUnknown
end

class PG::TRStatementCompletionUnknown
end

class PG::TextDecoder::Array
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Boolean
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Bytea
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::CopyRow
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Date
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::Float
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::FromBase64
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Identifier
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Inet
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Inet
end

class PG::TextDecoder::Integer
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::JSON
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::JSON
end

class PG::TextDecoder::Numeric
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Numeric
end

class PG::TextDecoder::Record
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::String
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Timestamp
  CFUNC = ::T.let(nil, ::T.untyped)
end

PG::TextDecoder::TimestampWithTimeZone = PG::TextDecoder::Timestamp

PG::TextDecoder::TimestampWithoutTimeZone = PG::TextDecoder::TimestampLocal

class PG::TextEncoder::Array
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Boolean
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Bytea
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::CopyRow
  include ::PG::Coder::BinaryFormatting
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Date
  def encode(value); end
end

class PG::TextEncoder::Date
end

class PG::TextEncoder::Float
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Identifier
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Inet
  def encode(value); end
end

class PG::TextEncoder::Inet
end

class PG::TextEncoder::Integer
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::JSON
  def encode(value); end
end

class PG::TextEncoder::JSON
end

class PG::TextEncoder::Numeric
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Numeric
end

class PG::TextEncoder::QuotedLiteral
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Record
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::String
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::TimestampUtc
  def encode(value); end
end

class PG::TextEncoder::TimestampUtc
end

class PG::TextEncoder::TimestampWithTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithTimeZone
end

class PG::TextEncoder::TimestampWithoutTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithoutTimeZone
end

class PG::TextEncoder::ToBase64
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TooManyArguments
end

class PG::TooManyArguments
end

class PG::TooManyColumns
end

class PG::TooManyColumns
end

class PG::TooManyConnections
end

class PG::TooManyConnections
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyRows
end

class PG::TooManyRows
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionRollback
end

class PG::TransactionRollback
end

class PG::TriggeredActionException
end

class PG::TriggeredActionException
end

class PG::TriggeredDataChangeViolation
end

class PG::TriggeredDataChangeViolation
end

class PG::TrimError
end

class PG::TrimError
end

class PG::Tuple
  include ::Enumerable
end

class PG::TypeMapAllStrings
end

class PG::TypeMapAllStrings
end

class PG::TypeMapByClass
  include ::PG::TypeMap::DefaultTypeMappable
end

class PG::TypeMapByColumn
  include ::PG::TypeMap::DefaultTypeMappable
end

class PG::TypeMapByMriType
  include ::PG::TypeMap::DefaultTypeMappable
end

class PG::TypeMapByOid
  include ::PG::TypeMap::DefaultTypeMappable
end

class PG::TypeMapInRuby
  include ::PG::TypeMap::DefaultTypeMappable
end

class PG::UnableToSend
end

class PG::UnableToSend
end

class PG::UndefinedColumn
end

class PG::UndefinedColumn
end

class PG::UndefinedFile
end

class PG::UndefinedFile
end

class PG::UndefinedFunction
end

class PG::UndefinedFunction
end

class PG::UndefinedObject
end

class PG::UndefinedObject
end

class PG::UndefinedParameter
end

class PG::UndefinedParameter
end

class PG::UndefinedTable
end

class PG::UndefinedTable
end

class PG::UniqueViolation
end

class PG::UniqueViolation
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnterminatedCString
end

class PG::UnterminatedCString
end

class PG::UntranslatableCharacter
end

class PG::UntranslatableCharacter
end

class PG::WindowingError
end

class PG::WindowingError
end

class PG::WithCheckOptionViolation
end

class PG::WithCheckOptionViolation
end

class PG::WrongObjectType
end

class PG::WrongObjectType
end

class PG::ZeroLengthCharacterString
end

class PG::ZeroLengthCharacterString
end

class PP
  VERSION = ::T.let(nil, ::T.untyped)
end

class PP
  def self.width_for(out); end
end

ParseError = Racc::ParseError

class Pathname
  def lutime(arg, arg1); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pet
  include ::Pet::GeneratedAttributeMethods
  include ::Pet::GeneratedAssociationMethods
end

module Pet::GeneratedAssociationMethods
end

module Pet::GeneratedAssociationMethods
end

module Pet::GeneratedAttributeMethods
end

module Pet::GeneratedAttributeMethods
end

class PrettyPrint
  VERSION = ::T.let(nil, ::T.untyped)
end

module Prism
  BACKEND = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Prism::AliasGlobalVariableNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(new_name, old_name, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def new_name(); end

  def old_name(); end

  def type(); end
end

class Prism::AliasGlobalVariableNode
  def self.type(); end
end

class Prism::AliasMethodNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(new_name, old_name, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def new_name(); end

  def old_name(); end

  def type(); end
end

class Prism::AliasMethodNode
  def self.type(); end
end

class Prism::AlternationPatternNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(left, right, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def operator(); end

  def operator_loc(); end

  def right(); end

  def type(); end
end

class Prism::AlternationPatternNode
  def self.type(); end
end

class Prism::AndNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(left, right, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def operator(); end

  def operator_loc(); end

  def right(); end

  def type(); end
end

class Prism::AndNode
  def self.type(); end
end

class Prism::ArgumentsNode
  def accept(visitor); end

  def arguments(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def contains_keyword_splat?(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, arguments, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::ArgumentsNode
  def self.type(); end
end

module Prism::ArgumentsNodeFlags
  CONTAINS_KEYWORD_SPLAT = ::T.let(nil, ::T.untyped)
end

module Prism::ArgumentsNodeFlags
end

class Prism::ArrayNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def contains_splat?(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def elements(); end

  def initialize(flags, elements, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end
end

class Prism::ArrayNode
  def self.type(); end
end

module Prism::ArrayNodeFlags
  CONTAINS_SPLAT = ::T.let(nil, ::T.untyped)
end

module Prism::ArrayNodeFlags
end

class Prism::ArrayPatternNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def constant(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def posts(); end

  def requireds(); end

  def rest(); end

  def type(); end
end

class Prism::ArrayPatternNode
  def self.type(); end
end

class Prism::AssocNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(key, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def key(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::AssocNode
  def self.type(); end
end

class Prism::AssocSplatNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::AssocSplatNode
  def self.type(); end
end

class Prism::BackReferenceReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::BackReferenceReadNode
  def self.type(); end
end

class Prism::BasicVisitor
  def visit(node); end

  def visit_all(nodes); end

  def visit_child_nodes(node); end
end

class Prism::BasicVisitor
end

class Prism::BeginNode
  def accept(visitor); end

  def begin_keyword(); end

  def begin_keyword_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def else_clause(); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def ensure_clause(); end

  def initialize(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def rescue_clause(); end

  def statements(); end

  def type(); end
end

class Prism::BeginNode
  def self.type(); end
end

class Prism::BlockArgumentNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def expression(); end

  def initialize(expression, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::BlockArgumentNode
  def self.type(); end
end

class Prism::BlockLocalVariableNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::BlockLocalVariableNode
  def self.type(); end
end

class Prism::BlockNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(locals, locals_body_index, parameters, body, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def locals_body_index(); end

  def opening(); end

  def opening_loc(); end

  def parameters(); end

  def type(); end
end

class Prism::BlockNode
  def self.type(); end
end

class Prism::BlockParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::BlockParameterNode
  def self.type(); end
end

class Prism::BlockParametersNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(parameters, locals, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def opening(); end

  def opening_loc(); end

  def parameters(); end

  def type(); end
end

class Prism::BlockParametersNode
  def self.type(); end
end

class Prism::BreakNode
  def accept(visitor); end

  def arguments(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(arguments, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def type(); end
end

class Prism::BreakNode
  def self.type(); end
end

class Prism::CallAndWriteNode
  def accept(visitor); end

  def attribute_write?(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def message(); end

  def message_loc(); end

  def operator(); end

  def operator_loc(); end

  def read_name(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end

  def write_name(); end
end

class Prism::CallAndWriteNode
  def self.type(); end
end

class Prism::CallNode
  def accept(visitor); end

  def arguments(); end

  def attribute_write?(); end

  def block(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def message(); end

  def message_loc(); end

  def name(); end

  def opening(); end

  def opening_loc(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def variable_call?(); end
end

class Prism::CallNode
  def self.type(); end
end

module Prism::CallNodeFlags
  ATTRIBUTE_WRITE = ::T.let(nil, ::T.untyped)
  SAFE_NAVIGATION = ::T.let(nil, ::T.untyped)
  VARIABLE_CALL = ::T.let(nil, ::T.untyped)
end

module Prism::CallNodeFlags
end

class Prism::CallOperatorWriteNode
  def accept(visitor); end

  def attribute_write?(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def message(); end

  def message_loc(); end

  def operator(); end

  def operator_loc(); end

  def read_name(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end

  def write_name(); end
end

class Prism::CallOperatorWriteNode
  def self.type(); end
end

class Prism::CallOrWriteNode
  def accept(visitor); end

  def attribute_write?(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def message(); end

  def message_loc(); end

  def operator(); end

  def operator_loc(); end

  def read_name(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end

  def write_name(); end
end

class Prism::CallOrWriteNode
  def self.type(); end
end

class Prism::CallTargetNode
  def accept(visitor); end

  def attribute_write?(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, name, message_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def message(); end

  def message_loc(); end

  def name(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def variable_call?(); end
end

class Prism::CallTargetNode
  def self.type(); end
end

class Prism::CapturePatternNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(value, target, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def target(); end

  def type(); end

  def value(); end
end

class Prism::CapturePatternNode
  def self.type(); end
end

class Prism::CaseMatchNode
  def accept(visitor); end

  def case_keyword(); end

  def case_keyword_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def conditions(); end

  def consequent(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def predicate(); end

  def type(); end
end

class Prism::CaseMatchNode
  def self.type(); end
end

class Prism::CaseNode
  def accept(visitor); end

  def case_keyword(); end

  def case_keyword_loc(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def conditions(); end

  def consequent(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def predicate(); end

  def type(); end
end

class Prism::CaseNode
  def self.type(); end
end

class Prism::ClassNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def class_keyword(); end

  def class_keyword_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def constant_path(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def inheritance_operator(); end

  def inheritance_operator_loc(); end

  def initialize(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def name(); end

  def superclass(); end

  def type(); end
end

class Prism::ClassNode
  def self.type(); end
end

class Prism::ClassVariableAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ClassVariableAndWriteNode
  def self.type(); end
end

class Prism::ClassVariableOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, operator, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ClassVariableOperatorWriteNode
  def self.type(); end
end

class Prism::ClassVariableOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ClassVariableOrWriteNode
  def self.type(); end
end

class Prism::ClassVariableReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::ClassVariableReadNode
  def self.type(); end
end

class Prism::ClassVariableTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::ClassVariableTargetNode
  def self.type(); end
end

class Prism::ClassVariableWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ClassVariableWriteNode
  def self.type(); end
end

class Prism::Comment
  def deconstruct_keys(keys); end

  def initialize(location); end

  def location(); end
end

class Prism::Comment
end

class Prism::Compiler
  def visit(node); end

  def visit_alias_global_variable_node(node); end

  def visit_alias_method_node(node); end

  def visit_all(nodes); end

  def visit_alternation_pattern_node(node); end

  def visit_and_node(node); end

  def visit_arguments_node(node); end

  def visit_array_node(node); end

  def visit_array_pattern_node(node); end

  def visit_assoc_node(node); end

  def visit_assoc_splat_node(node); end

  def visit_back_reference_read_node(node); end

  def visit_begin_node(node); end

  def visit_block_argument_node(node); end

  def visit_block_local_variable_node(node); end

  def visit_block_node(node); end

  def visit_block_parameter_node(node); end

  def visit_block_parameters_node(node); end

  def visit_break_node(node); end

  def visit_call_and_write_node(node); end

  def visit_call_node(node); end

  def visit_call_operator_write_node(node); end

  def visit_call_or_write_node(node); end

  def visit_call_target_node(node); end

  def visit_capture_pattern_node(node); end

  def visit_case_match_node(node); end

  def visit_case_node(node); end

  def visit_child_nodes(node); end

  def visit_class_node(node); end

  def visit_class_variable_and_write_node(node); end

  def visit_class_variable_operator_write_node(node); end

  def visit_class_variable_or_write_node(node); end

  def visit_class_variable_read_node(node); end

  def visit_class_variable_target_node(node); end

  def visit_class_variable_write_node(node); end

  def visit_constant_and_write_node(node); end

  def visit_constant_operator_write_node(node); end

  def visit_constant_or_write_node(node); end

  def visit_constant_path_and_write_node(node); end

  def visit_constant_path_node(node); end

  def visit_constant_path_operator_write_node(node); end

  def visit_constant_path_or_write_node(node); end

  def visit_constant_path_target_node(node); end

  def visit_constant_path_write_node(node); end

  def visit_constant_read_node(node); end

  def visit_constant_target_node(node); end

  def visit_constant_write_node(node); end

  def visit_def_node(node); end

  def visit_defined_node(node); end

  def visit_else_node(node); end

  def visit_embedded_statements_node(node); end

  def visit_embedded_variable_node(node); end

  def visit_ensure_node(node); end

  def visit_false_node(node); end

  def visit_find_pattern_node(node); end

  def visit_flip_flop_node(node); end

  def visit_float_node(node); end

  def visit_for_node(node); end

  def visit_forwarding_arguments_node(node); end

  def visit_forwarding_parameter_node(node); end

  def visit_forwarding_super_node(node); end

  def visit_global_variable_and_write_node(node); end

  def visit_global_variable_operator_write_node(node); end

  def visit_global_variable_or_write_node(node); end

  def visit_global_variable_read_node(node); end

  def visit_global_variable_target_node(node); end

  def visit_global_variable_write_node(node); end

  def visit_hash_node(node); end

  def visit_hash_pattern_node(node); end

  def visit_if_node(node); end

  def visit_imaginary_node(node); end

  def visit_implicit_node(node); end

  def visit_implicit_rest_node(node); end

  def visit_in_node(node); end

  def visit_index_and_write_node(node); end

  def visit_index_operator_write_node(node); end

  def visit_index_or_write_node(node); end

  def visit_index_target_node(node); end

  def visit_instance_variable_and_write_node(node); end

  def visit_instance_variable_operator_write_node(node); end

  def visit_instance_variable_or_write_node(node); end

  def visit_instance_variable_read_node(node); end

  def visit_instance_variable_target_node(node); end

  def visit_instance_variable_write_node(node); end

  def visit_integer_node(node); end

  def visit_interpolated_match_last_line_node(node); end

  def visit_interpolated_regular_expression_node(node); end

  def visit_interpolated_string_node(node); end

  def visit_interpolated_symbol_node(node); end

  def visit_interpolated_x_string_node(node); end

  def visit_keyword_hash_node(node); end

  def visit_keyword_rest_parameter_node(node); end

  def visit_lambda_node(node); end

  def visit_local_variable_and_write_node(node); end

  def visit_local_variable_operator_write_node(node); end

  def visit_local_variable_or_write_node(node); end

  def visit_local_variable_read_node(node); end

  def visit_local_variable_target_node(node); end

  def visit_local_variable_write_node(node); end

  def visit_match_last_line_node(node); end

  def visit_match_predicate_node(node); end

  def visit_match_required_node(node); end

  def visit_match_write_node(node); end

  def visit_missing_node(node); end

  def visit_module_node(node); end

  def visit_multi_target_node(node); end

  def visit_multi_write_node(node); end

  def visit_next_node(node); end

  def visit_nil_node(node); end

  def visit_no_keywords_parameter_node(node); end

  def visit_numbered_parameters_node(node); end

  def visit_numbered_reference_read_node(node); end

  def visit_optional_keyword_parameter_node(node); end

  def visit_optional_parameter_node(node); end

  def visit_or_node(node); end

  def visit_parameters_node(node); end

  def visit_parentheses_node(node); end

  def visit_pinned_expression_node(node); end

  def visit_pinned_variable_node(node); end

  def visit_post_execution_node(node); end

  def visit_pre_execution_node(node); end

  def visit_program_node(node); end

  def visit_range_node(node); end

  def visit_rational_node(node); end

  def visit_redo_node(node); end

  def visit_regular_expression_node(node); end

  def visit_required_keyword_parameter_node(node); end

  def visit_required_parameter_node(node); end

  def visit_rescue_modifier_node(node); end

  def visit_rescue_node(node); end

  def visit_rest_parameter_node(node); end

  def visit_retry_node(node); end

  def visit_return_node(node); end

  def visit_self_node(node); end

  def visit_singleton_class_node(node); end

  def visit_source_encoding_node(node); end

  def visit_source_file_node(node); end

  def visit_source_line_node(node); end

  def visit_splat_node(node); end

  def visit_statements_node(node); end

  def visit_string_node(node); end

  def visit_super_node(node); end

  def visit_symbol_node(node); end

  def visit_true_node(node); end

  def visit_undef_node(node); end

  def visit_unless_node(node); end

  def visit_until_node(node); end

  def visit_when_node(node); end

  def visit_while_node(node); end

  def visit_x_string_node(node); end

  def visit_yield_node(node); end
end

class Prism::Compiler
end

class Prism::ConstantAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ConstantAndWriteNode
  def self.type(); end
end

class Prism::ConstantOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, operator, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ConstantOperatorWriteNode
  def self.type(); end
end

class Prism::ConstantOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ConstantOrWriteNode
  def self.type(); end
end

class Prism::ConstantPathAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(target, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def target(); end

  def type(); end

  def value(); end
end

class Prism::ConstantPathAndWriteNode
  def self.type(); end
end

class Prism::ConstantPathNode
  def accept(visitor); end

  def child(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def delimiter(); end

  def delimiter_loc(); end

  def full_name(); end

  def full_name_parts(); end

  def initialize(parent, child, delimiter_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def parent(); end

  def type(); end
end

class Prism::ConstantPathNode::DynamicPartsInConstantPathError
end

class Prism::ConstantPathNode::DynamicPartsInConstantPathError
end

class Prism::ConstantPathNode
  def self.type(); end
end

class Prism::ConstantPathOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(target, operator_loc, value, operator, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def target(); end

  def type(); end

  def value(); end
end

class Prism::ConstantPathOperatorWriteNode
  def self.type(); end
end

class Prism::ConstantPathOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(target, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def target(); end

  def type(); end

  def value(); end
end

class Prism::ConstantPathOrWriteNode
  def self.type(); end
end

class Prism::ConstantPathTargetNode
  def accept(visitor); end

  def child(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def delimiter(); end

  def delimiter_loc(); end

  def full_name(); end

  def full_name_parts(); end

  def initialize(parent, child, delimiter_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def parent(); end

  def type(); end
end

class Prism::ConstantPathTargetNode
  def self.type(); end
end

class Prism::ConstantPathWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(target, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def target(); end

  def type(); end

  def value(); end
end

class Prism::ConstantPathWriteNode
  def self.type(); end
end

class Prism::ConstantReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def full_name(); end

  def full_name_parts(); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::ConstantReadNode
  def self.type(); end
end

class Prism::ConstantTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::ConstantTargetNode
  def self.type(); end
end

class Prism::ConstantWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::ConstantWriteNode
  def self.type(); end
end

module Prism::DSL
end

module Prism::DSL
end

class Prism::DefNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def def_keyword(); end

  def def_keyword_loc(); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def equal(); end

  def equal_loc(); end

  def initialize(name, name_loc, receiver, parameters, body, locals, locals_body_index, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def locals_body_index(); end

  def lparen(); end

  def lparen_loc(); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def parameters(); end

  def receiver(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end
end

class Prism::DefNode
  def self.type(); end
end

class Prism::DefinedNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(lparen_loc, value, rparen_loc, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def lparen(); end

  def lparen_loc(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end

  def value(); end
end

class Prism::DefinedNode
  def self.type(); end
end

class Prism::DesugarCompiler
end

class Prism::DesugarCompiler
end

class Prism::Dispatcher
  def dispatch(node); end

  def dispatch_once(node); end

  def listeners(); end

  def register(listener, *events); end
end

class Prism::Dispatcher
end

class Prism::ElseNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def else_keyword(); end

  def else_keyword_loc(); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def initialize(else_keyword_loc, statements, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def statements(); end

  def type(); end
end

class Prism::ElseNode
  def self.type(); end
end

class Prism::EmbDocComment
  def trailing?(); end
end

class Prism::EmbDocComment
end

class Prism::EmbeddedStatementsNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(opening_loc, statements, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def statements(); end

  def type(); end
end

class Prism::EmbeddedStatementsNode
  def self.type(); end
end

class Prism::EmbeddedVariableNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(operator_loc, variable, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def variable(); end
end

class Prism::EmbeddedVariableNode
  def self.type(); end
end

module Prism::EncodingFlags
  FORCED_BINARY_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_UTF8_ENCODING = ::T.let(nil, ::T.untyped)
end

module Prism::EncodingFlags
end

class Prism::EnsureNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def ensure_keyword(); end

  def ensure_keyword_loc(); end

  def initialize(ensure_keyword_loc, statements, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def statements(); end

  def type(); end
end

class Prism::EnsureNode
  def self.type(); end
end

class Prism::FalseNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::FalseNode
  def self.type(); end
end

class Prism::FindPatternNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def constant(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(constant, left, requireds, right, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def opening(); end

  def opening_loc(); end

  def requireds(); end

  def right(); end

  def type(); end
end

class Prism::FindPatternNode
  def self.type(); end
end

class Prism::FlipFlopNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def exclude_end?(); end

  def initialize(flags, left, right, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def operator(); end

  def operator_loc(); end

  def right(); end

  def type(); end
end

class Prism::FlipFlopNode
  def self.type(); end
end

class Prism::FloatNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end

  def value(); end
end

class Prism::FloatNode
  def self.type(); end
end

class Prism::ForNode
  def accept(visitor); end

  def child_nodes(); end

  def collection(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def do_keyword(); end

  def do_keyword_loc(); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def for_keyword(); end

  def for_keyword_loc(); end

  def in_keyword(); end

  def in_keyword_loc(); end

  def index(); end

  def initialize(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def statements(); end

  def type(); end
end

class Prism::ForNode
  def self.type(); end
end

class Prism::ForwardingArgumentsNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::ForwardingArgumentsNode
  def self.type(); end
end

class Prism::ForwardingParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::ForwardingParameterNode
  def self.type(); end
end

class Prism::ForwardingSuperNode
  def accept(visitor); end

  def block(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(block, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::ForwardingSuperNode
  def self.type(); end
end

class Prism::GlobalVariableAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::GlobalVariableAndWriteNode
  def self.type(); end
end

class Prism::GlobalVariableOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, operator, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::GlobalVariableOperatorWriteNode
  def self.type(); end
end

class Prism::GlobalVariableOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::GlobalVariableOrWriteNode
  def self.type(); end
end

class Prism::GlobalVariableReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::GlobalVariableReadNode
  def self.type(); end
end

class Prism::GlobalVariableTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::GlobalVariableTargetNode
  def self.type(); end
end

class Prism::GlobalVariableWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::GlobalVariableWriteNode
  def self.type(); end
end

class Prism::HashNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def elements(); end

  def initialize(opening_loc, elements, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end
end

class Prism::HashNode
  def self.type(); end
end

class Prism::HashPatternNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def constant(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def elements(); end

  def initialize(constant, elements, rest, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def rest(); end

  def type(); end
end

class Prism::HashPatternNode
  def self.type(); end
end

module Prism::HeredocQuery
  def heredoc?(); end
end

module Prism::HeredocQuery
end

class Prism::IfNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def consequent(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def if_keyword(); end

  def if_keyword_loc(); end

  def initialize(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def predicate(); end

  def statements(); end

  def then_keyword(); end

  def then_keyword_loc(); end

  def type(); end
end

class Prism::IfNode
  def self.type(); end
end

class Prism::ImaginaryNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(numeric, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def numeric(); end

  def type(); end

  def value(); end
end

class Prism::ImaginaryNode
  def self.type(); end
end

class Prism::ImplicitNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end

  def value(); end
end

class Prism::ImplicitNode
  def self.type(); end
end

class Prism::ImplicitRestNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::ImplicitRestNode
  def self.type(); end
end

class Prism::InNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def in(); end

  def in_loc(); end

  def initialize(pattern, statements, in_loc, then_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def pattern(); end

  def statements(); end

  def then_loc(); end

  def type(); end
end

class Prism::InNode
  def self.type(); end
end

class Prism::IndexAndWriteNode
  def accept(visitor); end

  def arguments(); end

  def attribute_write?(); end

  def block(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def operator(); end

  def operator_loc(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end
end

class Prism::IndexAndWriteNode
  def self.type(); end
end

class Prism::IndexOperatorWriteNode
  def accept(visitor); end

  def arguments(); end

  def attribute_write?(); end

  def block(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def operator(); end

  def operator_loc(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end
end

class Prism::IndexOperatorWriteNode
  def self.type(); end
end

class Prism::IndexOrWriteNode
  def accept(visitor); end

  def arguments(); end

  def attribute_write?(); end

  def block(); end

  def call_operator(); end

  def call_operator_loc(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def operator(); end

  def operator_loc(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def value(); end

  def variable_call?(); end
end

class Prism::IndexOrWriteNode
  def self.type(); end
end

class Prism::IndexTargetNode
  def accept(visitor); end

  def arguments(); end

  def attribute_write?(); end

  def block(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, receiver, opening_loc, arguments, closing_loc, block, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def receiver(); end

  def safe_navigation?(); end

  def type(); end

  def variable_call?(); end
end

class Prism::IndexTargetNode
  def self.type(); end
end

class Prism::InlineComment
  def trailing?(); end
end

class Prism::InlineComment
end

class Prism::InstanceVariableAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::InstanceVariableAndWriteNode
  def self.type(); end
end

class Prism::InstanceVariableOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, operator, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::InstanceVariableOperatorWriteNode
  def self.type(); end
end

class Prism::InstanceVariableOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::InstanceVariableOrWriteNode
  def self.type(); end
end

class Prism::InstanceVariableReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::InstanceVariableReadNode
  def self.type(); end
end

class Prism::InstanceVariableTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::InstanceVariableTargetNode
  def self.type(); end
end

class Prism::InstanceVariableWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::InstanceVariableWriteNode
  def self.type(); end
end

module Prism::IntegerBaseFlags
  BINARY = ::T.let(nil, ::T.untyped)
  DECIMAL = ::T.let(nil, ::T.untyped)
  HEXADECIMAL = ::T.let(nil, ::T.untyped)
  OCTAL = ::T.let(nil, ::T.untyped)
end

module Prism::IntegerBaseFlags
end

class Prism::IntegerNode
  def accept(visitor); end

  def binary?(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def decimal?(); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def hexadecimal?(); end

  def initialize(flags, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def octal?(); end

  def type(); end

  def value(); end
end

class Prism::IntegerNode
  def self.type(); end
end

class Prism::InterpolatedMatchLastLineNode
  include ::Prism::RegularExpressionOptions
  def accept(visitor); end

  def ascii_8bit?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def euc_jp?(); end

  def extended?(); end

  def forced_binary_encoding?(); end

  def forced_us_ascii_encoding?(); end

  def forced_utf8_encoding?(); end

  def ignore_case?(); end

  def initialize(flags, opening_loc, parts, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def multi_line?(); end

  def once?(); end

  def opening(); end

  def opening_loc(); end

  def parts(); end

  def type(); end

  def utf_8?(); end

  def windows_31j?(); end
end

class Prism::InterpolatedMatchLastLineNode
  def self.type(); end
end

class Prism::InterpolatedRegularExpressionNode
  include ::Prism::RegularExpressionOptions
  def accept(visitor); end

  def ascii_8bit?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def euc_jp?(); end

  def extended?(); end

  def forced_binary_encoding?(); end

  def forced_us_ascii_encoding?(); end

  def forced_utf8_encoding?(); end

  def ignore_case?(); end

  def initialize(flags, opening_loc, parts, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def multi_line?(); end

  def once?(); end

  def opening(); end

  def opening_loc(); end

  def parts(); end

  def type(); end

  def utf_8?(); end

  def windows_31j?(); end
end

class Prism::InterpolatedRegularExpressionNode
  def self.type(); end
end

class Prism::InterpolatedStringNode
  include ::Prism::HeredocQuery
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(opening_loc, parts, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def parts(); end

  def type(); end
end

class Prism::InterpolatedStringNode
  def self.type(); end
end

class Prism::InterpolatedSymbolNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(opening_loc, parts, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def parts(); end

  def type(); end
end

class Prism::InterpolatedSymbolNode
  def self.type(); end
end

class Prism::InterpolatedXStringNode
  include ::Prism::HeredocQuery
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(opening_loc, parts, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def parts(); end

  def type(); end
end

class Prism::InterpolatedXStringNode
  def self.type(); end
end

class Prism::KeywordHashNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def elements(); end

  def initialize(flags, elements, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def static_keys?(); end

  def type(); end
end

class Prism::KeywordHashNode
  def self.type(); end
end

module Prism::KeywordHashNodeFlags
  STATIC_KEYS = ::T.let(nil, ::T.untyped)
end

module Prism::KeywordHashNodeFlags
end

class Prism::KeywordRestParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::KeywordRestParameterNode
  def self.type(); end
end

class Prism::LambdaNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(locals, locals_body_index, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def locals_body_index(); end

  def opening(); end

  def opening_loc(); end

  def operator(); end

  def operator_loc(); end

  def parameters(); end

  def type(); end
end

class Prism::LambdaNode
  def self.type(); end
end

class Prism::LocalVariableAndWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name_loc, operator_loc, value, name, depth, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::LocalVariableAndWriteNode
  def self.type(); end
end

class Prism::LocalVariableOperatorWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name_loc, operator_loc, value, name, operator, depth, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::LocalVariableOperatorWriteNode
  def self.type(); end
end

class Prism::LocalVariableOrWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name_loc, operator_loc, value, name, depth, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::LocalVariableOrWriteNode
  def self.type(); end
end

class Prism::LocalVariableReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name, depth, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::LocalVariableReadNode
  def self.type(); end
end

class Prism::LocalVariableTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name, depth, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::LocalVariableTargetNode
  def self.type(); end
end

class Prism::LocalVariableWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def depth(); end

  def initialize(name, depth, name_loc, value, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::LocalVariableWriteNode
  def self.type(); end
end

class Prism::Location
  def ==(other); end

  def comments(); end

  def copy(**options); end

  def deconstruct_keys(keys); end

  def end_character_column(); end

  def end_character_offset(); end

  def end_column(); end

  def end_line(); end

  def end_offset(); end

  def initialize(source, start_offset, length); end

  def join(other); end

  def length(); end

  def slice(); end

  def source(); end

  def start_character_column(); end

  def start_character_offset(); end

  def start_column(); end

  def start_line(); end

  def start_line_slice(); end

  def start_offset(); end
end

class Prism::Location
  def self.null(); end
end

module Prism::LoopFlags
  BEGIN_MODIFIER = ::T.let(nil, ::T.untyped)
end

module Prism::LoopFlags
end

class Prism::MagicComment
  def deconstruct_keys(keys); end

  def initialize(key_loc, value_loc); end

  def key(); end

  def key_loc(); end

  def value(); end

  def value_loc(); end
end

class Prism::MagicComment
end

class Prism::MatchLastLineNode
  include ::Prism::RegularExpressionOptions
  def accept(visitor); end

  def ascii_8bit?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def content(); end

  def content_loc(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def euc_jp?(); end

  def extended?(); end

  def forced_binary_encoding?(); end

  def forced_us_ascii_encoding?(); end

  def forced_utf8_encoding?(); end

  def ignore_case?(); end

  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def multi_line?(); end

  def once?(); end

  def opening(); end

  def opening_loc(); end

  def type(); end

  def unescaped(); end

  def utf_8?(); end

  def windows_31j?(); end
end

class Prism::MatchLastLineNode
  def self.type(); end
end

class Prism::MatchPredicateNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(value, pattern, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def pattern(); end

  def type(); end

  def value(); end
end

class Prism::MatchPredicateNode
  def self.type(); end
end

class Prism::MatchRequiredNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(value, pattern, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def pattern(); end

  def type(); end

  def value(); end
end

class Prism::MatchRequiredNode
  def self.type(); end
end

class Prism::MatchWriteNode
  def accept(visitor); end

  def call(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(call, targets, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def targets(); end

  def type(); end
end

class Prism::MatchWriteNode
  def self.type(); end
end

class Prism::MissingNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::MissingNode
  def self.type(); end
end

class Prism::ModuleNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def constant_path(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def initialize(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def module_keyword(); end

  def module_keyword_loc(); end

  def name(); end

  def type(); end
end

class Prism::ModuleNode
  def self.type(); end
end

class Prism::MultiTargetNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def lefts(); end

  def lparen(); end

  def lparen_loc(); end

  def rest(); end

  def rights(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end
end

class Prism::MultiTargetNode
  def self.type(); end
end

class Prism::MultiWriteNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def lefts(); end

  def lparen(); end

  def lparen_loc(); end

  def operator(); end

  def operator_loc(); end

  def rest(); end

  def rights(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end

  def value(); end
end

class Prism::MultiWriteNode
  def self.type(); end
end

class Prism::MutationCompiler
end

class Prism::MutationCompiler
end

class Prism::NextNode
  def accept(visitor); end

  def arguments(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(arguments, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def type(); end
end

class Prism::NextNode
  def self.type(); end
end

class Prism::NilNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::NilNode
  def self.type(); end
end

class Prism::NoKeywordsParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(operator_loc, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::NoKeywordsParameterNode
  def self.type(); end
end

class Prism::Node
  def location(); end

  def newline?(); end

  def set_newline_flag(newline_marked); end

  def slice(); end

  def to_dot(); end
end

class Prism::Node
end

class Prism::NodeInspector
  def <<(line); end

  def child_inspector(append); end

  def child_node(node, append); end

  def header(node); end

  def initialize(prefix=T.unsafe(nil)); end

  def list(prefix, nodes); end

  def location(value); end

  def output(); end

  def prefix(); end

  def to_str(); end
end

class Prism::NodeInspector
end

class Prism::NumberedParametersNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(maximum, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def maximum(); end

  def type(); end
end

class Prism::NumberedParametersNode
  def self.type(); end
end

class Prism::NumberedReferenceReadNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(number, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def number(); end

  def type(); end
end

class Prism::NumberedReferenceReadNode
  def self.type(); end
end

class Prism::OptionalKeywordParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def type(); end

  def value(); end
end

class Prism::OptionalKeywordParameterNode
  def self.type(); end
end

class Prism::OptionalParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, value, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def value(); end
end

class Prism::OptionalParameterNode
  def self.type(); end
end

class Prism::OrNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(left, right, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def operator(); end

  def operator_loc(); end

  def right(); end

  def type(); end
end

class Prism::OrNode
  def self.type(); end
end

module Prism::Pack
  AGNOSTIC_ENDIAN = ::T.let(nil, ::T.untyped)
  BACK = ::T.let(nil, ::T.untyped)
  BER = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  ENDIAN_NA = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  INTEGER = ::T.let(nil, ::T.untyped)
  LENGTH_FIXED = ::T.let(nil, ::T.untyped)
  LENGTH_MAX = ::T.let(nil, ::T.untyped)
  LENGTH_NA = ::T.let(nil, ::T.untyped)
  LENGTH_RELATIVE = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  MOVE = ::T.let(nil, ::T.untyped)
  NATIVE_ENDIAN = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  SIGNED = ::T.let(nil, ::T.untyped)
  SIGNED_NA = ::T.let(nil, ::T.untyped)
  SIZE_16 = ::T.let(nil, ::T.untyped)
  SIZE_32 = ::T.let(nil, ::T.untyped)
  SIZE_64 = ::T.let(nil, ::T.untyped)
  SIZE_8 = ::T.let(nil, ::T.untyped)
  SIZE_INT = ::T.let(nil, ::T.untyped)
  SIZE_LONG = ::T.let(nil, ::T.untyped)
  SIZE_LONG_LONG = ::T.let(nil, ::T.untyped)
  SIZE_NA = ::T.let(nil, ::T.untyped)
  SIZE_P = ::T.let(nil, ::T.untyped)
  SIZE_SHORT = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  STRING_BASE64 = ::T.let(nil, ::T.untyped)
  STRING_FIXED = ::T.let(nil, ::T.untyped)
  STRING_HEX_HIGH = ::T.let(nil, ::T.untyped)
  STRING_HEX_LOW = ::T.let(nil, ::T.untyped)
  STRING_LSB = ::T.let(nil, ::T.untyped)
  STRING_MIME = ::T.let(nil, ::T.untyped)
  STRING_MSB = ::T.let(nil, ::T.untyped)
  STRING_NULL_PADDED = ::T.let(nil, ::T.untyped)
  STRING_NULL_TERMINATED = ::T.let(nil, ::T.untyped)
  STRING_POINTER = ::T.let(nil, ::T.untyped)
  STRING_SPACE_PADDED = ::T.let(nil, ::T.untyped)
  STRING_UU = ::T.let(nil, ::T.untyped)
  UNSIGNED = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

class Prism::Pack::Directive
  def describe(); end

  def endian(); end

  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  def length(); end

  def length_type(); end

  def signed(); end

  def size(); end

  def source(); end

  def type(); end

  def variant(); end

  def version(); end
  ENDIAN_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
  SIGNED_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
  SIZE_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
end

class Prism::Pack::Directive
end

class Prism::Pack::Format
  def describe(); end

  def directives(); end

  def encoding(); end

  def initialize(directives, encoding); end
end

class Prism::Pack::Format
end

module Prism::Pack
  def self.parse(arg, arg1, arg2); end
end

class Prism::ParametersNode
  def accept(visitor); end

  def block(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword_rest(); end

  def keywords(); end

  def optionals(); end

  def posts(); end

  def requireds(); end

  def rest(); end

  def signature(); end

  def type(); end
end

class Prism::ParametersNode
  def self.type(); end
end

class Prism::ParenthesesNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(body, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end
end

class Prism::ParenthesesNode
  def self.type(); end
end

class Prism::ParseError
  def deconstruct_keys(keys); end

  def initialize(message, location); end

  def location(); end

  def message(); end
end

class Prism::ParseError
end

class Prism::ParseResult
  def attach_comments!(); end

  def comments(); end

  def data_loc(); end

  def deconstruct_keys(keys); end

  def errors(); end

  def failure?(); end

  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  def magic_comments(); end

  def mark_newlines!(); end

  def source(); end

  def success?(); end

  def value(); end

  def warnings(); end
end

class Prism::ParseResult
end

class Prism::ParseWarning
  def deconstruct_keys(keys); end

  def initialize(message, location); end

  def location(); end

  def message(); end
end

class Prism::ParseWarning
end

class Prism::Pattern
  def compile(); end

  def initialize(query); end

  def query(); end

  def scan(root); end
end

class Prism::Pattern::CompilationError
  def initialize(repr); end
end

class Prism::Pattern::CompilationError
end

class Prism::Pattern
end

class Prism::PinnedExpressionNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def expression(); end

  def initialize(expression, operator_loc, lparen_loc, rparen_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def lparen(); end

  def lparen_loc(); end

  def operator(); end

  def operator_loc(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end
end

class Prism::PinnedExpressionNode
  def self.type(); end
end

class Prism::PinnedVariableNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(variable, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def type(); end

  def variable(); end
end

class Prism::PinnedVariableNode
  def self.type(); end
end

class Prism::PostExecutionNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def opening(); end

  def opening_loc(); end

  def statements(); end

  def type(); end
end

class Prism::PostExecutionNode
  def self.type(); end
end

class Prism::PreExecutionNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def opening(); end

  def opening_loc(); end

  def statements(); end

  def type(); end
end

class Prism::PreExecutionNode
  def self.type(); end
end

class Prism::ProgramNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(locals, statements, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def statements(); end

  def type(); end
end

class Prism::ProgramNode
  def self.type(); end
end

module Prism::RangeFlags
  EXCLUDE_END = ::T.let(nil, ::T.untyped)
end

module Prism::RangeFlags
end

class Prism::RangeNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def exclude_end?(); end

  def initialize(flags, left, right, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def left(); end

  def operator(); end

  def operator_loc(); end

  def right(); end

  def type(); end
end

class Prism::RangeNode
  def self.type(); end
end

class Prism::RationalNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(numeric, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def numeric(); end

  def type(); end

  def value(); end
end

class Prism::RationalNode
  def self.type(); end
end

class Prism::RedoNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::RedoNode
  def self.type(); end
end

module Prism::RegularExpressionFlags
  ASCII_8BIT = ::T.let(nil, ::T.untyped)
  EUC_JP = ::T.let(nil, ::T.untyped)
  EXTENDED = ::T.let(nil, ::T.untyped)
  FORCED_BINARY_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_US_ASCII_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_UTF8_ENCODING = ::T.let(nil, ::T.untyped)
  IGNORE_CASE = ::T.let(nil, ::T.untyped)
  MULTI_LINE = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
  WINDOWS_31J = ::T.let(nil, ::T.untyped)
end

module Prism::RegularExpressionFlags
end

class Prism::RegularExpressionNode
  include ::Prism::RegularExpressionOptions
  def accept(visitor); end

  def ascii_8bit?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def content(); end

  def content_loc(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def euc_jp?(); end

  def extended?(); end

  def forced_binary_encoding?(); end

  def forced_us_ascii_encoding?(); end

  def forced_utf8_encoding?(); end

  def ignore_case?(); end

  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def multi_line?(); end

  def once?(); end

  def opening(); end

  def opening_loc(); end

  def type(); end

  def unescaped(); end

  def utf_8?(); end

  def windows_31j?(); end
end

class Prism::RegularExpressionNode
  def self.type(); end
end

module Prism::RegularExpressionOptions
  def options(); end
end

module Prism::RegularExpressionOptions
end

class Prism::RequiredKeywordParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def type(); end
end

class Prism::RequiredKeywordParameterNode
  def self.type(); end
end

class Prism::RequiredParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def type(); end
end

class Prism::RequiredParameterNode
  def self.type(); end
end

class Prism::RescueModifierNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def expression(); end

  def initialize(expression, keyword_loc, rescue_expression, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def rescue_expression(); end

  def type(); end
end

class Prism::RescueModifierNode
  def self.type(); end
end

class Prism::RescueNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def consequent(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def exceptions(); end

  def initialize(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def operator(); end

  def operator_loc(); end

  def reference(); end

  def statements(); end

  def type(); end
end

class Prism::RescueNode
  def self.type(); end
end

class Prism::RestParameterNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(name, name_loc, operator_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def name(); end

  def name_loc(); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::RestParameterNode
  def self.type(); end
end

class Prism::RetryNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::RetryNode
  def self.type(); end
end

class Prism::ReturnNode
  def accept(visitor); end

  def arguments(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(keyword_loc, arguments, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def type(); end
end

class Prism::ReturnNode
  def self.type(); end
end

class Prism::RipperCompat
  def column(); end

  def error?(); end

  def initialize(source); end

  def lineno(); end

  def parse(); end

  def source(); end
end

class Prism::RipperCompat::SexpBuilder
end

class Prism::RipperCompat::SexpBuilder
end

class Prism::RipperCompat::SexpBuilderPP
end

class Prism::RipperCompat::SexpBuilderPP
end

class Prism::RipperCompat
  def self.sexp(source); end

  def self.sexp_raw(source); end
end

class Prism::SelfNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::SelfNode
  def self.type(); end
end

module Prism::Serialize
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  PATCH_VERSION = ::T.let(nil, ::T.untyped)
  TOKEN_TYPES = ::T.let(nil, ::T.untyped)
end

class Prism::Serialize::Loader
  def constant_pool(); end

  def constant_pool_offset(); end

  def encoding(); end

  def initialize(source, serialized); end

  def input(); end

  def io(); end

  def load_comments(); end

  def load_encoding(); end

  def load_header(); end

  def load_metadata(); end

  def load_nodes(); end

  def load_result(); end

  def load_start_line(); end

  def load_tokens(); end

  def load_tokens_result(); end

  def serialized(); end

  def source(); end

  def start_line(); end
end

class Prism::Serialize::Loader
end

module Prism::Serialize
  def self.load(input, serialized); end

  def self.load_tokens(source, serialized); end
end

class Prism::SingletonClassNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def class_keyword(); end

  def class_keyword_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def expression(); end

  def initialize(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def locals(); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::SingletonClassNode
  def self.type(); end
end

class Prism::Source
  def character_column(byte_offset); end

  def character_offset(byte_offset); end

  def column(byte_offset); end

  def initialize(source, start_line=T.unsafe(nil), offsets=T.unsafe(nil)); end

  def line(byte_offset); end

  def line_start(byte_offset); end

  def offsets(); end

  def slice(byte_offset, length); end

  def source(); end

  def start_line(); end

  def start_line=(start_line); end
end

class Prism::Source
end

class Prism::SourceEncodingNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::SourceEncodingNode
  def self.type(); end
end

class Prism::SourceFileNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def filepath(); end

  def initialize(filepath, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::SourceFileNode
  def self.type(); end
end

class Prism::SourceLineNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::SourceLineNode
  def self.type(); end
end

class Prism::SplatNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def expression(); end

  def initialize(operator_loc, expression, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def operator(); end

  def operator_loc(); end

  def type(); end
end

class Prism::SplatNode
  def self.type(); end
end

class Prism::StatementsNode
  def accept(visitor); end

  def body(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(body, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::StatementsNode
  def self.type(); end
end

module Prism::StringFlags
  FORCED_BINARY_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_UTF8_ENCODING = ::T.let(nil, ::T.untyped)
  FROZEN = ::T.let(nil, ::T.untyped)
end

module Prism::StringFlags
end

class Prism::StringNode
  include ::Prism::HeredocQuery
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def content(); end

  def content_loc(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def forced_binary_encoding?(); end

  def forced_utf8_encoding?(); end

  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end

  def unescaped(); end
end

class Prism::StringNode
  def self.type(); end
end

class Prism::SuperNode
  def accept(visitor); end

  def arguments(); end

  def block(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def lparen(); end

  def lparen_loc(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end
end

class Prism::SuperNode
  def self.type(); end
end

module Prism::SymbolFlags
  FORCED_BINARY_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_US_ASCII_ENCODING = ::T.let(nil, ::T.untyped)
  FORCED_UTF8_ENCODING = ::T.let(nil, ::T.untyped)
end

module Prism::SymbolFlags
end

class Prism::SymbolNode
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def forced_binary_encoding?(); end

  def forced_us_ascii_encoding?(); end

  def forced_utf8_encoding?(); end

  def initialize(flags, opening_loc, value_loc, closing_loc, unescaped, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end

  def unescaped(); end

  def value(); end

  def value_loc(); end
end

class Prism::SymbolNode
  def self.type(); end
end

class Prism::Token
  def ==(other); end

  def deconstruct_keys(keys); end

  def initialize(type, value, location); end

  def location(); end

  def type(); end

  def value(); end
end

class Prism::Token
end

class Prism::TrueNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(location); end

  def inspect(inspector=T.unsafe(nil)); end

  def type(); end
end

class Prism::TrueNode
  def self.type(); end
end

class Prism::UndefNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(names, keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def names(); end

  def type(); end
end

class Prism::UndefNode
  def self.type(); end
end

class Prism::UnlessNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def consequent(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def end_keyword(); end

  def end_keyword_loc(); end

  def initialize(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def predicate(); end

  def statements(); end

  def then_keyword(); end

  def then_keyword_loc(); end

  def type(); end
end

class Prism::UnlessNode
  def self.type(); end
end

class Prism::UntilNode
  def accept(visitor); end

  def begin_modifier?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def predicate(); end

  def statements(); end

  def type(); end
end

class Prism::UntilNode
  def self.type(); end
end

class Prism::Visitor
  def visit_alias_global_variable_node(node); end

  def visit_alias_method_node(node); end

  def visit_alternation_pattern_node(node); end

  def visit_and_node(node); end

  def visit_arguments_node(node); end

  def visit_array_node(node); end

  def visit_array_pattern_node(node); end

  def visit_assoc_node(node); end

  def visit_assoc_splat_node(node); end

  def visit_back_reference_read_node(node); end

  def visit_begin_node(node); end

  def visit_block_argument_node(node); end

  def visit_block_local_variable_node(node); end

  def visit_block_node(node); end

  def visit_block_parameter_node(node); end

  def visit_block_parameters_node(node); end

  def visit_break_node(node); end

  def visit_call_and_write_node(node); end

  def visit_call_node(node); end

  def visit_call_operator_write_node(node); end

  def visit_call_or_write_node(node); end

  def visit_call_target_node(node); end

  def visit_capture_pattern_node(node); end

  def visit_case_match_node(node); end

  def visit_case_node(node); end

  def visit_class_node(node); end

  def visit_class_variable_and_write_node(node); end

  def visit_class_variable_operator_write_node(node); end

  def visit_class_variable_or_write_node(node); end

  def visit_class_variable_read_node(node); end

  def visit_class_variable_target_node(node); end

  def visit_class_variable_write_node(node); end

  def visit_constant_and_write_node(node); end

  def visit_constant_operator_write_node(node); end

  def visit_constant_or_write_node(node); end

  def visit_constant_path_and_write_node(node); end

  def visit_constant_path_node(node); end

  def visit_constant_path_operator_write_node(node); end

  def visit_constant_path_or_write_node(node); end

  def visit_constant_path_target_node(node); end

  def visit_constant_path_write_node(node); end

  def visit_constant_read_node(node); end

  def visit_constant_target_node(node); end

  def visit_constant_write_node(node); end

  def visit_def_node(node); end

  def visit_defined_node(node); end

  def visit_else_node(node); end

  def visit_embedded_statements_node(node); end

  def visit_embedded_variable_node(node); end

  def visit_ensure_node(node); end

  def visit_false_node(node); end

  def visit_find_pattern_node(node); end

  def visit_flip_flop_node(node); end

  def visit_float_node(node); end

  def visit_for_node(node); end

  def visit_forwarding_arguments_node(node); end

  def visit_forwarding_parameter_node(node); end

  def visit_forwarding_super_node(node); end

  def visit_global_variable_and_write_node(node); end

  def visit_global_variable_operator_write_node(node); end

  def visit_global_variable_or_write_node(node); end

  def visit_global_variable_read_node(node); end

  def visit_global_variable_target_node(node); end

  def visit_global_variable_write_node(node); end

  def visit_hash_node(node); end

  def visit_hash_pattern_node(node); end

  def visit_if_node(node); end

  def visit_imaginary_node(node); end

  def visit_implicit_node(node); end

  def visit_implicit_rest_node(node); end

  def visit_in_node(node); end

  def visit_index_and_write_node(node); end

  def visit_index_operator_write_node(node); end

  def visit_index_or_write_node(node); end

  def visit_index_target_node(node); end

  def visit_instance_variable_and_write_node(node); end

  def visit_instance_variable_operator_write_node(node); end

  def visit_instance_variable_or_write_node(node); end

  def visit_instance_variable_read_node(node); end

  def visit_instance_variable_target_node(node); end

  def visit_instance_variable_write_node(node); end

  def visit_integer_node(node); end

  def visit_interpolated_match_last_line_node(node); end

  def visit_interpolated_regular_expression_node(node); end

  def visit_interpolated_string_node(node); end

  def visit_interpolated_symbol_node(node); end

  def visit_interpolated_x_string_node(node); end

  def visit_keyword_hash_node(node); end

  def visit_keyword_rest_parameter_node(node); end

  def visit_lambda_node(node); end

  def visit_local_variable_and_write_node(node); end

  def visit_local_variable_operator_write_node(node); end

  def visit_local_variable_or_write_node(node); end

  def visit_local_variable_read_node(node); end

  def visit_local_variable_target_node(node); end

  def visit_local_variable_write_node(node); end

  def visit_match_last_line_node(node); end

  def visit_match_predicate_node(node); end

  def visit_match_required_node(node); end

  def visit_match_write_node(node); end

  def visit_missing_node(node); end

  def visit_module_node(node); end

  def visit_multi_target_node(node); end

  def visit_multi_write_node(node); end

  def visit_next_node(node); end

  def visit_nil_node(node); end

  def visit_no_keywords_parameter_node(node); end

  def visit_numbered_parameters_node(node); end

  def visit_numbered_reference_read_node(node); end

  def visit_optional_keyword_parameter_node(node); end

  def visit_optional_parameter_node(node); end

  def visit_or_node(node); end

  def visit_parameters_node(node); end

  def visit_parentheses_node(node); end

  def visit_pinned_expression_node(node); end

  def visit_pinned_variable_node(node); end

  def visit_post_execution_node(node); end

  def visit_pre_execution_node(node); end

  def visit_program_node(node); end

  def visit_range_node(node); end

  def visit_rational_node(node); end

  def visit_redo_node(node); end

  def visit_regular_expression_node(node); end

  def visit_required_keyword_parameter_node(node); end

  def visit_required_parameter_node(node); end

  def visit_rescue_modifier_node(node); end

  def visit_rescue_node(node); end

  def visit_rest_parameter_node(node); end

  def visit_retry_node(node); end

  def visit_return_node(node); end

  def visit_self_node(node); end

  def visit_singleton_class_node(node); end

  def visit_source_encoding_node(node); end

  def visit_source_file_node(node); end

  def visit_source_line_node(node); end

  def visit_splat_node(node); end

  def visit_statements_node(node); end

  def visit_string_node(node); end

  def visit_super_node(node); end

  def visit_symbol_node(node); end

  def visit_true_node(node); end

  def visit_undef_node(node); end

  def visit_unless_node(node); end

  def visit_until_node(node); end

  def visit_when_node(node); end

  def visit_while_node(node); end

  def visit_x_string_node(node); end

  def visit_yield_node(node); end
end

class Prism::Visitor
end

class Prism::WhenNode
  def accept(visitor); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def conditions(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(keyword_loc, conditions, statements, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def statements(); end

  def type(); end
end

class Prism::WhenNode
  def self.type(); end
end

class Prism::WhileNode
  def accept(visitor); end

  def begin_modifier?(); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def predicate(); end

  def statements(); end

  def type(); end
end

class Prism::WhileNode
  def self.type(); end
end

class Prism::XStringNode
  include ::Prism::HeredocQuery
  def accept(visitor); end

  def child_nodes(); end

  def closing(); end

  def closing_loc(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def content(); end

  def content_loc(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def forced_binary_encoding?(); end

  def forced_utf8_encoding?(); end

  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def opening(); end

  def opening_loc(); end

  def type(); end

  def unescaped(); end
end

class Prism::XStringNode
  def self.type(); end
end

class Prism::YieldNode
  def accept(visitor); end

  def arguments(); end

  def child_nodes(); end

  def comment_targets(); end

  def compact_child_nodes(); end

  def copy(**params); end

  def deconstruct(); end

  def deconstruct_keys(keys); end

  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  def inspect(inspector=T.unsafe(nil)); end

  def keyword(); end

  def keyword_loc(); end

  def lparen(); end

  def lparen_loc(); end

  def rparen(); end

  def rparen_loc(); end

  def type(); end
end

class Prism::YieldNode
  def self.type(); end
end

module Prism
  def self.dump(*arg); end

  def self.dump_file(*arg); end

  def self.lex(*arg); end

  def self.lex_compat(source, **options); end

  def self.lex_file(*arg); end

  def self.lex_ripper(source); end

  def self.load(source, serialized); end

  def self.parse(*arg); end

  def self.parse_comments(*arg); end

  def self.parse_failure?(source, **options); end

  def self.parse_file(*arg); end

  def self.parse_file_comments(*arg); end

  def self.parse_file_failure?(filepath, **options); end

  def self.parse_file_success?(*arg); end

  def self.parse_lex(*arg); end

  def self.parse_lex_file(*arg); end

  def self.parse_success?(*arg); end
end

class Proc
  def <<(arg); end

  def >>(arg); end

  def clone(); end
end

module Process
  CLOCK_TAI = ::T.let(nil, ::T.untyped)
end

class Process::Status
  def self.wait(*arg); end
end

class Process::Tms
  def self.keyword_init?(); end
end

module Process
  extend ::ActiveSupport::ForkTracker::CoreExt
  extend ::DEBUGGER__::ForkInterceptor
  extend ::DEBUGGER__::ForkInterceptor::DaemonInterceptor
  def self.exit(*arg); end
end

module Psych
  LOADER_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Psych::ScalarScanner
  INTEGER_LEGACY = ::T.let(nil, ::T.untyped)
  INTEGER_STRICT = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::RestrictedYAMLTree
  DEFAULT_PERMITTED_CLASSES = ::T.let(nil, ::T.untyped)
end

module Psych
  extend ::Bootsnap::CompileCache::YAML::Psych4::Patch
end

module Puma
  HAS_FORK = ::T.let(nil, ::T.untyped)
  HAS_NATIVE_IO_WAIT = ::T.let(nil, ::T.untyped)
  HAS_SSL = ::T.let(nil, ::T.untyped)
  HAS_UNIX_SOCKET = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MRI = ::T.let(nil, ::T.untyped)
  IS_OSX = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  def activated_sockets(); end

  def add_ssl_listener(host, port, ctx, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_tcp_listener(host, port, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_unix_listener(path, umask=T.unsafe(nil), mode=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def close(); end

  def close_listeners(); end

  def connected_ports(); end

  def create_activated_fds(env_hash); end

  def create_inherited_fds(env_hash); end

  def env(sock); end

  def envs(); end

  def inherit_ssl_listener(fd, ctx); end

  def inherit_tcp_listener(host, port, fd); end

  def inherit_unix_listener(path, fd); end

  def inherited_fds(); end

  def initialize(log_writer, conf=T.unsafe(nil)); end

  def ios(); end

  def ios=(ios); end

  def listeners(); end

  def listeners=(listeners); end

  def localhost_authority(); end

  def localhost_authority_context(); end

  def parse(binds, log_writer=T.unsafe(nil), log_msg=T.unsafe(nil)); end

  def proto_env(); end

  def redirects_for_restart(); end

  def redirects_for_restart_env(); end

  def synthesize_binds_from_activated_fs(binds, only_matching); end

  def unix_paths(); end
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  def body(); end

  def call(); end

  def can_close?(); end

  def close(); end

  def closed?(); end

  def eagerly_finish(); end

  def env(); end

  def expect_proxy_proto=(val); end

  def finish(timeout); end

  def hijacked(); end

  def http_content_length_limit=(http_content_length_limit); end

  def http_content_length_limit_exceeded(); end

  def in_data_phase(); end

  def initialize(io, env=T.unsafe(nil)); end

  def io(); end

  def io_buffer(); end

  def io_ok?(); end

  def listener(); end

  def listener=(listener); end

  def peer_family(); end

  def peerip(); end

  def peerip=(peerip); end

  def ready(); end

  def remote_addr_header(); end

  def remote_addr_header=(remote_addr_header); end

  def reset(fast_check=T.unsafe(nil)); end

  def set_timeout(val); end

  def tempfile(); end

  def timeout(); end

  def timeout!(); end

  def timeout_at(); end

  def to_io(); end

  def try_to_finish(); end

  def try_to_parse_proxy_protocol(); end

  def write_error(status_code); end
  ALLOWED_TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE_INVALID = ::T.let(nil, ::T.untyped)
  CHUNK_VALID_ENDING = ::T.let(nil, ::T.untyped)
  CHUNK_VALID_ENDING_SIZE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_VALUE_INVALID = ::T.let(nil, ::T.untyped)
  EmptyBody = ::T.let(nil, ::T.untyped)
  MAX_CHUNK_EXCESS = ::T.let(nil, ::T.untyped)
  MAX_CHUNK_HEADER_SIZE = ::T.let(nil, ::T.untyped)
  TE_ERR_MSG = ::T.let(nil, ::T.untyped)
end

class Puma::Cluster
  def all_workers_booted?(); end

  def all_workers_idle_timed_out?(); end

  def all_workers_in_phase?(); end

  def check_workers(); end

  def cull_start_index(diff); end

  def cull_workers(); end

  def fork_worker!(); end

  def halt(); end

  def next_worker_index(); end

  def phased_restart(refork=T.unsafe(nil)); end

  def preload?(); end

  def reload_worker_directory(); end

  def restart(); end

  def run(); end

  def setup_signals(); end

  def spawn_worker(idx, master); end

  def spawn_workers(); end

  def start_phased_restart(); end

  def stop(); end

  def stop_blocked(); end

  def stop_workers(); end

  def worker(index, master); end

  def worker_at(idx); end

  def workers(); end

  def workers_to_cull(diff); end
end

class Puma::Cluster::Worker
  def index(); end

  def initialize(index:, master:, launcher:, pipes:, server: T.unsafe(nil)); end

  def master(); end

  def run(); end
end

class Puma::Cluster::WorkerHandle
  def boot!(); end

  def booted?(); end

  def hup(); end

  def index(); end

  def initialize(idx, pid, phase, options); end

  def kill(); end

  def last_checkin(); end

  def last_status(); end

  def phase(); end

  def phase=(phase); end

  def pid(); end

  def pid=(pid); end

  def ping!(status); end

  def ping_timeout(); end

  def signal(); end

  def started_at(); end

  def term(); end

  def term!(); end

  def term?(); end

  def uptime(); end
end

class Puma::Configuration
  def app(); end

  def app_configured?(); end

  def clamp(); end

  def config_files(); end

  def configure(); end

  def environment(); end

  def final_options(); end

  def flatten(); end

  def flatten!(); end

  def initialize(user_options=T.unsafe(nil), default_options=T.unsafe(nil), &block); end

  def load(); end

  def load_plugin(name); end

  def options(); end

  def plugins(); end

  def puma_default_options(); end

  def puma_options_from_env(); end

  def rackup(); end

  def run_hooks(key, arg, log_writer, hook_data=T.unsafe(nil)); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Puma::Configuration::ConfigMiddleware
  def call(env); end

  def initialize(config, app); end
end

class Puma::Configuration
  def self.random_token(); end

  def self.temp_path(); end
end

module Puma::Const
  BANNED_HEADER_KEY = ::T.let(nil, ::T.untyped)
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  DQUOTE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER_DELIMITER = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  IANA_HTTP_METHODS = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_KEY_REGEX = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_VALUE_REGEX = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_IPV4 = ::T.let(nil, ::T.untyped)
  LOCALHOST_IPV6 = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PROXY_PROTOCOL_V1_REGEX = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  SUPPORTED_HTTP_METHODS = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  UNSPECIFIED_IPV4 = ::T.let(nil, ::T.untyped)
  UNSPECIFIED_IPV6 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Puma::DSL
  def _load_from(path); end

  def _offer_plugins(); end

  def activate_control_app(url=T.unsafe(nil), opts=T.unsafe(nil)); end

  def after_worker_boot(&block); end

  def after_worker_fork(&block); end

  def app(obj=T.unsafe(nil), &block); end

  def before_fork(&block); end

  def bind(url); end

  def bind_to_activated_sockets(bind=T.unsafe(nil)); end

  def clean_thread_locals(which=T.unsafe(nil)); end

  def clear_binds!(); end

  def custom_logger(custom_logger); end

  def debug(); end

  def default_host(); end

  def directory(dir); end

  def drain_on_shutdown(which=T.unsafe(nil)); end

  def early_hints(answer=T.unsafe(nil)); end

  def environment(environment); end

  def extra_runtime_dependencies(answer=T.unsafe(nil)); end

  def first_data_timeout(seconds); end

  def force_shutdown_after(val=T.unsafe(nil)); end

  def fork_worker(after_requests=T.unsafe(nil)); end

  def get(key, default=T.unsafe(nil)); end

  def http_content_length_limit(limit); end

  def idle_timeout(seconds); end

  def initialize(options, config); end

  def inject(&blk); end

  def io_selector_backend(backend); end

  def load(file); end

  def log_formatter(&block); end

  def log_requests(which=T.unsafe(nil)); end

  def lowlevel_error_handler(obj=T.unsafe(nil), &block); end

  def max_fast_inline(num_of_requests); end

  def mutate_stdout_and_stderr_to_sync_on_write(enabled=T.unsafe(nil)); end

  def on_booted(&block); end

  def on_refork(key=T.unsafe(nil), &block); end

  def on_restart(&block); end

  def on_thread_exit(&block); end

  def on_thread_start(&block); end

  def on_worker_boot(key=T.unsafe(nil), &block); end

  def on_worker_fork(&block); end

  def on_worker_shutdown(key=T.unsafe(nil), &block); end

  def out_of_band(&block); end

  def persistent_timeout(seconds); end

  def pidfile(path); end

  def plugin(name); end

  def port(port, host=T.unsafe(nil)); end

  def preload_app!(answer=T.unsafe(nil)); end

  def prune_bundler(answer=T.unsafe(nil)); end

  def queue_requests(answer=T.unsafe(nil)); end

  def quiet(which=T.unsafe(nil)); end

  def rack_url_scheme(scheme=T.unsafe(nil)); end

  def rackup(path); end

  def raise_exception_on_sigterm(answer=T.unsafe(nil)); end

  def restart_command(cmd); end

  def set_default_host(host); end

  def set_remote_address(val=T.unsafe(nil)); end

  def shutdown_debug(val=T.unsafe(nil)); end

  def silence_fork_callback_warning(); end

  def silence_single_worker_warning(); end

  def ssl_bind(host, port, opts=T.unsafe(nil)); end

  def state_path(path); end

  def state_permission(permission); end

  def stdout_redirect(stdout=T.unsafe(nil), stderr=T.unsafe(nil), append=T.unsafe(nil)); end

  def supported_http_methods(methods); end

  def tag(string); end

  def threads(min, max); end

  def wait_for_less_busy_worker(val=T.unsafe(nil)); end

  def worker_boot_timeout(timeout); end

  def worker_check_interval(interval); end

  def worker_culling_strategy(strategy); end

  def worker_shutdown_timeout(timeout); end

  def worker_timeout(timeout); end

  def workers(count); end
  ON_WORKER_KEY = ::T.let(nil, ::T.untyped)
end

class Puma::DSL
  def self.ssl_bind_str(host, port, opts); end
end

class Puma::ErrorLogger
  def debug(options=T.unsafe(nil)); end

  def info(options=T.unsafe(nil)); end

  def initialize(ioerr); end

  def ioerr(); end

  def request_dump(req); end

  def request_headers(req); end

  def request_parsed?(req); end

  def request_title(req); end

  def title(options=T.unsafe(nil)); end
  LOG_QUEUE = ::T.let(nil, ::T.untyped)
  REQUEST_FORMAT = ::T.let(nil, ::T.untyped)
end

class Puma::ErrorLogger
  def self.stdio(); end
end

class Puma::Events
  def fire(hook, *args); end

  def fire_on_booted!(); end

  def fire_on_restart!(); end

  def fire_on_stopped!(); end

  def on_booted(&block); end

  def on_restart(&block); end

  def on_stopped(&block); end

  def register(hook, obj=T.unsafe(nil), &blk); end
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::IOBuffer
  def append(*arg); end

  def clear(); end

  def empty?(); end

  def initialize(); end

  def read_and_reset(); end

  def reset(); end
end

module Puma::JSONSerialization
  BACKSLASH = ::T.let(nil, ::T.untyped)
  CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
end

class Puma::Launcher
  def binder(); end

  def close_binder_listeners(); end

  def config(); end

  def connected_ports(); end

  def delete_pidfile(); end

  def events(); end

  def halt(); end

  def initialize(conf, launcher_args=T.unsafe(nil)); end

  def log_writer(); end

  def options(); end

  def phased_restart(); end

  def refork(); end

  def restart(); end

  def restart_args(); end

  def restart_dir(); end

  def run(); end

  def stats(); end

  def stop(); end

  def thread_status(); end

  def write_state(); end
end

class Puma::Launcher::BundlePruner
  def initialize(original_argv, extra_runtime_dependencies, log_writer); end

  def prune(); end
end

class Puma::Launcher::BundlePruner
end

class Puma::LogWriter
  def connection_error(error, req, text=T.unsafe(nil)); end

  def custom_logger(); end

  def custom_logger=(custom_logger); end

  def debug(str); end

  def debug?(); end

  def debug_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def error(str); end

  def format(str); end

  def formatter(); end

  def formatter=(formatter); end

  def initialize(stdout, stderr); end

  def log(str); end

  def parse_error(error, req); end

  def ssl_error(error, ssl_socket); end

  def stderr(); end

  def stdout(); end

  def unknown_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def write(str); end
  DEFAULT = ::T.let(nil, ::T.untyped)
  LOG_QUEUE = ::T.let(nil, ::T.untyped)
end

class Puma::LogWriter::DefaultFormatter
  def call(str); end
end

class Puma::LogWriter::PidFormatter
  def call(str); end
end

class Puma::LogWriter
  def self.null(); end

  def self.stdio(); end

  def self.strings(); end
end

module Puma::MiniSSL
  HAS_TLS1_3 = ::T.let(nil, ::T.untyped)
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_SSL3 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1_1 = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFICATION_FLAGS = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::ContextBuilder
  def context(); end

  def initialize(params, log_writer); end
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

class Puma::NullIO
  def close(); end

  def closed?(); end

  def each(&blk); end

  def eof?(); end

  def flush(); end

  def gets(); end

  def puts(*ary); end

  def read(length=T.unsafe(nil), buffer=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def string(); end

  def sync(); end

  def sync=(v); end

  def write(*ary); end
end

class Puma::Plugin
  def in_background(&blk); end
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Puma::Plugin
  def self.create(&blk); end

  def self.extract_name(ary); end
end

class Puma::PluginLoader
  def create(name); end

  def fire_starts(launcher); end
end

class Puma::PluginRegistry
  def add_background(blk); end

  def find(name); end

  def fire_background(); end

  def register(name, cls); end
end

class Puma::Rack::Builder
  def call(env); end

  def initialize(default_app=T.unsafe(nil), &block); end

  def map(path, &block); end

  def run(app); end

  def to_app(); end

  def use(middleware, *args, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
end

class Puma::Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.new_from_string(builder_script, file=T.unsafe(nil)); end

  def self.parse_file(config, opts=T.unsafe(nil)); end
end

class Puma::Rack::Options
  def handler_opts(options); end

  def parse!(args); end
end

class Puma::Reactor
  def add(client); end

  def initialize(backend, &block); end

  def run(background=T.unsafe(nil)); end

  def shutdown(); end
end

module Puma::Request
  def default_server_port(env); end

  def handle_request(client, requests); end

  def prepare_response(status, headers, res_body, requests, client); end
  BODY_LEN_MAX = ::T.let(nil, ::T.untyped)
  CUSTOM_STAT = ::T.let(nil, ::T.untyped)
  IO_BODY_MAX = ::T.let(nil, ::T.untyped)
  IO_BUFFER_LEN_MAX = ::T.let(nil, ::T.untyped)
  SOCKET_WRITE_ERR_MSG = ::T.let(nil, ::T.untyped)
end

class Puma::Runner
  def app(); end

  def close_control_listeners(); end

  def debug(str); end

  def development?(); end

  def error(str); end

  def initialize(launcher); end

  def load_and_bind(); end

  def log(str); end

  def options(); end

  def output_header(mode); end

  def redirect_io(); end

  def redirected_io?(); end

  def ruby_engine(); end

  def start_control(); end

  def start_server(); end

  def stop_control(); end

  def test?(); end

  def wakeup!(); end
end

class Puma::Server
  def add_ssl_listener(host, port, ctx, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_tcp_listener(host, port, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_unix_listener(path, umask=T.unsafe(nil), mode=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def app(); end

  def app=(app); end

  def auto_trim_time(); end

  def backlog(); end

  def begin_restart(sync=T.unsafe(nil)); end

  def binder(); end

  def binder=(binder); end

  def client_error(e, client, requests=T.unsafe(nil)); end

  def closed_socket?(socket); end

  def connected_ports(); end

  def cork_socket(socket); end

  def early_hints(); end

  def events(); end

  def first_data_timeout(); end

  def graceful_shutdown(); end

  def halt(sync=T.unsafe(nil)); end

  def handle_check(); end

  def handle_servers(); end

  def inherit_binder(bind); end

  def initialize(app, events=T.unsafe(nil), options=T.unsafe(nil)); end

  def leak_stack_on_error(); end

  def log_writer(); end

  def lowlevel_error(e, env, status=T.unsafe(nil)); end

  def max_threads(); end

  def min_threads(); end

  def persistent_timeout(); end

  def pool_capacity(); end

  def process_client(client); end

  def reactor_wakeup(client); end

  def reaping_time(); end

  def requests_count(); end

  def run(background=T.unsafe(nil), thread_name: T.unsafe(nil)); end

  def running(); end

  def shutting_down?(); end

  def stats(); end

  def stop(sync=T.unsafe(nil)); end

  def thread(); end

  def uncork_socket(socket); end

  def with_force_shutdown(client, &block); end
  STAT_METHODS = ::T.let(nil, ::T.untyped)
  THREAD_LOCAL_KEY = ::T.let(nil, ::T.untyped)
  UNPACK_TCP_STATE_FROM_TCP_INFO = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  def self.current(); end
end

class Puma::Single
  def halt(); end

  def restart(); end

  def run(); end

  def stop(); end

  def stop_blocked(); end
end

class Puma::ThreadPool
  def <<(work); end

  def auto_reap!(timeout=T.unsafe(nil)); end

  def auto_trim!(timeout=T.unsafe(nil)); end

  def backlog(); end

  def busy_threads(); end

  def initialize(name, options=T.unsafe(nil), &block); end

  def pool_capacity(); end

  def reap(); end

  def shutdown(timeout=T.unsafe(nil)); end

  def spawned(); end

  def trim(force=T.unsafe(nil)); end

  def trim_requested(); end

  def wait_for_less_busy_worker(delay_s); end

  def wait_until_not_full(); end

  def waiting(); end

  def with_force_shutdown(); end

  def with_mutex(&block); end
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool::Automaton
  def initialize(pool, timeout, thread_name, message); end

  def start!(); end

  def stop(); end
end

class Puma::ThreadPool
  def self.clean_thread_locals(); end
end

class Puma::UserFileDefaultOptions
  def [](key); end

  def []=(key, value); end

  def all_of(key); end

  def default_options(); end

  def fetch(key, default_value=T.unsafe(nil)); end

  def file_options(); end

  def final_options(); end

  def finalize_values(); end

  def initialize(user_options, default_options); end

  def user_options(); end
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Puma::Util::HeaderHash
  def [](k); end

  def []=(k, v); end

  def delete(k); end

  def has_key?(k); end

  def include?(k); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(k); end

  def member?(k); end

  def merge(other); end

  def merge!(other); end

  def replace(other); end
end

class Puma::Util::HeaderHash
  def self.new(hash=T.unsafe(nil)); end
end

module Puma::Util
  def self.escape(s, encoding=T.unsafe(nil)); end

  def self.parse_query(qs, d=T.unsafe(nil), &unescaper); end

  def self.pipe(); end

  def self.purge_interrupt_queue(); end

  def self.unescape(s, encoding=T.unsafe(nil)); end
end

module Racc
  Copyright = ::T.let(nil, ::T.untyped)
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  BUILDER_TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONNECT = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_EARLY_HINTS = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_ERROR = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_PAIRS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RESPONSE_FINISHED = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractHandler
  def initialize(app, realm=T.unsafe(nil), &authenticator); end

  def realm(); end

  def realm=(realm); end
end

class Rack::Auth::AbstractHandler
end

class Rack::Auth::AbstractRequest
  def initialize(env); end

  def params(); end

  def parts(); end

  def provided?(); end

  def request(); end

  def scheme(); end

  def valid?(); end
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractRequest
end

class Rack::Auth::Basic
  def call(env); end
end

class Rack::Auth::Basic::Request
  def basic?(); end

  def credentials(); end

  def username(); end
end

class Rack::Auth::Basic::Request
end

class Rack::Auth::Basic
end

class Rack::Builder
  def call(env); end

  def freeze_app(); end

  def initialize(default_app=T.unsafe(nil), **options, &block); end

  def map(path, &block); end

  def options(); end

  def run(app=T.unsafe(nil), &block); end

  def to_app(); end

  def use(middleware, *args, **arg, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.load_file(path, **options); end

  def self.new_from_string(builder_script, path=T.unsafe(nil), **options); end

  def self.parse_file(path, **options); end
end

class Rack::Cascade
  def <<(app); end

  def add(app); end

  def apps(); end

  def call(env); end

  def include?(app); end

  def initialize(apps, cascade_for=T.unsafe(nil)); end
end

class Rack::Cascade
end

class Rack::CommonLogger
  def call(env); end

  def initialize(app, logger=T.unsafe(nil)); end
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
end

class Rack::Config
  def call(env); end

  def initialize(app, &block); end
end

class Rack::Config
end

class Rack::ContentLength
  include ::Rack::Utils
  def call(env); end

  def initialize(app); end
end

class Rack::ContentLength
end

class Rack::ContentType
  include ::Rack::Utils
  def call(env); end

  def initialize(app, content_type=T.unsafe(nil)); end
end

class Rack::ContentType
end

class Rack::Deflater
  def call(env); end

  def initialize(app, options=T.unsafe(nil)); end
end

class Rack::Deflater::GzipStream
  def close(); end

  def each(&block); end

  def initialize(body, mtime, sync); end

  def write(data); end
  BUFFER_LENGTH = ::T.let(nil, ::T.untyped)
end

class Rack::Deflater::GzipStream
end

class Rack::Deflater
end

class Rack::Directory
  def call(env); end

  def check_bad_request(path_info); end

  def check_forbidden(path_info); end

  def entity_not_found(path_info); end

  def filesize_format(int); end

  def get(env); end

  def initialize(root, app=T.unsafe(nil)); end

  def list_directory(path_info, path, script_name); end

  def list_path(env, path, path_info, script_name); end

  def root(); end

  def stat(path); end
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

class Rack::Events
  def call(env); end

  def initialize(app, handlers); end
end

module Rack::Events::Abstract
  def on_commit(req, res); end

  def on_error(req, res, e); end

  def on_finish(req, res); end

  def on_send(req, res); end

  def on_start(req, res); end
end

module Rack::Events::Abstract
end

class Rack::Events::BufferedResponse
  def body(); end

  def initialize(status, headers, body); end

  def to_a(); end
end

class Rack::Events::BufferedResponse
end

class Rack::Events::EventedBodyProxy
  def each(&blk); end

  def initialize(body, request, response, handlers, &block); end

  def request(); end

  def response(); end
end

class Rack::Events::EventedBodyProxy
end

class Rack::Events
end

class Rack::Files
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::ForwardRequest
  def env(); end

  def initialize(url, env=T.unsafe(nil)); end

  def url(); end
end

class Rack::ForwardRequest
end

class Rack::Headers
  KNOWN_HEADERS = ::T.let(nil, ::T.untyped)
end

class Rack::Lint
  def call(env=T.unsafe(nil)); end

  def initialize(app); end
  REQUEST_PATH_ABSOLUTE_FORM = ::T.let(nil, ::T.untyped)
  REQUEST_PATH_ASTERISK_FORM = ::T.let(nil, ::T.untyped)
  REQUEST_PATH_AUTHORITY_FORM = ::T.let(nil, ::T.untyped)
  REQUEST_PATH_ORIGIN_FORM = ::T.let(nil, ::T.untyped)
end

class Rack::Lint::LintError
end

class Rack::Lint::LintError
end

class Rack::Lint::Wrapper
  def call(stream); end

  def check_content_length_header(status, headers); end

  def check_content_type_header(status, headers); end

  def check_early_hints(env); end

  def check_environment(env); end

  def check_error_stream(error); end

  def check_header_value(key, value); end

  def check_headers(headers); end

  def check_hijack(env); end

  def check_hijack_response(headers, env); end

  def check_input_stream(input); end

  def check_rack_protocol_header(status, headers); end

  def check_status(status); end

  def close(); end

  def each(&blk); end

  def initialize(app, env); end

  def respond_to?(name, *arg); end

  def response(); end

  def to_ary(); end

  def to_path(); end

  def verify_content_length(size); end

  def verify_to_path(); end
  BODY_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Lint::Wrapper::ErrorWrapper
  def close(*args); end

  def flush(); end

  def initialize(error); end

  def puts(str); end

  def write(str); end
end

class Rack::Lint::Wrapper::ErrorWrapper
end

class Rack::Lint::Wrapper::InputWrapper
  def close(*args); end

  def each(*args, &blk); end

  def gets(*args); end

  def initialize(input); end

  def read(*args); end
end

class Rack::Lint::Wrapper::InputWrapper
end

class Rack::Lint::Wrapper::StreamWrapper
  def <<(*args, **arg, &block); end

  def close(*args, **arg, &block); end

  def close_read(*args, **arg, &block); end

  def close_write(*args, **arg, &block); end

  def closed?(*args, **arg, &block); end

  def flush(*args, **arg, &block); end

  def initialize(stream); end

  def read(*args, **arg, &block); end

  def write(*args, **arg, &block); end
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Lint::Wrapper::StreamWrapper
  extend ::Forwardable
end

class Rack::Lint::Wrapper
end

class Rack::Lint
end

class Rack::Lock
  def call(env); end

  def initialize(app, mutex=T.unsafe(nil)); end
end

class Rack::Lock
end

class Rack::Logger
  def call(env); end

  def initialize(app, level=T.unsafe(nil)); end
end

class Rack::Logger
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
  def call(env); end

  def initialize(app); end

  def method_override(env); end
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

Rack::MockSession = Rack::Test::Session

module Rack::Multipart
  EOL = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::BoundaryTooLongError
  include ::Rack::BadRequest
end

class Rack::Multipart::BoundaryTooLongError
end

class Rack::Multipart::EmptyContentError
  include ::Rack::BadRequest
end

class Rack::Multipart::EmptyContentError
end

Rack::Multipart::Error = Rack::Multipart::BoundaryTooLongError

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::MissingInputError
  include ::Rack::BadRequest
end

class Rack::Multipart::MissingInputError
end

class Rack::Multipart::MultipartPartLimitError
  include ::Rack::BadRequest
end

class Rack::Multipart::MultipartPartLimitError
end

class Rack::Multipart::MultipartTotalPartLimitError
  include ::Rack::BadRequest
end

class Rack::Multipart::MultipartTotalPartLimitError
end

class Rack::Multipart::ParamList
  def <<(pair); end

  def to_params_hash(); end
end

class Rack::Multipart::ParamList
  def self.make_params(); end

  def self.normalize_params(params, key, value); end
end

class Rack::Multipart::Parser
  def initialize(boundary, tempfile, bufsize, query_parser); end

  def parse(io); end

  def result(); end

  def state(); end
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  CONTENT_DISPOSITION_MAX_BYTES = ::T.let(nil, ::T.untyped)
  CONTENT_DISPOSITION_MAX_PARAMS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Parser::BoundedIO
  def initialize(io, content_length); end

  def read(size, outbuf=T.unsafe(nil)); end
end

class Rack::Multipart::Parser::BoundedIO
end

class Rack::Multipart::Parser::Collector
  include ::Enumerable
  def each(&blk); end

  def initialize(tempfile); end

  def on_mime_body(mime_index, content); end

  def on_mime_finish(mime_index); end

  def on_mime_head(mime_index, head, filename, content_type, name); end
end

class Rack::Multipart::Parser::Collector::BufferPart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::BufferPart
end

class Rack::Multipart::Parser::Collector::MimePart
  def get_data(); end
end

class Rack::Multipart::Parser::Collector::MimePart
end

class Rack::Multipart::Parser::Collector::TempfilePart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::TempfilePart
end

class Rack::Multipart::Parser::Collector
end

class Rack::Multipart::Parser::MultipartInfo
  def params(); end

  def params=(_); end

  def tmp_files(); end

  def tmp_files=(_); end
end

class Rack::Multipart::Parser::MultipartInfo
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Rack::Multipart::Parser
  def self.parse(io, content_length, content_type, tmpfile, bufsize, qp); end

  def self.parse_boundary(content_type); end
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

module Rack::Multipart
  def self.build_multipart(params, first=T.unsafe(nil)); end

  def self.extract_multipart(request, params=T.unsafe(nil)); end

  def self.parse_multipart(env, params=T.unsafe(nil)); end
end

class Rack::NullLogger
  def <<(msg); end

  def add(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def call(env); end

  def close(); end

  def datetime_format(); end

  def datetime_format=(datetime_format); end

  def debug(progname=T.unsafe(nil), &block); end

  def debug!(); end

  def debug?(); end

  def error(progname=T.unsafe(nil), &block); end

  def error!(); end

  def error?(); end

  def fatal(progname=T.unsafe(nil), &block); end

  def fatal!(); end

  def fatal?(); end

  def formatter(); end

  def formatter=(formatter); end

  def info(progname=T.unsafe(nil), &block); end

  def info!(); end

  def info?(); end

  def initialize(app); end

  def level(); end

  def level=(level); end

  def log(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def progname(); end

  def progname=(progname); end

  def reopen(logdev=T.unsafe(nil)); end

  def sev_threshold(); end

  def sev_threshold=(sev_threshold); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end

  def warn!(); end

  def warn?(); end
end

class Rack::NullLogger
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Recursive
  def _call(env); end

  def call(env); end

  def include(env, path); end

  def initialize(app); end
end

class Rack::Recursive
end

class Rack::Reloader
  def call(env); end

  def initialize(app, cooldown=T.unsafe(nil), backend=T.unsafe(nil)); end

  def reload!(stderr=T.unsafe(nil)); end

  def safe_load(file, mtime, stderr=T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  def figure_path(file, paths); end

  def rotation(); end

  def safe_stat(file); end
end

module Rack::Reloader::Stat
end

class Rack::Reloader
end

class Rack::Request
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_FORWARDED = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Rack::RewindableInput
  def close(); end

  def each(&block); end

  def gets(); end

  def initialize(io); end

  def read(*args); end

  def rewind(); end

  def size(); end
end

class Rack::RewindableInput::Middleware
  def call(env); end

  def initialize(app); end
end

class Rack::RewindableInput::Middleware
end

class Rack::RewindableInput
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

module Rack::Session
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Cookie
  def coder(); end

  def encryptors(); end
end

class Rack::Session::Cookie::Base64
  def decode(str); end

  def encode(str); end
end

class Rack::Session::Cookie::Base64::JSON
  def encode(obj); end
end

class Rack::Session::Cookie::Base64::JSON
end

class Rack::Session::Cookie::Base64::Marshal
end

class Rack::Session::Cookie::Base64::Marshal
end

class Rack::Session::Cookie::Base64::ZipJSON
  def encode(obj); end
end

class Rack::Session::Cookie::Base64::ZipJSON
end

class Rack::Session::Cookie::Base64
end

class Rack::Session::Cookie::Identity
  def decode(str); end

  def encode(str); end
end

class Rack::Session::Cookie::Identity
end

class Rack::Session::Cookie::Marshal
  def decode(str); end

  def encode(str); end
end

class Rack::Session::Cookie::Marshal
end

class Rack::Session::Cookie::SessionId
  def cookie_value(); end

  def initialize(session_id, cookie_value); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Cookie::SessionId
end

class Rack::Session::Cookie
end

class Rack::Session::Encryptor
  def decrypt(base64_data); end

  def encrypt(message); end

  def initialize(secret, opts=T.unsafe(nil)); end
end

class Rack::Session::Encryptor::Error
end

class Rack::Session::Encryptor::Error
end

class Rack::Session::Encryptor::InvalidMessage
end

class Rack::Session::Encryptor::InvalidMessage
end

class Rack::Session::Encryptor::InvalidSignature
end

class Rack::Session::Encryptor::InvalidSignature
end

class Rack::Session::Encryptor
end

class Rack::Session::SessionId
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
  def call(env); end

  def dump_exception(exception); end

  def h(obj); end

  def initialize(app); end

  def prefers_plaintext?(env); end

  def pretty(env, exception); end

  def template(); end
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions::Frame
  def context_line(); end

  def context_line=(_); end

  def filename(); end

  def filename=(_); end

  def function(); end

  def function=(_); end

  def lineno(); end

  def lineno=(_); end

  def post_context(); end

  def post_context=(_); end

  def post_context_lineno(); end

  def post_context_lineno=(_); end

  def pre_context(); end

  def pre_context=(_); end

  def pre_context_lineno(); end

  def pre_context_lineno=(_); end
end

class Rack::ShowExceptions::Frame
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Rack::ShowExceptions
end

class Rack::ShowStatus
  def call(env); end

  def h(obj); end

  def initialize(app); end
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
end

class Rack::Static
  def add_index_root?(path); end

  def applicable_rules(path); end

  def call(env); end

  def can_serve(path); end

  def initialize(app, options=T.unsafe(nil)); end

  def overwrite_file_path(path); end

  def route_file(path); end
end

class Rack::Static
end

class Rack::TempfileReaper
  def call(env); end

  def initialize(app); end
end

class Rack::TempfileReaper
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  END_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  START_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

class Rack::URLMap
  def call(env); end

  def initialize(map=T.unsafe(nil)); end

  def remap(map); end
end

class Rack::URLMap
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

Rack::Utils::ParamsTooDeepError = Rack::QueryParser::ParamsTooDeepError

class Ractor::ClosedError
end

class Ractor::ClosedError
end

class Ractor::Error
end

class Ractor::Error
end

class Ractor::IsolationError
end

class Ractor::IsolationError
end

class Ractor::MovedError
end

class Ractor::MovedError
end

class Ractor::MovedObject
  def !(*arg); end

  def !=(*arg); end

  def ==(*arg); end

  def __id__(*arg); end

  def equal?(*arg); end
end

class Ractor::MovedObject
end

class Ractor::RemoteError
  def ractor(); end
end

class Ractor::RemoteError
end

class Ractor::UnsafeError
end

class Ractor::UnsafeError
end

class Ractor
  def self.new(*args, name: T.unsafe(nil), &block); end
end

class Rails::ApplicationController
end

class Rails::ApplicationController
end

class Rails::BacktraceCleaner
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_PATTERN = ::T.let(nil, ::T.untyped)
end

module Rails::Command
  VERSION_MAPPINGS = ::T.let(nil, ::T.untyped)
end

module Rails::Command::Actions
  def boot_application!(); end

  def load_environment_config!(); end

  def load_generators(); end

  def load_tasks(); end

  def require_application!(); end

  def set_application_directory!(); end
end

module Rails::Command::Actions
end

class Rails::Command::Base
  include ::Rails::Command::Actions
  def current_subcommand(); end

  def executable(*arg, **arg1, &arg2); end

  def invoke_command(command, *arg); end
end

class Rails::Command::Base::Error
end

class Rails::Command::Base::Error
end

class Rails::Command::Base
  def self.banner(command=T.unsafe(nil), *arg); end

  def self.base_name(); end

  def self.bin(); end

  def self.bin=(value); end

  def self.bin?(); end

  def self.class_usage(); end

  def self.command_name(); end

  def self.default_command_root(); end

  def self.desc(usage=T.unsafe(nil), description=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.engine?(); end

  def self.executable(command_name=T.unsafe(nil)); end

  def self.help(shell, *arg); end

  def self.hide_command!(); end

  def self.inherited(base); end

  def self.perform(command, args, config); end

  def self.printing_commands(); end

  def self.usage_path(); end
end

module Rails::Command::Behavior::ClassMethods
  def no_color!(); end

  def subclasses(); end
end

class Rails::Command::CorrectableNameError
  def initialize(message, name, alternatives); end

  def name(); end
end

class Rails::Command::UnrecognizedCommandError
  def initialize(name); end
end

module Rails::Command
  def self.application_root(); end

  def self.environment(); end

  def self.find_by_namespace(namespace, command_name=T.unsafe(nil)); end

  def self.hidden_commands(); end

  def self.invoke(full_namespace, args=T.unsafe(nil), **config); end

  def self.printing_commands(); end

  def self.root(); end
end

module Rails::Generators
  def namespace(); end

  def namespace=(val); end
end

module Rails::Generators::Actions
  def add_source(source, options=T.unsafe(nil), &block); end

  def application(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def environment(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def gem(*args); end

  def gem_group(*names, &block); end

  def generate(what, *args); end

  def git(commands=T.unsafe(nil)); end

  def github(repo, options=T.unsafe(nil), &block); end

  def initialize(*arg); end

  def initializer(filename, data=T.unsafe(nil)); end

  def lib(filename, data=T.unsafe(nil)); end

  def rails_command(command, options=T.unsafe(nil)); end

  def rake(command, options=T.unsafe(nil)); end

  def rakefile(filename, data=T.unsafe(nil)); end

  def readme(path); end

  def route(routing_code, namespace: T.unsafe(nil)); end

  def vendor(filename, data=T.unsafe(nil)); end
end

class Rails::Generators::Actions::CreateMigration
  def existing_migration(); end

  def migration_dir(); end

  def migration_file_name(); end

  def relative_existing_migration(); end
end

class Rails::Generators::Actions::CreateMigration
end

module Rails::Generators::Actions
end

class Rails::Generators::ActiveModel
  def destroy(); end

  def errors(); end

  def initialize(name); end

  def name(); end

  def save(); end

  def update(params=T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def self.all(klass); end

  def self.build(klass, params=T.unsafe(nil)); end

  def self.find(klass, params=T.unsafe(nil)); end
end

class Rails::Generators::Base
  include ::Thor::Actions
  include ::Rails::Generators::Actions
end

class Rails::Generators::Base
  def self.add_shebang_option!(); end

  def self.base_name(); end

  def self.base_root(); end

  def self.default_aliases_for_option(name, options); end

  def self.default_for_option(config, name, options, default); end

  def self.default_generator_root(); end

  def self.default_source_root(); end

  def self.default_value_for_option(name, options); end

  def self.generator_name(); end

  def self.hide!(); end

  def self.hook_for(*names, &block); end

  def self.hooks(); end

  def self.inherited(base); end

  def self.prepare_for_invocation(name, value); end

  def self.remove_hook_for(*names); end

  def self.usage_path(); end
end

class Rails::Generators::Database
  def base_package(); end

  def build_package(); end

  def feature(); end

  def feature_name(); end

  def gem(); end

  def host(); end

  def name(); end

  def port(); end

  def service(); end

  def socket(); end

  def volume(); end
end

class Rails::Generators::Database::MariaDB
  include ::Rails::Generators::Database::MySqlSocket
end

class Rails::Generators::Database::MariaDB
end

class Rails::Generators::Database::MySQL
  include ::Rails::Generators::Database::MySqlSocket
end

class Rails::Generators::Database::MySQL
end

module Rails::Generators::Database::MySqlSocket
  def host(); end

  def socket(); end
end

module Rails::Generators::Database::MySqlSocket
end

class Rails::Generators::Database::Null
end

class Rails::Generators::Database::Null
end

class Rails::Generators::Database::PostgreSQL
end

class Rails::Generators::Database::PostgreSQL
end

class Rails::Generators::Database::SQLite3
end

class Rails::Generators::Database::SQLite3
end

class Rails::Generators::Database
  def self.all(); end

  def self.build(database_name); end
end

module Rails::Generators::Migration
  def create_migration(destination, data, config=T.unsafe(nil), &block); end

  def migration_class_name(); end

  def migration_file_name(); end

  def migration_number(); end

  def migration_template(source, destination, config=T.unsafe(nil)); end

  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end

  def migration_exists?(dirname, file_name); end

  def migration_lookup_at(dirname); end

  def next_migration_number(dirname); end
end

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern
end

class Rails::Generators::NamedBase
  def file_name(); end

  def initialize(args, *options); end

  def js_template(source, destination); end

  def name(); end

  def name=(name); end
end

class Rails::Generators::NamedBase
  def self.check_class_collision(options=T.unsafe(nil)); end
end

module Rails::Generators::ResourceHelpers
  def initialize(*args); end
end

module Rails::Generators::ResourceHelpers
  def self.included(base); end
end

class Rails::Generators::TestCase
  include ::FileUtils::StreamUtils_
  def current_path(); end

  def current_path=(current_path); end

  def current_path?(); end

  def default_arguments(); end

  def default_arguments=(default_arguments); end

  def default_arguments?(); end

  def destination_root(); end

  def destination_root=(destination_root); end

  def destination_root?(); end

  def generator_class(); end

  def generator_class=(generator_class); end

  def generator_class?(); end
end

class Rails::Generators::TestCase
  def self.current_path(); end

  def self.current_path=(value); end

  def self.current_path?(); end

  def self.default_arguments(); end

  def self.default_arguments=(value); end

  def self.default_arguments?(); end

  def self.destination_root(); end

  def self.destination_root=(value); end

  def self.destination_root?(); end

  def self.generator_class(); end

  def self.generator_class=(value); end

  def self.generator_class?(); end
end

module Rails::Generators::Testing::Assertions
  def assert_class_method(method, content, &block); end

  def assert_directory(relative, *contents); end

  def assert_field_default_value(attribute_type, value); end

  def assert_field_type(attribute_type, field_type); end

  def assert_file(relative, *contents); end

  def assert_initializer(name, *contents, &block); end

  def assert_instance_method(method, content); end

  def assert_method(method, content); end

  def assert_migration(relative, *contents, &block); end

  def assert_no_directory(relative); end

  def assert_no_file(relative); end

  def assert_no_migration(relative); end
end

module Rails::Generators::Testing::Behavior
  def create_generated_attribute(attribute_type, name=T.unsafe(nil), index=T.unsafe(nil)); end

  def generator(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def run_generator(args=T.unsafe(nil), config=T.unsafe(nil)); end
end

module Rails::Generators::Testing::SetupAndTeardown
  def setup(); end

  def teardown(); end
end

module Rails::Generators
  def self.add_generated_file(file); end

  def self.after_generate_callbacks(); end

  def self.aliases(); end

  def self.api_only!(); end

  def self.configure!(config); end

  def self.fallbacks(); end

  def self.find_by_namespace(name, base=T.unsafe(nil), context=T.unsafe(nil)); end

  def self.help(command=T.unsafe(nil)); end

  def self.hidden_namespaces(); end

  def self.hide_namespace(*namespaces); end

  def self.hide_namespaces(*namespaces); end

  def self.invoke(namespace, args=T.unsafe(nil), config=T.unsafe(nil)); end

  def self.namespace(); end

  def self.namespace=(val); end

  def self.options(); end

  def self.print_generators(); end

  def self.public_namespaces(); end

  def self.sorted_groups(); end

  def self.templates_path(); end
end

module Rails::HTML::Concern::Scrubber::SafeList
  DEFAULT_ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_ALLOWED_TAGS = ::T.let(nil, ::T.untyped)
end

Rails::HTML::FullSanitizer = Rails::HTML4::FullSanitizer

Rails::HTML::LinkSanitizer = Rails::HTML4::LinkSanitizer

Rails::HTML::SafeListSanitizer = Rails::HTML4::SafeListSanitizer

class Rails::HTML::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

Rails::HTML::WhiteListSanitizer = Rails::HTML4::SafeListSanitizer

class Rails::HealthController
  def show(); end
end

class Rails::HealthController
end

Rails::Html = Rails::HTML

module Rails::Info
  def properties(); end

  def properties=(val); end
end

module Rails::Info
  def self.properties(); end

  def self.properties=(val); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def index(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

class Rails::MailersController
  def download(); end

  def index(); end

  def preview(); end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  def attachment_url(*arg, **arg1, &arg2); end

  def locale_query(*arg, **arg1, &arg2); end

  def part_query(*arg, **arg1, &arg2); end
end

module Rails::MailersController::HelperMethods
end

class Rails::MailersController
end

class Rails::PwaController
  def manifest(); end

  def service_worker(); end
end

class Rails::PwaController
end

class Rails::TestUnit::Runner
  PATH_ARGUMENT_PATTERN = ::T.let(nil, ::T.untyped)
  TEST_FOLDERS = ::T.let(nil, ::T.untyped)
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

class Random::Base
  include ::Random::Formatter
  def bytes(arg); end

  def initialize(*arg); end

  def seed(); end
end

class Random::Base
  extend ::Random::Formatter
end

class Random
  def self.bytes(arg); end

  def self.seed(); end
end

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::EachTimeWithZone
  def %(arg); end

  def entries(); end

  def reverse_each(); end

  def to_a(); end
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end
end

class Refinement
  def target(); end
end

class Regexp
  def timeout(); end
end

class Regexp
  def self.linear_time?(*arg); end
end

module Reline
  DEFAULT_DIALOG_CONTEXT = ::T.let(nil, ::T.untyped)
  DEFAULT_DIALOG_PROC_AUTOCOMPLETE = ::T.let(nil, ::T.untyped)
  FILENAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  HISTORY = ::T.let(nil, ::T.untyped)
  IOGate = ::T.let(nil, ::T.untyped)
  USERNAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Reline::ANSI
  ANSI_CURSOR_KEY_BINDINGS = ::T.let(nil, ::T.untyped)
  CAPNAME_KEY_BINDINGS = ::T.let(nil, ::T.untyped)
  END_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
  START_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
end

class Reline::Config
  KEYSEQ_PATTERN = ::T.let(nil, ::T.untyped)
  VARIABLE_NAMES = ::T.let(nil, ::T.untyped)
  VARIABLE_NAME_SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Reline::Core
  ATTR_READER_NAMES = ::T.let(nil, ::T.untyped)
end

class Reline::Dumb
  RESET_COLOR = ::T.let(nil, ::T.untyped)
end

class Reline::IO
  RESET_COLOR = ::T.let(nil, ::T.untyped)
end

module Reline::KeyActor
  EMACS_MAPPING = ::T.let(nil, ::T.untyped)
  VI_COMMAND_MAPPING = ::T.let(nil, ::T.untyped)
  VI_INSERT_MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyStroke
  CSI_INTERMEDIATE_BYTES_RANGE = ::T.let(nil, ::T.untyped)
  CSI_PARAMETER_BYTES_RANGE = ::T.let(nil, ::T.untyped)
  ESC_BYTE = ::T.let(nil, ::T.untyped)
  MATCHED = ::T.let(nil, ::T.untyped)
  MATCHING = ::T.let(nil, ::T.untyped)
  MATCHING_MATCHED = ::T.let(nil, ::T.untyped)
  UNMATCHED = ::T.let(nil, ::T.untyped)
end

module Reline::KillRing::State
  CONTINUED = ::T.let(nil, ::T.untyped)
  FRESH = ::T.let(nil, ::T.untyped)
  PROCESSED = ::T.let(nil, ::T.untyped)
  YANK = ::T.let(nil, ::T.untyped)
end

class Reline::LineEditor
  DIALOG_DEFAULT_HEIGHT = ::T.let(nil, ::T.untyped)
  MAX_INPUT_LINES = ::T.let(nil, ::T.untyped)
  MINIMUM_SCROLLBAR_HEIGHT = ::T.let(nil, ::T.untyped)
  NullActionState = ::T.let(nil, ::T.untyped)
  VI_MOTIONS = ::T.let(nil, ::T.untyped)
end

module Reline::LineEditor::CompletionState
  COMPLETION = ::T.let(nil, ::T.untyped)
  MENU = ::T.let(nil, ::T.untyped)
  MENU_WITH_PERFECT_MATCH = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  PERFECT_MATCH = ::T.let(nil, ::T.untyped)
end

module Reline::Terminfo
  extend ::Fiddle
  extend ::Fiddle::CParser
end

class Reline::Unicode
  CSI_REGEXP = ::T.let(nil, ::T.untyped)
  EscapedChars = ::T.let(nil, ::T.untyped)
  EscapedPairs = ::T.let(nil, ::T.untyped)
  HalfwidthDakutenHandakuten = ::T.let(nil, ::T.untyped)
  MBCharWidthRE = ::T.let(nil, ::T.untyped)
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
  OSC_REGEXP = ::T.let(nil, ::T.untyped)
  WIDTH_SCANNER = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode::EastAsianWidth
  TYPE_A = ::T.let(nil, ::T.untyped)
  TYPE_F = ::T.let(nil, ::T.untyped)
  TYPE_H = ::T.let(nil, ::T.untyped)
  TYPE_N = ::T.let(nil, ::T.untyped)
  TYPE_NA = ::T.let(nil, ::T.untyped)
  TYPE_W = ::T.let(nil, ::T.untyped)
end

class Ripper
  def column(); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*arg); end

  def lineno(); end

  def parse(); end

  def state(); end

  def token(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def errors(); end

  def lex(**kw); end

  def parse(raise_errors: T.unsafe(nil)); end

  def scan(**kw); end

  def tokenize(**kw); end
end

class Ripper::Lexer::Elem
  def [](index); end

  def event(); end

  def event=(event); end

  def initialize(pos, event, tok, state, message=T.unsafe(nil)); end

  def message(); end

  def message=(message); end

  def pos(); end

  def pos=(pos); end

  def state(); end

  def state=(state); end

  def to_a(); end

  def tok(); end

  def tok=(tok); end
end

class Ripper::Lexer::Elem
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def [](index); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def |(i); end
end

class Ripper::Lexer::State
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_fndptn(*args); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*arg, **arg1); end
end

class Ripper
  def self.dedent_string(arg, arg1); end

  def self.lex_state_name(arg); end

  def self.token_match(src, pattern); end
end

RubyLex = IRB::RubyLex

class RubyVM::AbstractSyntaxTree::Node
  def all_tokens(); end

  def node_id(); end

  def pretty_print_children(q, names=T.unsafe(nil)); end

  def script_lines(); end

  def source(); end

  def tokens(); end
end

module RubyVM::AbstractSyntaxTree
  def self.node_id_for_backtrace_location(backtrace_location); end
end

class RubyVM::InstructionSequence
  def script_lines(); end
end

class RubyVM::InstructionSequence
  extend ::Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
  def self.compile_file_prism(*arg); end

  def self.compile_prism(*arg); end
end

module RubyVM::RJIT
end

module RubyVM::RJIT
  def self.enable(); end

  def self.enabled?(); end
end

class RubyVM
  def self.keep_script_lines(); end

  def self.keep_script_lines=(keep_script_lines); end
end

ScanError = StringScanner::Error

module SecureRandom
  BASE36_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Set
  def ==(other); end

  def ===(o); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Shellwords
  VERSION = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

class Socket
  AF_ALG = ::T.let(nil, ::T.untyped)
  AF_BLUETOOTH = ::T.let(nil, ::T.untyped)
  AF_CAN = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_IB = ::T.let(nil, ::T.untyped)
  AF_KCM = ::T.let(nil, ::T.untyped)
  AF_KEY = ::T.let(nil, ::T.untyped)
  AF_LLC = ::T.let(nil, ::T.untyped)
  AF_MPLS = ::T.let(nil, ::T.untyped)
  AF_NETLINK = ::T.let(nil, ::T.untyped)
  AF_PPPOX = ::T.let(nil, ::T.untyped)
  AF_RDS = ::T.let(nil, ::T.untyped)
  AF_TIPC = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AF_XDP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  PF_ALG = ::T.let(nil, ::T.untyped)
  PF_BLUETOOTH = ::T.let(nil, ::T.untyped)
  PF_CAN = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_IB = ::T.let(nil, ::T.untyped)
  PF_KCM = ::T.let(nil, ::T.untyped)
  PF_LLC = ::T.let(nil, ::T.untyped)
  PF_MPLS = ::T.let(nil, ::T.untyped)
  PF_NETLINK = ::T.let(nil, ::T.untyped)
  PF_PPPOX = ::T.let(nil, ::T.untyped)
  PF_RDS = ::T.let(nil, ::T.untyped)
  PF_TIPC = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XDP = ::T.let(nil, ::T.untyped)
  SOCK_CLOEXEC = ::T.let(nil, ::T.untyped)
  SOCK_NONBLOCK = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
  SO_INCOMING_CPU = ::T.let(nil, ::T.untyped)
  SO_INCOMING_NAPI_ID = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  AF_ALG = ::T.let(nil, ::T.untyped)
  AF_BLUETOOTH = ::T.let(nil, ::T.untyped)
  AF_CAN = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_IB = ::T.let(nil, ::T.untyped)
  AF_KCM = ::T.let(nil, ::T.untyped)
  AF_KEY = ::T.let(nil, ::T.untyped)
  AF_LLC = ::T.let(nil, ::T.untyped)
  AF_MPLS = ::T.let(nil, ::T.untyped)
  AF_NETLINK = ::T.let(nil, ::T.untyped)
  AF_PPPOX = ::T.let(nil, ::T.untyped)
  AF_RDS = ::T.let(nil, ::T.untyped)
  AF_TIPC = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AF_XDP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  PF_ALG = ::T.let(nil, ::T.untyped)
  PF_BLUETOOTH = ::T.let(nil, ::T.untyped)
  PF_CAN = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_IB = ::T.let(nil, ::T.untyped)
  PF_KCM = ::T.let(nil, ::T.untyped)
  PF_LLC = ::T.let(nil, ::T.untyped)
  PF_MPLS = ::T.let(nil, ::T.untyped)
  PF_NETLINK = ::T.let(nil, ::T.untyped)
  PF_PPPOX = ::T.let(nil, ::T.untyped)
  PF_RDS = ::T.let(nil, ::T.untyped)
  PF_TIPC = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XDP = ::T.let(nil, ::T.untyped)
  SOCK_CLOEXEC = ::T.let(nil, ::T.untyped)
  SOCK_NONBLOCK = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
  SO_INCOMING_CPU = ::T.let(nil, ::T.untyped)
  SO_INCOMING_NAPI_ID = ::T.let(nil, ::T.untyped)
end

class Socket::ResolutionError
  def error_code(); end
end

class String
  def dedup(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class String
  def self.new(*arg); end
end

class StringIO
  def pread(*arg); end

  def set_encoding_by_bom(); end
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class StringIO
  def self.new(*arg); end
end

class StringScanner
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def deconstruct(); end

  def deconstruct_keys(arg); end

  def filter(*arg); end
end

class Struct
  def self.new(*arg); end
end

class Symbol
  def self.from_msgpack_ext(data); end
end

class SyntaxError
  def path(); end
end

module SyntaxSuggest
end

class SyntaxSuggest::MiniStringIO
  def initialize(isatty: T.unsafe(nil)); end

  def isatty(); end

  def puts(value=T.unsafe(nil), **arg); end

  def string(); end
end

class SyntaxSuggest::MiniStringIO
end

module SyntaxSuggest
  def self.module_for_detailed_message(); end
end

module TSort
  VERSION = ::T.let(nil, ::T.untyped)
end

module TZInfo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tempfile
  def _close(); end

  def finalizer_obj(); end

  def mode(); end

  def opts(); end

  def unlinked(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tempfile::Closer
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Closer
end

class Tempfile::Remover
  def call(*args); end

  def initialize(path); end
end

class Tempfile::Remover
end

class Thor::Argument
  def enum_to_s(); end

  def print_default(); end
end

class Thor::Command
  def method_at_least_one_option_names(); end

  def method_exclusive_option_names(); end
end

class Thor::CoreExt::HashWithIndifferentAccess
  def except(*keys); end

  def slice(*keys); end
end

class Thor::Group
  def self.command_exists?(command_name); end
end

class Thor::Option
  def aliases_for_usage(); end
end

class Thor::Options
  def check_at_least_one!(); end

  def check_exclusive!(); end

  def names_to_switch_names(names=T.unsafe(nil)); end

  def unshift(arg, is_value: T.unsafe(nil)); end
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
end

module Thor::Shell
  def say_error(*args, &block); end
end

class Thor::UndefinedCommandError
  include ::Thor::Correctable
end

class Thor::UnknownArgumentError
  include ::Thor::Correctable
end

class Thor
  def self.at_least_one(*args, &block); end

  def self.command_exists?(command_name); end

  def self.exclusive(*args, &block); end

  def self.method_at_least_one(*args, &block); end

  def self.method_at_least_one_option_names(); end

  def self.method_exclusive(*args, &block); end

  def self.method_exclusive_option_names(); end

  def self.print_at_least_one_required_options(shell, command=T.unsafe(nil)); end

  def self.print_exclusive_options(shell, command=T.unsafe(nil)); end

  def self.sort_commands!(list); end
end

class Thread::Backtrace
  def self.limit(); end
end

class Thread
  def self.ignore_deadlock(); end

  def self.ignore_deadlock=(ignore_deadlock); end

  def self.new(*arg); end
end

class Time
  def deconstruct_keys(arg); end
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Timeout
  VERSION = ::T.let(nil, ::T.untyped)
end

class TracePoint
  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TracePoint
  def self.allow_reentry(); end

  def self.new(*events); end
end

class TypeError
  include ::ErrorHighlight::CoreExt
end

module URI
  include ::URI::RFC2396_REGEXP
  TBLENCURICOMP_ = ::T.let(nil, ::T.untyped)
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  COMPOSITE_MODEL_ID_DELIMITER = ::T.let(nil, ::T.untyped)
  COMPOSITE_MODEL_ID_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class URI::Generic
  def decoded_password(); end

  def decoded_user(); end
end

class URI::HTTP
  def authority(); end

  def origin(); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SEG = ::T.let(nil, ::T.untyped)
  SEG_NC = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

class URI::WSS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::WSS
end

module URI
  def self.decode_uri_component(str, enc=T.unsafe(nil)); end

  def self.for(scheme, *arguments, default: T.unsafe(nil)); end

  def self.get_encoding(label); end

  def self.register_scheme(scheme, klass); end
end

module UnicodeNormalize
end

module UnicodeNormalize
end

class User
  include ::User::GeneratedAttributeMethods
  include ::User::GeneratedAssociationMethods
  def autosave_associated_records_for_banks(*args); end

  def autosave_associated_records_for_characters(*args); end

  def autosave_associated_records_for_chests(*args); end

  def autosave_associated_records_for_collectables(*args); end

  def autosave_associated_records_for_guilds(*args); end

  def autosave_associated_records_for_guilds_users(*args); end

  def autosave_associated_records_for_pets(*args); end

  def validate_associated_records_for_banks(*args); end

  def validate_associated_records_for_characters(*args); end

  def validate_associated_records_for_chests(*args); end

  def validate_associated_records_for_collectables(*args); end

  def validate_associated_records_for_guilds(*args); end

  def validate_associated_records_for_guilds_users(*args); end

  def validate_associated_records_for_pets(*args); end
end

module User::GeneratedAssociationMethods
  def bank_ids(); end

  def bank_ids=(ids); end

  def banks(); end

  def banks=(value); end

  def character_ids(); end

  def character_ids=(ids); end

  def characters(); end

  def characters=(value); end

  def chest_ids(); end

  def chest_ids=(ids); end

  def chests(); end

  def chests=(value); end

  def collectable_ids(); end

  def collectable_ids=(ids); end

  def collectables(); end

  def collectables=(value); end

  def guild_ids(); end

  def guild_ids=(ids); end

  def guilds(); end

  def guilds=(value); end

  def pet_ids(); end

  def pet_ids=(ids); end

  def pets(); end

  def pets=(value); end
end

module User::GeneratedAssociationMethods
end

module User::GeneratedAttributeMethods
end

module User::GeneratedAttributeMethods
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  PORTS = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Extensions
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

module Zeitwerk
  VERSION = ::T.let(nil, ::T.untyped)
end

module Zeitwerk::ExplicitNamespace
  extend ::Zeitwerk::RealModName
end

class Zeitwerk::Loader
  extend ::Zeitwerk::RealModName
end

class Zlib::Deflate
  def initialize(*arg); end
end

class Zlib::GzipReader
  def initialize(*arg); end
end

class Zlib::GzipReader
  def self.zcat(*arg); end
end

class Zlib::GzipWriter
  def initialize(*arg); end
end

class Zlib::InProgressError
end

class Zlib::InProgressError
end

class Zlib::Inflate
  def initialize(*arg); end
end
